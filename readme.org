#+TITLE: Luca's literate Emacs config
#+STARTUP: content
#+OPTIONS: auto-id:t
#+HTML_HEAD: <script>var clicky_site_ids = clicky_site_ids || []; clicky_site_ids.push(101260027);</script>
#+HTML_HEAD: <script async src="//static.getclicky.com/js"></script>

* Introduction
:PROPERTIES:
:CUSTOM_ID: h:49282F28-9E13-48D2-A565-1605B1CC57B8
:END:
** This file
:PROPERTIES:
:CUSTOM_ID: h:D9ED3ADB-810A-4A1C-A1D3-5397874AFAC7
:END:
This file (~readme.org~) is my literate emacs configuration. 
Every time I save the file, the code blocks get tangled.
By default, they get tangled (in sequence) to ~./init.el~.
Some blocks override this default (e.g. see the section [[*early-init.el][early-init.el]]).

This file also is exported to HTML, it can be viewed [[https://luca.cambiaghi.me/vanilla-emacs/readme.html][here]].
See [[*org-html-themify][this section]] for my configuration.
You can access my blog at the same [[https://luca.cambiaghi.me][website]].

** Why vanilla?
:PROPERTIES:
:CUSTOM_ID: h:40A8BDAE-F8E3-4DB3-AC8C-7E5067B7EE4D
:END:
I used [[https://github.com/hlissner/doom-emacs][DOOM emacs]] for an year and I was an happy user.
One day I woke up with the wish to understand Emacs a little more.

After about a week (12/01/2021) I had restored my configuration and in the process I understood better concepts such as:
- hooks
- minor and major modes
- advices
  
It is still a long journey but I am glad I started it.
** Why literate?
:PROPERTIES:
:CUSTOM_ID: h:B5231F9E-07D2-4738-97FD-78EC648B3F3D
:END:
Having your configuration in ~org-mode~ has some benefits and some drawbacks.
It adds a layer of abstraction between me and my ~init.el~ file, is it worth it?

The main drawback is that it can happen that the ~org-mode~ file has a mistake and tangles
an incorrect ~init.el~ file. In that case you can't use your nice bindings but you are
thrown in barebones emacs and you have to =C-x C-f= your way to the ~init.el~ and run
~check-parens~.

Another drawback is that a big configuration can be slow to tangle and tangling on save can block ~emacs~.
See [[#h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F][this section]] for a solution to this drawback.

Let's consider some of the benefits:
- I can export this file to HTML ([[https://luca.cambiaghi.me/vanilla-emacs/readme.html][here]])
- People can read this file on Github ([[https://github.com/lccambiaghi/vanilla-emacs][here]]) 
- I can comfortably document my configuration (and not from within comments), include links, ~sh~ code blocks, etc.
- I can organize my configuration blocks in sections, easily disable some headings with ~COMMENT~
- If I wanted, I could use ~noweb~ and ~tangle~ to break up the configuration in files
** How can I fork it?
:PROPERTIES:
:CUSTOM_ID: h:A4F99DF1-6997-41C6-92B2-2226913F0C21
:END:
I guess one could fork this repo and use this ~org~ file as template.
You can duplicate this file, give it another name and tangle that file to your ~init.el~.

I would start with a "small" configuration, just with the "core" functionalities.
For example the [[#h:EC68944C-F745-45D8-9905-420E0813DBAF][Startup]], the [[#h:376622D2-A6B7-4050-97C6-413B0D77B89C][Package manager]] and [[#h:403F77CB-A591-4431-B568-CD802876F770][general]] sections would be a good starting point.

Then, you can start importing "sections" you are curious about, for example [[#h:06E0EA9F-7CF4-4B99-8A4A-2C63A4F8A6B6][Completion framework]] .
You could also ~COMMENT~ all headings and uncomment only those which are interesting to you.
You could find the ~org-toggle-comment~ command useful, after selecting all headings in the file.

** Structure of this configuration
:PROPERTIES:
:CUSTOM_ID: h:CEDB99C8-27AD-4118-8C8D-29A5882E47AE
:END:
- In the second section some optimization of startup time, mostly stolen from smart people.
- In the third section we bootstrap ~straight~ and  ~use-package~, our package managers
- In the fourth section we configure ~emacs~ with sane defaults and extend some its core features (e.g. ~help-mode~)
- In the fifth section we set up ~general~, which we use to manage our keybindings and lazy loading of packages. Afterwards we configure ~evil~, for modal editing.
- In the sixth section the invaluable ~org-mode~ with several extensions
- The remaining sections declare my personal configuration of UI and core packages, leveraging the great tools described in this list.
** Notable sections
:PROPERTIES:
:CUSTOM_ID: h:5752563C-7D7B-4AC2-866D-F0887C7B80AE
:END:
I am particularly proud of some sections in this configuration, because of one or more of these reasons:
- They improve my productivity considerably
- They are non-standard solutions (or at least hard to find online)
- They are particularly fine-tuned to my workflow

Here they are, without any ranking:
- [[#h:D9DB7FA2-18C6-46A9-9567-1FEFADD523AC][Adjust font size]] 
- [[*general][general]]
- [[#h:DC4B461C-91FC-4543-8C9C-FDF28121DCBA][eval operator]] 
- [[*evil-indent-plus][evil-indent-plus]]
- [[*evil-iedit-state][evil-iedit-state]]
- [[*evil-mc][evil-mc]]
- [[*org mode][org mode]]
- [[*ob-jupyter][ob-jupyter]]
- [[*org-tree-slide][org-tree-slide]]
- [[*evil-org-mode][evil-org-mode]]
- [[#h:AC175A47-E576-4AA6-A9C7-709129F4C56F][use org-id in links]] 
- [[*org-html-themify][org-html-themify]]
- [[#h:DE534B1B-9DF0-4966-A21C-B65B76B6A64E][org-jupyter-mode]] 
- [[#h:5F1EC880-5646-4E50-A460-C2F23BD864FC][Modus themes]] 
- [[*dashboard][dashboard]]
- [[*popup management][popup management]]
- [[*projectile][projectile]]
- [[*hydra-smerge][hydra-smerge]]
- [[*envrc][envrc]]
- [[*yasnippet][yasnippet]]
- [[*dired][dired]]
- [[*web browser][web browser]]
- [[*lsp mode][lsp mode]]
- [[*dap-mode][dap-mode]]
- [[*pytest][pytest]]
- [[*jupyter][jupyter]]
- [[*evil-lisp state][evil-lisp state]] 
* early-init.el and init.el
:PROPERTIES:
:CUSTOM_ID: h:EC68944C-F745-45D8-9905-420E0813DBAF
:END:
** early-init.el
:PROPERTIES:
:CUSTOM_ID: h:7DBC58C1-3944-437C-87F9-95C9202BD34E
:END:
Taken from DOOM's early init
#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
;; NOTE: early-init.el is now generated from readme.org.  Please edit that file instead

;; Defer garbage collection further back in the startup process
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)
;; Do not allow loading from the package cache (same reason).
(setq package-quickstart nil)

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Disable GUI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
;; compiled ahead-of-time when they are installed and site files are compiled
;; when gccemacs is installed.
(setq comp-deferred-compilation nil)

;;; early-init.el ends here
#+END_SRC

** init.el: startup optimization
:PROPERTIES:
:CUSTOM_ID: h:E6162DC2-7E1C-4843-8448-FF104A444B40
:END:
Taken from DOOM's init
#+BEGIN_SRC emacs-lisp :tangle init.el
;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-
;; NOTE: init.el is now generated from readme.org.  Please edit that file instead

;; `file-name-handler-alist' is consulted on every `require', `load' and various
;; path/io functions. You get a minor speed up by nooping this. However, this
;; may cause problems on builds of Emacs where its site lisp files aren't
;; byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)
(unless (daemonp)
  (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  ;; Restore `file-name-handler-alist' later, because it is needed for handling
  ;; encrypted or compressed files, among other things.
  (defun doom-reset-file-handler-alist-h ()
    ;; Re-add rather than `setq', because changes to `file-name-handler-alist'
    ;; since startup ought to be preserved.
    (dolist (handler file-name-handler-alist)
      (add-to-list 'doom--initial-file-name-handler-alist handler))
    (setq file-name-handler-alist doom--initial-file-name-handler-alist))
  (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
  (add-hook 'after-init-hook '(lambda ()
                                 ;; restore after startup
                                 (setq gc-cons-threshold 16777216
                                       gc-cons-percentage 0.1)))
  )
;; Ensure Doom is running out of this file's directory
(setq user-emacs-directory (file-truename (file-name-directory load-file-name)))
#+END_SRC

** init.el: load modules
:PROPERTIES:
:CUSTOM_ID: h:7B22A4F3-49A1-4848-A185-B4EEA060EECE
:END:
#+begin_src emacs-lisp :tangle init.el
;; (add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

(let ((file-name-handler-alist nil)
      (gc-cons-threshold 100000000))
  (require 'init-core)
  (require 'init-extra)
  )

;;; init.el ends here
#+end_src

* Package manager
:PROPERTIES:
:CUSTOM_ID: h:376622D2-A6B7-4050-97C6-413B0D77B89C
:header-args:    :emacs-lisp :tangle ./lisp/init-core.el
:END:
** bootstrap straight and straight-use-package
:PROPERTIES:
:CUSTOM_ID: h:686F7A63-013E-48ED-AC56-DF39BD398E20
:END:
Some rules/conventions:
- Prefer ~:init~ to ~:custom~. Prefer multiple ~setq~ expressions to one.
- Default to ~:defer t~, use ~:demand~ to force loading
- When packages do not require installation e.g. ~dired~, we need ~:straight (:type built-in)~ 
- If you specify ~:commands~, they will be autoloaded and the package will be loaded when the commands are first executed
    + If you use ~:general~ and bind commands to keys it will automatically load the package on first invokation

#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t)
(setq straight-vc-git-default-clone-depth 1)
(setq straight-recipes-gnu-elpa-use-mirror t)
;; (setq straight-check-for-modifications '(check-on-save find-when-checking))
(setq straight-check-for-modifications nil)
(setq use-package-always-defer t)
(defvar bootstrap-version)
(let* ((straight-repo-dir
        (expand-file-name "straight/repos" user-emacs-directory))
       (bootstrap-file
        (concat straight-repo-dir "/straight.el/bootstrap.el"))
       (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (shell-command
     (concat
      "mkdir -p " straight-repo-dir " && "
      "git -C " straight-repo-dir " clone "
      "https://github.com/raxod502/straight.el.git && "
      "git -C " straight-repo-dir " checkout 2d407bc")))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
;; This is a variable that has been renamed but straight still refers when
;; doing :sraight (:no-native-compile t)
(setq comp-deferred-compilation-black-list nil)
#+END_SRC

** straight lockfile
:PROPERTIES:
:CUSTOM_ID: h:D0E05B42-6CEF-45A0-ACF9-E5F14F6DFE76
:END:
We can run ~M-x straight-freeze-versions~ to write the file ~straight/versions/default.el~.
The content of the file can then be kept in a code block, under version control.
The code block can then be tangle again to ~straight/versions/default.el~.
We can then restore package versions using ~M-x straight-thaw-versions~.

#+begin_src emacs-lisp :tangle no
(("ESS" . "a9e9367976658391126c907b6a5dfc8ad3033ebd")
 ("a.el" . "3d341eb7813ee02b00ab28e11c915295bfd4b5a7")
 ("ace-window" . "c7cb315c14e36fded5ac4096e158497ae974bec9")
 ("aggressive-indent-mode" . "b0ec0047aaae071ad1647159613166a253410a63")
 ("alert" . "7046393272686c7a1a9b3e7f7b1d825d2e5250a6")
 ("all-the-icons-dired" . "fc2dfa1e9eb8bf1c402a675e7089638d702a27a5")
 ("all-the-icons.el" . "6917b08f64dd8487e23769433d6cb9ba11f4152f")
 ("annalist.el" . "134fa3f0fb91a636a1c005c483516d4b64905a6d")
 ("avy" . "e92cb37457b43336b765630dbfbea8ba4be601fa")
 ("blacken" . "784da60033fe3743336d1da0f33239f1bf514266")
 ("bui.el" . "f3a137628e112a91910fd33c0cff0948fa58d470")
 ("centaur-tabs" . "9c7c936e4e1de6f4f4095d70e43c9ae738d05086")
 ("centered-cursor-mode.el" . "4093821cc9759ca5a3c6e527d4cc915fc3a5ad74")
 ("cfrs" . "7c42f2c82c7ae689f3ef291b066688c58ab96298")
 ("cider" . "9c137c52cf5b769fcc52b4e8108acda10638f766")
 ("clojure-mode" . "53ef8ac076ae7811627fbdd408e519ab7fca9a0b")
 ("consult" . "9dcecad2d448e2da0ae9fa17222358176ef58dd3")
 ("csv-mode" . "8da54e8b4ef9e5fe8a0afa147c625ced603dc0aa")
 ("dap-mode" . "88eda699e77e86410cdf3eb6afb790303dd27728")
 ("darkroom" . "27b928a6e91c3207742180f7e209bae754c9c1fe")
 ("dash.el" . "0e975782086020aa12863fdb658d6a3cc748a10c")
 ("diff-hl" . "89aeb2fc8b24b6c4de4394f85041c5dd5fa60dad")
 ("dired-hacks" . "7c0ef09d57a80068a11edc74c3568e5ead5cc15a")
 ("dired-hide-dotfiles" . "964b860a40ac0d585c71760ed2ecdfa6ce7c4184")
 ("dired-single" . "98c2102429fcac6fbfdba9198c126eb1b3dcc4e5")
 ("docker-tramp.el" . "8e2b671eff7a81af43b76d9dfcf94ddaa8333a23")
 ("doom-modeline" . "49816da1a6c05e6215ec3c8aac6c5eabeb47e74c")
 ("eldoc" . "b906386cf04029e01228fde239c3a2e3e5b53603")
 ("elfeed" . "e29c8b91450bd42d90041231f769c4e5fe5070da")
 ("elisp-refs" . "b3634a4567c655a1cda51b217629849cba0ac6a7")
 ("emacs-async" . "14f48de586b0977e3470f053b810d77b07ea427a")
 ("emacs-bind-map" . "bf4181e3a41463684adfffc6c5c305b30480e30f")
 ("emacs-dashboard" . "2b1ef13392be2f07d2a52636edf578b89512d501")
 ("emacs-hide-mode-line" . "88888825b5b27b300683e662fa3be88d954b1cea")
 ("emacs-htmlize" . "49205105898ba8993b5253beec55d8bddd820a70")
 ("emacs-jupyter" . "1f0612eb936d36abab0f27b09cca691e81fc6e74")
 ("emacs-libvterm" . "6f95a1b2949f60539fd92e3a63011801a7e765fd")
 ("emacs-memoize" . "51b075935ca7070f62fae1d69fe0ff7d8fa56fdd")
 ("emacs-python-pytest" . "4a1c4c8915c12e540d41aae1d4e326a2362da541")
 ("emacs-tree-sitter" . "7f5d0938002092ec08830a73f64961021303e1e9")
 ("emacs-undo-fu" . "c0806c1903c5a0e4c69b6615cdc3366470a9b8ca")
 ("emacs-web-server" . "22ce66ea43e0eadb9ec1d691a35d9695fc29cee6")
 ("emacs-websocket" . "34e11124fdd9d73e431499ba8a6b6a8023519664")
 ("emacs-which-key" . "428aedfce0157920814fbb2ae5d00b4aea89df88")
 ("emacs-winum" . "c5455e866e8a5f7eab6a7263e2057aff5f1118b9")
 ("emacs-zmq" . "790033363cf0e78c616cfe117a2f681381e96f29")
 ("emacsmirror-mirror" . "73d68771488284cceb42f70fda551e0a516cb249")
 ("embark" . "26e73117910e78afa209524ecb8f07add45a9ec3")
 ("envrc" . "a7c6ca84a2b0617c94594a23a0c05246f14fa4ee")
 ("epl" . "78ab7a85c08222cd15582a298a364774e3282ce6")
 ("eros" . "dd8910279226259e100dab798b073a52f9b4233a")
 ("ess-view-data" . "283251e8ac19ac0c0f89a4b0f0eb38482167e52b")
 ("evil" . "6316dae58e95fe019fcb41d2d1ca5847227a16e6")
 ("evil-cleverparens" . "8c45879d49bfa6d4e414b6c1df700a4a51cbb869")
 ("evil-collection" . "f53ef08224f709c732740d45b373ef3617f6d759")
 ("evil-goggles" . "08a22058fd6a167f9f1b684c649008caef571459")
 ("evil-iedit-state" . "30fcfa96ceebed0191337c493f5c2efc8ae090ad")
 ("evil-indent-plus" . "0c7501e6efed661242c3a20e0a6c79a6455c2c40")
 ("evil-lisp-state" . "3c65fecd9917a41eaf6460f22187e2323821f3ce")
 ("evil-mc" . "7dfb2ca5ac00c249cb2f55cd6fa91fb2bfb1117e")
 ("evil-nerd-commenter" . "563cdc154b1f29d181b883563dd37be7eafafdee")
 ("evil-org-mode" . "a9706da260c45b98601bcd72b1d2c0a24a017700")
 ("evil-snipe" . "6dcac7f2516c6137a2de532fc2c052f242559ee3")
 ("evil-surround" . "346d4d85fcf1f9517e9c4991c1efe68b4130f93a")
 ("exec-path-from-shell" . "d14d6d2966efe5a1409f84a6b9d998268f74761d")
 ("f.el" . "c4dbf8c8e83df834f5d6f72cd5649b9d8a8812ec")
 ("gcmh" . "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")
 ("general.el" . "a0b17d207badf462311b2eef7c065b884462cb7c")
 ("git-timemachine" . "8d675750e921a047707fcdc36d84f8439b19a907")
 ("git.el" . "a3396a7027a7d986598c6a2d6d5599bac918f3da")
 ("gntp.el" . "767571135e2c0985944017dc59b0be79af222ef5")
 ("gnu-elpa-mirror" . "fcb3cf5ba5f16885f7851885c954222aee6f03ab")
 ("goto-chg" . "2af612153bc9f5bed135d25abe62f46ddaa9027f")
 ("helpful" . "584ecc887bb92133119f93a6716cdf7af0b51dca")
 ("hexrgb" . "90e5f07f14bdb9966648977965094c75072691d4")
 ("highlight-indent-guides" . "cf352c85cd15dd18aa096ba9d9ab9b7ab493e8f6")
 ("hl-todo" . "9661a462d86b22293caaa4c3d94f971a15dbf1d5")
 ("ht.el" . "c4c1be487d6ecb353d07881526db05d7fc90ea87")
 ("hydra" . "2d553787aca1aceb3e6927e426200e9bb9f056f1")
 ("iedit" . "5c792f5fd44797ece83169b7ef6ac6f4b259255d")
 ("inheritenv" . "13c0135ddd96519ddeb993ee21163d6e11b4f464")
 ("log4e" . "7df0c1ff4656f8f993b87064b1567618eadb5546")
 ("lsp-mode" . "8166a1fe04891efcb7f1262609e77fc48500537b")
 ("lsp-pyright" . "71ff088ac4c93b0edd012f305a3dfd1602c5d21e")
 ("lsp-treemacs" . "3bae4a91e05d55d5ca92da272ffcd497f370e9df")
 ("lsp-ui" . "62568188b7cbc0758a0c4bfb57647708406ddf51")
 ("magit" . "25f432551347468ce97b8b03987e59092e91f8f0")
 ("marginalia" . "d38a27867bcec0bafa43e8d1bd3fd96a32b15d31")
 ("markdown-mode" . "377ce39ffe69f058994ac4e98bde8cfb58661406")
 ("melpa" . "ef16b4c37ad80b034f0ed682f644cb5056743e53")
 ("modus-themes" . "1903cf653055482714c0f4cfa79e53c82fba047c")
 ("nix-mode" . "0023fc5b100ec0c939ffe699d1a7d1afcf1f417a")
 ("no-littering" . "6e8950ad296c0f57d80d034eb0b7adf538c02906")
 ("ob-async" . "de1cd6c93242a4cb8773bbe115b7be3d4dd6b97e")
 ("olivetti" . "b76a020aedb57a6a7d0ae61cde13434f5c802a44")
 ("org" . "0b117f72a82143f544ef41cc82696337d496fe97")
 ("org-appear" . "19ea96e6e2ce01b8583b25a6e5579f1be207a119")
 ("org-cv" . "2f86bab21d35f76c641b6175d33039422b6ed0db")
 ("org-fragtog" . "0151cabc7aa9f244f82e682b87713b344d780c23")
 ("org-html-themify" . "db0bdeedecb3f311ca39f165abdac809404c6e32")
 ("org-re-reveal" . "d404eb13d9e34354c081870ebdd69711937682b3")
 ("org-reverse-datetree" . "be24274dd62cd3c586cbea99c8f73db251bf319d")
 ("org-superstar-mode" . "7f83636db215bf5a10edbfdf11d12a132864a914")
 ("org-tree-slide" . "d6e8e91433dfe4968f1343b483f2680f45a77d52")
 ("ox-gfm" . "99f93011b069e02b37c9660b8fcb45dab086a07f")
 ("ox-ipynb" . "919b694763035c0ea04a3a368418355185f896b8")
 ("page-break-lines" . "69caea070379f3324c530e96e06625c3cd097cb9")
 ("paredit" . "8330a41e8188fe18d3fa805bb9aa529f015318e8")
 ("parseclj" . "eff941126859bc9e949eae5cd6c2592e731629f2")
 ("parseedn" . "90cfe3df51b96f85e346f336c0a0ee6bf7fee508")
 ("persistent-scratch" . "57221e5fdff22985c0ea2f3e7c282ce823ea5932")
 ("persp-projectile" . "533808b3e4f8f95a1e3ed9c55d9aa720277ebd5f")
 ("perspective-el" . "2f2b59e693f08b8d9c81062fca25e6076b6e7f8d")
 ("pfuture" . "d7926de3ba0105a36cfd00811fd6278aea903eef")
 ("pkg-info" . "76ba7415480687d05a4353b27fea2ae02b8d9d61")
 ("posframe" . "3454a4cb9d218c38f9c5b88798dfb2f7f85ad936")
 ("powerline" . "346de84be53cae3663b4e2512222c279933846d4")
 ("prescient.el" . "42adc802d3ba6c747bed7ea1f6e3ffbbdfc7192d")
 ("projectile" . "c31bd41c0b9d6fba8837ebfd3a31dec0b3cd73c6")
 ("pyimport" . "a6f63cf7ed93f0c0f7c207e6595813966f8852b9")
 ("python-mode" . "41b123b4d4906cce7591900a952bb75a38c5296c")
 ("queue" . "52206c0f78afc0dfb9a287cb928c1e725103336d")
 ("rainbow-delimiters" . "f43d48a24602be3ec899345a3326ed0247b960c6")
 ("restart-emacs" . "1607da2bc657fe05ae01f7fdf26f716eafead02c")
 ("s.el" . "43ba8b563bee3426cead0e6d4ddc09398e1a349d")
 ("selectrum" . "015798542b441d993d53b967d49df3dc0162ca37")
 ("sesman" . "edee869c209c016e5f0c5cbb8abb9f3ccd2d1e05")
 ("shrink-path.el" . "c14882c8599aec79a6e8ef2d06454254bb3e1e41")
 ("shut-up" . "081d6b01e3ba0e60326558e545c4019219e046ce")
 ("smartparens" . "63695c64233d215a92bf08e762f643cdb595bdd9")
 ("spinner" . "61f59fab44d22cd5add61a1baf3f0b88a5d829d7")
 ("straight.el" . "2d407bccd9378f1d5218f8ba2ae85c6be73fbaf1")
 ("templatel" . "a3458234b8e0e83c46c6aca11a757c1134752c09")
 ("toml-mode.el" . "f6c61817b00f9c4a3cab1bae9c309e0fc45cdd06")
 ("transient" . "90e640fe8fa3f309c7cf347501e86ca5cd0bd85e")
 ("transpose-frame" . "12e523d70ff78cc8868097b56120848befab5dbc")
 ("treemacs" . "332d4e0f1f606c472dd083c9cdd4f143ee23020a")
 ("use-package" . "caa92f1d64fc25480551757d854b4b49981dfa6b")
 ("vertico" . "cc23578c9143d2e320c9ed0283ad2e82c37ab65d")
 ("vterm-toggle" . "61cb072af997aa961e2aebe0125b883ff3bd6f43")
 ("weblorg" . "ca7136629fc3f3f1646fa9bd5ad51766062edb39")
 ("with-editor" . "6735180e73e787b79535c245b162249b70dbf841")
 ("xwwp" . "f67e070a6e1b233e60274deb717274b000923231")
 ("yaml-mode" . "fc5e1c58f94472944c4aa838f00f6adcac6fa992")
 ("yasnippet" . "5cbdbf0d2015540c59ed8ee0fcf4788effdf75b6"))
:beta
#+end_src

** Enable use-package statistics
:PROPERTIES:
:CUSTOM_ID: h:F75CE115-0722-49E4-9BD8-8A57BADAD080
:END:
If you'd like to see how many packages you've loaded, what stage of initialization they've reached, and how much aggregate time they've spent (roughly), you can enable ~use-package-compute-statistics~ after loading use-package but before any use-package forms, and then run the command M-x ~use-package-report~ to see the results. The buffer displayed is a tabulated list. You can use S in a column to sort the rows based on it.

#+BEGIN_SRC emacs-lisp
(setq use-package-compute-statistics t)
#+END_SRC

From the report:
- evil 0.56
- embark 0.25
- projectile 0.18
  
* Emacs
:PROPERTIES:
:CUSTOM_ID: h:BB41A3C4-8047-40D7-B99D-1BFDAC930D25
:header-args:    :emacs-lisp :tangle ./lisp/init-core.el
:END:
** Sane defaults
:PROPERTIES:
:CUSTOM_ID: h:94661C0F-79D0-4CD4-AA3F-CADB0E79398C
:END:
Inspired by https://github.com/natecox/dotfiles/blob/master/emacs/emacs.d/nathancox.org

To debug a LISP function use ~debug-on-entry~. You step /in/ with =d= and /over/ with =e=

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (setq inhibit-startup-screen t
        initial-scratch-message nil
        sentence-end-double-space nil
        ring-bell-function 'ignore
        frame-resize-pixelwise t)

  (setq user-full-name "Luca Cambiaghi"
        user-mail-address "luca.cambiaghi@me.com")

  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  ;; always allow 'y' instead of 'yes'.
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; default to utf-8 for all the things
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

  ;; write over selected text on input... like all modern editors do
  (delete-selection-mode t)

  ;; enable recent files mode.
  (recentf-mode t)
  (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
                          ,(expand-file-name "eln-cache/" user-emacs-directory)
                          ,(expand-file-name "etc/" user-emacs-directory)
                          ,(expand-file-name "var/" user-emacs-directory)))

  ;; don't want ESC as a modifier
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Don't persist a custom file, this bites me more than it helps
  (setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
  (setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
  (setq enable-local-variables :all)     ; fix =defvar= warnings

  ;; stop emacs from littering the file system with backup files
  (setq make-backup-files nil
        auto-save-default nil
        create-lockfiles nil)

  ;; follow symlinks 
  (setq vc-follow-symlinks t)

  ;; don't show any extra window chrome
  (when (window-system)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1))

  ;; enable winner mode globally for undo/redo window layout changes
  (winner-mode t)

  (show-paren-mode t)

  ;; less noise when compiling elisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  (setq native-comp-async-report-warnings-errors nil)
  (setq load-prefer-newer t)


  ;; clean up the mode line
  (display-time-mode -1)
  (setq column-number-mode t)
  
  ;; use common convention for indentation by default
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 2)
  )
#+END_SRC

** custom variables
:PROPERTIES:
:CUSTOM_ID: h:AC160303-DF53-4597-9BAA-3AE1E7E13431
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init

  (defcustom lc/default-font-family "fira code" 
		"Default font family"
    :type 'string
    :group 'lc)

  (defcustom lc/variable-pitch-font-family  "cantarell"
		"Variable pitch font family"
    :type 'string
    :group 'lc)
	
  (defcustom lc/laptop-font-size 150
		"Font size used for laptop"
    :type 'int
    :group 'lc)

  (defcustom lc/theme nil
    "Current theme (light or dark)"
    :type 'symbol
    :options '(light dark)
    :group 'lc)
  )
#+end_src

** Font
:PROPERTIES:
:CUSTOM_ID: h:3CDD0539-5A95-468C-85F0-71B391D7115D
:END:
#+begin_src emacs-lisp
(use-package emacs
	:init
	(defun lc/get-font-size ()
		"font size is calculated according to the size of the primary screen"
		(let* (;; (command "xrandr | awk '/primary/{print sqrt( ($(nf-2)/10)^2 + ($nf/10)^2 )/2.54}'")
					 (command "osascript -e 'tell application \"finder\" to get bounds of window of desktop' | cut -d',' -f3")
					 (screen-width (string-to-number (shell-command-to-string command))))  ;;<
      (if (> screen-width 2560) lc/laptop-font-size lc/laptop-font-size))) 
	
  ;; Main typeface
  (set-face-attribute 'default nil :font lc/default-font-family :height (lc/get-font-size))
  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font lc/default-font-family :height (lc/get-font-size))
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font lc/variable-pitch-font-family :height (lc/get-font-size) :weight 'regular)
	)
#+end_src

** Adjust font size
:PROPERTIES:
:CUSTOM_ID: h:D9DB7FA2-18C6-46A9-9567-1FEFADD523AC
:END:
#+begin_src emacs-lisp
(use-package emacs
	:init
	(defun lc/adjust-font-size (height)
		"Adjust font size by given height. If height is '0', reset font
size. This function also handles icons and modeline font sizes."
		(interactive "nHeight ('0' to reset): ")
		(let ((new-height (if (zerop height)
													(lc/get-font-size)
												(+ height (face-attribute 'default :height)))))
			(set-face-attribute 'default nil :height new-height)
			(set-face-attribute 'fixed-pitch nil :height new-height)
			(set-face-attribute 'variable-pitch nil :height new-height)
			(set-face-attribute 'mode-line nil :height new-height)
			(set-face-attribute 'mode-line-inactive nil :height new-height)
			(message "Font size: %s" new-height)))

	(defun lc/increase-font-size ()
		"Increase font size by 0.5 (5 in height)."
		(interactive)
		(lc/adjust-font-size 5))

	(defun lc/decrease-font-size ()
		"Decrease font size by 0.5 (5 in height)."
		(interactive)
		(lc/adjust-font-size -5))

	(defun lc/reset-font-size ()
		"Reset font size according to the `lc/default-font-size'."
		(interactive)
		(lc/adjust-font-size 0))
	)
#+end_src

** macOS
:PROPERTIES:
:CUSTOM_ID: h:7BA73F60-D31F-4A96-9DEE-02A4FC1BEE8B
:END:
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (defun lc/is-macos? ()
    (and (eq system-type 'darwin)
         (= 0 (length (shell-command-to-string "uname -a | grep iPad")))))
  (when (lc/is-macos?)
    (setq mac-command-modifier 'super)     ; command as super
    (setq mac-option-modifier 'meta)     ; alt as meta
    (setq mac-control-modifier 'control)
    )
	;; when on emacs-mac 
	(when (fboundp 'mac-auto-operator-composition-mode)
      (mac-auto-operator-composition-mode)   ;; enables font ligatures
      (global-set-key [(s c)] 'kill-ring-save)
      (global-set-key [(s v)] 'yank)
      (global-set-key [(s x)] 'kill-region)
      (global-set-key [(s q)] 'kill-emacs)
      )
	)
#+END_SRC

** Garbage collector magic hack
:PROPERTIES:
:CUSTOM_ID: h:A17DC2B8-4E73-4F43-BD6E-07ADAEC9A3A7
:END:
Used by DOOM to manage garbage collection
#+BEGIN_SRC emacs-lisp
(use-package gcmh
  :demand
  :config
  (gcmh-mode 1))
#+END_SRC

** helpful
:PROPERTIES:
:CUSTOM_ID: h:273CA7B2-AE07-4571-AB4A-92523B11DB41
:END:
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :after evil
    :init
    (setq evil-lookup-func #'helpful-at-point)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** eldoc
:PROPERTIES:
:CUSTOM_ID: h:FC10A86D-86E6-45C2-8759-ADE233B0D80C
:END:
#+begin_src emacs-lisp
  (use-package eldoc
    :hook (emacs-lisp-mode cider-mode))
#+end_src

** exec path from shell
:PROPERTIES:
:CUSTOM_ID: h:B1611A44-8567-4370-80B4-9D904434E274
:END:
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    ;; :if (memq window-system '(mac ns))
    :if (lc/is-macos?)
    :hook (emacs-startup . (lambda ()
                             (setq exec-path-from-shell-arguments '("-l")) ; removed the -i for faster startup
                             (exec-path-from-shell-initialize)))
    ;; :config
    ;; (exec-path-from-shell-copy-envs
    ;;  '("GOPATH" "GO111MODULE" "GOPROXY"
    ;;    "NPMBIN" "LC_ALL" "LANG" "LC_TYPE"
    ;;    "SSH_AGENT_PID" "SSH_AUTH_SOCK" "SHELL"
    ;;    "JAVA_HOME"))
    )
#+end_src

** no littering
:PROPERTIES:
:CUSTOM_ID: h:2DB2921D-434E-4321-A15E-4B3329ABC946
:END:
#+begin_src emacs-lisp
(use-package no-littering
	:demand
	:config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))
	)
#+end_src

** server mode
:PROPERTIES:
:CUSTOM_ID: h:5F50A0A6-0C8E-4804-BBF5-A8D9B1372F12
:END:
#+begin_src emacs-lisp
(use-package emacs
	:init
	(unless (and (fboundp 'server-running-p)
               (server-running-p))
    (server-start)))
#+end_src

** Auto-pair parenthesis
:PROPERTIES:
:CUSTOM_ID: h:BE3F251D-5F39-4337-B27C-CFB81EE9A504
:END:
#+begin_src emacs-lisp
(use-package emacs
  :hook
  ((org-jupyter-mode . (lambda () (setq-local electric-pair-text-pairs lc/default-electric-pairs)))
   (org-mode . (lambda () (lc/add-local-electric-pairs '((?= . ?=) (?~ . ?~))))))
  :init
  ;; auto-close parentheses
  (electric-pair-mode +1)
  (setq electric-pair-preserve-balance nil)
  ;; mode-specific local-electric pairs
  (defconst lc/default-electric-pairs electric-pair-pairs)
  (defun lc/add-local-electric-pairs (pairs)
    "Example usage: 
    (add-hook 'jupyter-org-interaction-mode '(lambda () (set-local-electric-pairs '())))
    "
    (setq-local electric-pair-pairs (append lc/default-electric-pairs pairs))
    (setq-local electric-pair-text-pairs electric-pair-pairs))

  ;; disable auto pairing for <  >
  (add-function :before-until electric-pair-inhibit-predicate
                (lambda (c) (eq c ?<   ;; >
																))))  
#+end_src

* Keybindings
:PROPERTIES:
:CUSTOM_ID: h:A992628D-9095-4392-9C96-2633E8DDDE08
:header-args:    :emacs-lisp :tangle ./lisp/init-core.el
:END:
** general
:PROPERTIES:
:CUSTOM_ID: h:403F77CB-A591-4431-B568-CD802876F770
:END:
In this block we load ~general~ and define bindings for generic commands e.g. ~find-file~.
The commands provided by packages should be binded in the ~use-package~ block, thanks to the ~:general~ keyword.
NOTE: We need to load ~general~ before ~evil~, otherwise the ~:general~ keyword in the ~use-package~ blocks won't work.

#+BEGIN_SRC emacs-lisp
(use-package general
  :demand t
  :config
  (general-evil-setup)

  (general-create-definer lc/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer lc/local-leader-keys
    :states '(normal visual)
    :keymaps 'override
    :prefix ","
    :global-prefix "SPC m")

  (lc/leader-keys
    "SPC" '(execute-extended-command :which-key "execute command")
    "`" '((lambda () (interactive) (switch-to-buffer (other-buffer (current-buffer) 1))) :which-key "prev buffer")
    
    ";" '(eval-expression :which-key "eval sexp")

    "b" '(:ignore t :which-key "buffer")
    "br"  'revert-buffer
    ;; "bs" '((lambda () (interactive)
    ;;          (pop-to-buffer "*scratch*"))
    ;;        :wk "scratch")
    "bd"  'kill-current-buffer

    "c" '(:ignore t :which-key "code")

    "f" '(:ignore t :which-key "file")
    "fD" '((lambda () (interactive) (delete-file (buffer-file-name))) :wk "delete")
    "ff"  'find-file
    "fs" 'save-buffer
    "fr" 'recentf-open-files
    "fR" '((lambda (new-path)
             (interactive (list (read-file-name "Move file to: ") current-prefix-arg))
             (rename-file (buffer-file-name) (expand-file-name new-path)))
           :wk "move/rename")

    "g" '(:ignore t :which-key "git")
    ;; keybindings defined in magit

    "h" '(:ignore t :which-key "describe")
    "he" 'view-echo-area-messages
    "hf" 'describe-function
    "hF" 'describe-face
    "hl" 'view-lossage
    "hL" 'find-library
    "hm" 'describe-mode
    "hk" 'describe-key
    "hK" 'describe-keymap
    "hp" 'describe-package
    "hv" 'describe-variable

    "k" '(:ignore t :which-key "kubernetes")
    ;; keybindings defined in kubernetes.el

    "o" '(:ignore t :which-key "org")
    ;; keybindings defined in org-mode

    ;; "p" '(:ignore t :which-key "project")
    ;; keybindings defined in projectile

    "s" '(:ignore t :which-key "search")
    ;; keybindings defined in consult

    "t"  '(:ignore t :which-key "toggle")
    "t d"  '(toggle-debug-on-error :which-key "debug on error")
    "t l" '(display-line-numbers-mode :wk "line numbers")
    "t w" '((lambda () (interactive) (toggle-truncate-lines)) :wk "word wrap")
    "t +"	'(lc/increase-font-size :wk "+ font")
    "t -"	'(lc/decrease-font-size :wk "- font")
    "t 0"	'(lc/reset-font-size :wk "reset font")

    "u" '(universal-argument :wk "universal")

    "w" '(:ignore t :which-key "window")
    "wl"  'windmove-right
    "wh"  'windmove-left
    "wk"  'windmove-up
    "wj"  'windmove-down
    "wr" 'winner-redo
    "wd"  'delete-window
    "w=" 'balance-windows-area
    "wD" 'kill-buffer-and-window
    "wu" 'winner-undo
    "wr" 'winner-redo
    "wm"  '(delete-other-windows :wk "maximize")

    "x" '(:ignore t :which-key "browser")
    ;; keybindings defined in xwwp
    )

  (lc/local-leader-keys
    :states 'normal
    "d" '(:ignore t :which-key "debug")
    "e" '(:ignore t :which-key "eval")
    "t" '(:ignore t :which-key "test")))
#+END_SRC

** evil
:PROPERTIES:
:CUSTOM_ID: h:D32C2E37-37BE-4033-B9A5-270D47570991
:END:
*** evil mode
:PROPERTIES:
:CUSTOM_ID: h:331844DD-1F0E-4348-84F5-F53350749226
:END:
Best VIM reference: https://countvajhula.com/2021/01/21/vim-tip-of-the-day-a-series/

Search tricks:
- =*= / # to go to next/prev occurence of symbol under point
- =/= starts a search, use =n= / =N= to go to next/prev
- Use the =gn= noun to, for example, change next match with =cgn=

Some interesting vim nouns:
- =_= :: first character in the line (synonym to =^=)
- =g_= :: last character on the line (synonym to =$=)
  
Marks:
- =ma= :: mark a position in buffer and save it to register ~a~
- ='a= :: go to mark ~a~
- =mA= :: mark position and filename                              [
- =]'= :: go to next mark
- =''= :: go back to previous mark (kept track automatically)
- =g;= :: go to previous change location
  + =gi= :: go back to insert mode where you left off
- =C-o= :: jump (out) to previous position (useful after =gd=)
- =C-i= :: jump (in) to previous position

Macros:
- =qq= :: record macro ~q~
- =@q= :: execute macro ~q~

Registers:
- ="ayio= :: save object in register ~a~                              "
- ="ap= :: paste object in register ~a~                                "
  + Macros are saved in registers so you can simply ="qp= and paste your macro!!          "

NOTE: I inserted the above quotes because the single double quotes were breaking my VIM object detection
in the rest of the file

#+BEGIN_SRC emacs-lisp
(use-package evil
  :demand
  :general
  (lc/leader-keys
    "wv" 'evil-window-vsplit
    "ws" 'evil-window-split)
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-want-Y-yank-to-eol t)
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-fu)
	(setq evil-search-module 'evil-search)  ;; enables gn
  ;; move to window when splitting
  (setq evil-split-window-below t)
  (setq evil-vsplit-window-right t)
  ;; (setq-local evil-scroll-count 0)
  (setq evil-auto-indent nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	(define-key evil-motion-state-map "_" 'evil-end-of-line)
	(define-key evil-motion-state-map "0" 'evil-beginning-of-line)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  ;; don't move cursor after ==
  (defun lc/evil-dont-move-cursor (orig-fn &rest args)
    (save-excursion (apply orig-fn args)))
  (advice-add 'evil-indent :around #'lc/evil-dont-move-cursor)
  )
#+END_SRC

*** evil-collection
:PROPERTIES:
:CUSTOM_ID: h:04B5B86D-5E51-41A8-ACE5-D07EBCDBA4E7
:END:
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :demand
	:init
	(setq evil-collection-magit-use-z-for-folds nil)
  :config
  (evil-collection-init))
#+END_SRC

*** eval operator
:PROPERTIES:
:CUSTOM_ID: h:DC4B461C-91FC-4543-8C9C-FDF28121DCBA
:END:
This section provides a custom eval operator, accessible with =gr=.
This gives you super powers when coupled with custom text objects (provided by  [[*evil-indent-plus][evil-indent-plus]]  and [[*evil-cleverparens][evil-cleverparens]] )

For example:
- =grab= evals the form at point
- =grad= evals the top-level form (e.g. use-package blocks or functions)
- =grak= evals the function in ~python~
- =grr= evals the line

#+begin_src emacs-lisp
(use-package evil
  :config
  (defcustom evil-extra-operator-eval-modes-alist
    '(;; (emacs-lisp eval-region)
      ;; (scheme-mode geiser-eval-region)
      (clojure-mode cider-eval-region)
			(jupyter-python jupyter-eval-region) ;; when executing in src block
      (python-mode jupyter-eval-region) ;; when executing in org-src-edit mode
      )
    "Alist used to determine evil-operator-eval's behaviour.
Each element of this alist should be of this form:
 (MAJOR-MODE EVAL-FUNC [ARGS...])
MAJOR-MODE denotes the major mode of buffer. EVAL-FUNC should be a function
with at least 2 arguments: the region beginning and the region end. ARGS will
be passed to EVAL-FUNC as its rest arguments"
    :type '(alist :key-type symbol)
    :group 'evil-extra-operator)

  (evil-define-operator evil-operator-eval (beg end)
    "Evil operator for evaluating code."
    :move-point nil
    (interactive "<r>")
    (let* ((mode (if (org-in-src-block-p) (intern (car (org-babel-get-src-block-info))) major-mode))
					 (ele (assoc mode evil-extra-operator-eval-modes-alist))
           (f-a (cdr-safe ele))
           (func (car-safe f-a))
           (args (cdr-safe f-a)))
      (if (fboundp func)
          (apply func beg end args)
        (eval-region beg end t))))
	
  (define-key evil-motion-state-map "gr" 'evil-operator-eval)
  
  )

#+end_src

*** evil-goggles
:PROPERTIES:
:CUSTOM_ID: h:DF40753F-AE4C-4A22-90B1-7468A5C86485
:END:
#+BEGIN_SRC emacs-lisp
(use-package evil-goggles
  :after evil
  :demand
  :init
  (setq evil-goggles-duration 0.05)
  :config
  (push '(evil-operator-eval
          :face evil-goggles-yank-face
          :switch evil-goggles-enable-yank
          :advice evil-goggles--generic-async-advice)
        evil-goggles--commands)
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces)
  )
#+END_SRC

*** evil-snipe
:PROPERTIES:
:CUSTOM_ID: h:142C0F28-5AE4-4034-B61C-3CE4D1E6B2BB
:END:
#+BEGIN_SRC emacs-lisp
(use-package evil-snipe
	:after evil
	:demand
	:config
	(evil-snipe-mode +1)
  (evil-snipe-override-mode +1))
#+END_SRC

*** evil-nerd-commenter
:PROPERTIES:
:CUSTOM_ID: h:1FF5CDDF-D69C-46D3-A5CD-97C058F5E8BA
:END:
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :general
  (general-nvmap
    "gc" 'evilnc-comment-operator
    "gC" 'evilnc-copy-and-comment-operator)
  )
#+END_SRC

*** evil-surround
:PROPERTIES:
:CUSTOM_ID: h:0F159B03-E7CB-4AC7-8871-BED1534559E6
:END:
(
- Use =S)= to surround something without spaces e.g. ~(sexp)~ 
- Use =S(= to surround something with spaces e.g. ~( sexp )~
)

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :general
  (:states 'operator
   "s" 'evil-surround-edit
   "S" 'evil-Surround-edit)
  (:states 'visual
   "S" 'evil-surround-region
   "gS" 'evil-Surround-region))
#+END_SRC

*** evil-indent-plus
:PROPERTIES:
:CUSTOM_ID: h:F5CFE676-28DE-4B1F-BDDF-3DA431FAB728
:END:
To select a function in ~python~:
- Stand on a line in the body of the function (root, not an if)
- Select with =vik= 

#+begin_src emacs-lisp
(use-package evil-indent-plus
	:after evil
	:demand
  :config
  (define-key evil-inner-text-objects-map "i" 'evil-indent-plus-i-indent)
  (define-key evil-outer-text-objects-map "i" 'evil-indent-plus-a-indent)
	(define-key evil-inner-text-objects-map "k" 'evil-indent-plus-i-indent-up)
	(define-key evil-outer-text-objects-map "k" 'evil-indent-plus-a-indent-up)
	(define-key evil-inner-text-objects-map "j" 'evil-indent-plus-i-indent-up-down)
	(define-key evil-outer-text-objects-map "j" 'evil-indent-plus-a-indent-up-down)
	)
#+end_src

*** evil-cleverparens
:PROPERTIES:
:CUSTOM_ID: h:02F42E4A-7DB4-4150-AA74-22CB3FE7636C
:END:
This package provides additional text objects for LISPs. For example:
- Mark the outer form with =v a d=
- Mark the current form with =v a f= (similar to the =b= text object)

#+begin_src emacs-lisp
(use-package evil-cleverparens
  :hook
  ((emacs-lisp-mode . evil-cleverparens-mode)
   (clojure-mode . evil-cleverparens-mode))
  :init
  (setq evil-move-beyond-eol t
        evil-cleverparens-use-additional-bindings nil
        evil-cleverparens-use-s-and-S nil
        ;; evil-cleverparens-swap-move-by-word-and-symbol t
        ;; evil-cleverparens-use-regular-insert t
        )
  ;; :config
  ;; (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
  )
#+end_src

*** evil-iedit-state
:PROPERTIES:
:CUSTOM_ID: h:4055D055-3521-41DE-8BC5-0196F89BB3F8
:END:
Keybindings:
- =TAB= :: toggle occurrence
- =n= / =N= :: next/prev occurrence
- =F= :: restrict scope to function
- =J= / =K= :: extend scope of match down/up
- =V= :: toggle visibility of matches
  
#+begin_src emacs-lisp
(use-package evil-iedit-state
  :general
  (lc/leader-keys
		"s e" '(evil-iedit-state/iedit-mode :wk "iedit")
		"s q" '(evil-iedit-state/quit-iedit-mode :wk "iedit quit")))
#+end_src

*** evil-mc
:PROPERTIES:
:CUSTOM_ID: h:B26642F5-695F-4475-92B5-2EB9B1C1A96A
:END:
#+begin_src emacs-lisp
(use-package evil-mc
	:general
	(general-vmap
    "A" #'evil-mc-make-cursor-in-visual-selection-end
    "I" #'evil-mc-make-cursor-in-visual-selection-beg)
	(general-nmap
		"Q" #'evil-mc-undo-all-cursors)
	:config
	(global-evil-mc-mode 1)
	)
#+end_src

*** Fix scroll error when centaur tabs is active
:PROPERTIES:
:CUSTOM_ID: h:FD4609AC-AD2E-44EA-81FC-0154D84C9701
:END:
Taken from this PR: https://github.com/emacs-evil/evil/pull/1323/files

#+begin_src emacs-lisp
(use-package evil
  :init
  (defun lc/evil-posn-x-y (position)
    (let ((xy (posn-x-y position)))
      (when header-line-format
        (setcdr xy (+ (cdr xy)
                      (or (and (fboundp 'window-header-line-height)
                               (window-header-line-height))
                          evil-cached-header-line-height
                          (setq evil-cached-header-line-height (evil-header-line-height))))))
      (when (fboundp 'window-tab-line-height)
        (setcdr xy (+ (cdr xy) (window-tab-line-height))))
      xy))
  :config
  (advice-add 'evil-posn-x-y :override #'lc/evil-posn-x-y)
  )
#+end_src

** which-key
:PROPERTIES:
:CUSTOM_ID: h:4F5BF801-2E48-44B3-8822-240BC6D08732
:END:
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  ;; (setq which-key-idle-delay 0.5)
  :config
  (which-key-mode))
#+END_SRC

* Org
:PROPERTIES:
:CUSTOM_ID: h:B1DBE90D-B6C9-4BD4-B15B-185FE238D236
:header-args:    :emacs-lisp :tangle ./lisp/init-core.el
:END:
** org mode
:PROPERTIES:
:CUSTOM_ID: h:934C85A9-D8DB-455F-A19C-570300047FD5
:END:
Interesting bits:
- If you use + in lists it will show up as below:
  + subitem
- you can cycle to next TODO state with ~org-shiftright~
- You can access custom agenda views with ~org-agenda~, mapped to =SPC o A=
- Yo insert a src block use =, i= and then type initials e.g. ~jp~  for ~jupyter-python~

#+BEGIN_SRC emacs-lisp
(use-package org
  :hook ((org-mode . prettify-symbols-mode)
         (org-mode . visual-line-mode)
         (org-mode . variable-pitch-mode))
  :general
  (lc/leader-keys
    "f t" '(org-babel-tangle :wk "tangle")
    "o C" '(org-capture :wk "capture")
    "o l" '(org-todo-list :wk "todo list")
    "o c" '((lambda () (interactive)
              (persp-switch "main")
              (find-file (concat user-emacs-directory "readme.org")))
            :wk "open config")
    "o t" '((lambda () (interactive)
              (persp-switch "main")
              (find-file (concat org-directory "/personal/todo.org")))
            :wk "open todos"))
  (lc/local-leader-keys
    :keymaps 'org-mode-map
    "a" '(org-archive-subtree :wk "archive subtree")
    "E" '(org-export-dispatch :wk "export")
    "i" '(org-insert-structure-template :wk "insert src")
    "l" '(:ignore true :wk "link")
    "l l" '(org-insert-link :wk "insert link")
    "l s" '(org-store-link :wk "store link")
    "L" '((lambda () (interactive) (org-latex-preview)) :wk "latex preview")
    ;; "L" '((lambda () (interactive) (org--latex-preview-region (point-min) (point-max))) :wk "latex")
    "r" '(org-refile :wk "refile")
    "n" '(org-toggle-narrow-to-subtree :wk "narrow subtree")
    "p" '(org-priority :wk "priority")
    "s" '(org-sort :wk "sort")
    "t" '(:ignore true :wk "todo")
    "t t" '(org-todo :wk "heading todo")
    "t s" '(org-schedule :wk "schedule")
    "t d" '(org-deadline :wk "deadline"))
  (org-mode-map
   :states 'normal
   "z i" '(org-toggle-inline-images :wk "inline images"))
  :init
  ;; general settings
  (when (file-directory-p "~/Dropbox")
    (setq org-directory "~/Dropbox/org"
          +org-export-directory "~/Dropbox/org/export"
          org-default-notes-file "~/Dropbox/org/personal/todo.org"
          org-id-locations-file "~/Dropbox/org/.orgids"
          ))	
  (setq ;; org-export-in-background t
   org-src-preserve-indentation t ;; do not put two spaces on the left
   org-startup-indented t
   ;; org-startup-with-inline-images t
   org-hide-emphasis-markers t
   org-catch-invisible-edits 'smart)
  (setq org-image-actual-width nil)
  (setq org-indent-indentation-per-level 1)
  (setq org-list-demote-modify-bullet '(("-" . "+") ("+" . "*")))
  ;; disable modules for faster startup
  (setq org-modules
        '(ol-docview
          org-habit))
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "|" "HOLD(h)" "DONE(d)")))
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "»")
                                         ("#+END_SRC" . "«")
                                         ("#+begin_src" . "»")
                                         ("#+end_src" . "«")
                                         ("lambda"  . "λ")
                                         ("->" . "→")
                                         ("->>" . "↠")))
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  :config
  ;; (efs/org-font-setup)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("clj" . "src clojure"))
  (add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python"))
  (add-to-list 'org-structure-template-alist '("jr" . "src jupyter-R"))
  ;; fontification
  (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
  (add-to-list 'org-src-lang-modes '("jupyter-R" . R))
  ;; latex
  ;; (setq org-latex-compiler "xelatex")
  ;; see https://www.reddit.com/r/emacs/comments/l45528/questions_about_mving_from_standard_latex_to_org/gkp4f96/?utm_source=reddit&utm_medium=web2x&context=3
  (setq org-latex-pdf-process '("TEXINPUTS=:$HOME/git/AltaCV//: tectonic %f"))
  (add-to-list 'org-export-backends 'beamer)
  (plist-put org-format-latex-options :scale 1.5)
  )
#+END_SRC

** org agenda
:PROPERTIES:
:CUSTOM_ID: h:345DD7DC-12A2-444B-923E-A61B11AB2D26
:END:
#+begin_src emacs-lisp
(use-package org
  :general
  (lc/leader-keys
    "f t" '(org-babel-tangle :wk "tangle")
    "o a" '(org-agenda-list :wk "agenda")
    "o A" '(org-agenda :wk "agenda")
    "o C" '(org-capture :wk "capture")
    "o l" '(org-todo-list :wk "todo list")
    "o c" '((lambda () (interactive)
              (find-file (concat user-emacs-directory "readme.org")))
            :wk "open config")
    "o n" '((lambda () (interactive) (org-agenda nil "n")) :wk "next")
    "o t" '((lambda () (interactive)
              (find-file (concat org-directory "/personal/todo.org")))
            :wk "open todos"))
  :init
  ;; if on iPad, only add readme.org
  (setq org-agenda-files (list (concat user-emacs-directory "readme.org")))
  ;; if on Mac with Dropbox, use real agenda files
  (when (file-directory-p "~/Dropbox")
    (setq org-agenda-files '("~/dropbox/org/personal/birthdays.org"
                             "~/dropbox/org/personal/todo.org"
														 "~/dropbox/Notes/Test.inbox.org"))
		)
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))
          ("w" "Work Tasks" tags-todo "+work")))
  )
#+end_src

** TODO Hack to get org-version to work
:PROPERTIES:
:CUSTOM_ID: h:78D6F7DF-905E-4016-BF91-4E9E38580633
:END:
#+begin_src emacs-lisp
(use-package org
  :config
  ;; temporary hack until straight.el supports building org properly
  (defun org-git-version ()
    "The Git version of org-mode.
  Inserted by installing org-mode or when a release is made."
    ;; (require 'git)
    ;; (let ((git-repo (expand-file-name
    ;;                  "straight/repos/org/" user-emacs-directory)))
    ;;   (string-trim
    ;;    (git-run "describe"
    ;;             "--match=release\*"
    ;;             "--abbrev=6"
    ;;             "HEAD")))
		"9.2.4")

  (defun org-release ()
    "The release version of org-mode.
  Inserted by installing org-mode or when a release is made."
    ;; (require 'git)
    ;; (let ((git-repo (expand-file-name
    ;;                  "straight/repos/org/" user-emacs-directory)))
    ;;   (string-trim
    ;;    (string-remove-prefix
    ;;     "release_"
    ;;     (git-run "describe"
    ;;              "--match=release\*"
    ;;              "--abbrev=0"
    ;;              "HEAD"))))
		"9.2.4"
		)

  ;; (provide 'org-version)
  )
#+end_src

** org capture templates
:PROPERTIES:
:CUSTOM_ID: h:7B2FC50C-4C28-4E16-96B9-CF3CB51DBE08
:END:
#+begin_src emacs-lisp
(use-package org
:init
(setq org-capture-templates
        `(("b" "Blog" entry
           (file+headline "personal/todo.org" "Blog")
           ,(concat "* WRITE %^{Title} %^g\n"
                    "SCHEDULED: %^t\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n:END:\n\n"
                    "%i%?"))
          ("d" "New Diary Entry" entry(file+olp+datetree"~/Dropbox/org/personal/diary.org" "Daily Logs")
           "* %^{thought for the day}
                 :PROPERTIES:
                 :CATEGORY: %^{category}
                 :SUBJECT:  %^{subject}
                 :MOOD:     %^{mood}
                 :END:
                 :RESOURCES:
                 :END:

                 \*What was one good thing you learned today?*:
                 - %^{whatilearnedtoday}

                 \*List one thing you could have done better*:
                 - %^{onethingdobetter}

                 \*Describe in your own words how your day was*:
                 - %?")
          ("i" "Inbox" entry
           (file+headline "personal/todo.org" "Inbox")
           ,(concat "* %^{Title}\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":END:\n\n"
                    "%i%l"))
          ("u" "New URL Entry" entry
           (file+function "~/Dropbox/org/personal/dailies.org" org-reverse-datetree-goto-date-in-file)
           "* [[%^{URL}][%^{Description}]] %^g %?")
          ("w" "Work" entry
           (file+headline "personal/todo.org" "Work")
           ,(concat "* TODO [#A] %^{Title} :@work:\n"
                    "SCHEDULED: %^t\n"
                    ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
                    "%i%?"))))
	)
#+end_src

** org-toc
:PROPERTIES:
:CUSTOM_ID: h:7715C1A7-7228-4A41-92DB-7F3F1D3A88C4
:END:
This function walks a particular directory searching for ~.org~ files and headings within them.
It creates a table of contents of that directory, with links.
It is useful to create an automatic ~index.org~ file for org directories.
I currently use it for my knowledge library.

#+begin_src emacs-lisp
(use-package org
	:init
	(defun lc/org-toc ()
		(interactive)
		(let ((headings (delq nil (cl-loop for f in (f-entries "." (lambda (f) (f-ext? f "org")) t)
																			 append
																			 (with-current-buffer (find-file-noselect f)
																				 (org-map-entries
																					(lambda ()                 ;; <
																						(when (> 2 (car (org-heading-components)))
																							(cons f (nth 4 (org-heading-components)))))))))))
			(switch-to-buffer (get-buffer-create "*toc*"))
			(erase-buffer)
			(org-mode)
			(cl-loop for (file . file-headings) in (seq-group-by #'car headings) 
							 do
							 (insert (format "* [[%s][%s]] \n" file (file-relative-name file)))
							 (cl-loop for (file . heading) in file-headings 
												do
												(insert (format "** [[%s::*%s][%s]]\n" file heading heading))))))
	)
#+end_src

** cycle only one heading 
:PROPERTIES:
:CUSTOM_ID: h:06CE7B8F-EFC7-4216-99C5-DE419A649C83
:END:
#+begin_src emacs-lisp
(use-package org
	:init
	(defun +org-cycle-only-current-subtree-h (&optional arg)
    "Toggle the local fold at the point, and no deeper.
`org-cycle's standard behavior is to cycle between three levels: collapsed,
subtree and whole document. This is slow, especially in larger org buffer. Most
of the time I just want to peek into the current subtree -- at most, expand
,*only* the current subtree.

All my (performant) foldings needs are met between this and `org-show-subtree'
(on zO for evil users), and `org-cycle' on shift-TAB if I need it."
		(interactive "P")
		(unless (eq this-command 'org-shifttab)
			(save-excursion
				(org-beginning-of-line)
				(let (invisible-p)
					(when (and (org-at-heading-p)
										 (or org-cycle-open-archived-trees
												 (not (member org-archive-tag (org-get-tags))))
										 (or (not arg)
												 (setq invisible-p (outline-invisible-p (line-end-position)))))
						(unless invisible-p
              (setq org-cycle-subtree-status 'subtree))
            (org-cycle-internal-local)
            t)))))
  :config
  ;; Only fold the current tree, rather than recursively
  (add-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h)
  )
#+end_src

** async tangle
:PROPERTIES:
:CUSTOM_ID: h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F
:END:
Taken from https://github.com/KaratasFurkan/.emacs.d

#+begin_src emacs-lisp
(defun lc/async-process (command &optional name filter)
  "Start an async process by running the COMMAND string with bash. Return the
process object for it.

NAME is name for the process. Default is \"async-process\".

FILTER is function that runs after the process is finished, its args should be
\"(process output)\". Default is just messages the output."
  (make-process
   :command `("bash" "-c" ,command)
   :name (if name name
           "async-process")
   :filter (if filter filter
             (lambda (process output) (message (s-trim output))))))

(defun lc/tangle-config ()
  "Export code blocks from the literate config file
asynchronously."
  (interactive)
  (let ((command (if (file-directory-p "/Applications/Emacs.app")
                     "/Applications/Emacs.app/Contents/MacOS/Emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'"
                   ;; on iPad
                   "emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'"
                   )))
    ;; prevent emacs from killing until tangle-process finished
    (add-to-list 'kill-emacs-query-functions
                 (lambda ()
                   (or (not (process-live-p (get-process "tangle-process")))
                       (y-or-n-p "\"fk/tangle-config\" is running; kill it? "))))
    ;; tangle config asynchronously
    (lc/async-process
     (format command
             (expand-file-name "readme.org" user-emacs-directory)
             (expand-file-name "init.el" user-emacs-directory))
     "tangle-process")
    )

  )
#+end_src

** org reverse datetree
:PROPERTIES:
:CUSTOM_ID: h:5640311D-E41F-495D-BF61-9A1CE260B67D
:END:
#+begin_src emacs-lisp
(use-package org-reverse-datetree
  :after org :demand)
#+end_src

** org-superstar
:PROPERTIES:
:CUSTOM_ID: h:9F509775-5901-47BA-AE19-C193598F3FE8
:END:
#+BEGIN_SRC emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :init
  (setq org-superstar-headline-bullets-list '("✖" "✚" "◉" "○" "▶")
        ;; org-superstar-special-todo-items t
        org-ellipsis " ↴ ")
  )
#+END_SRC

** highlight todo
:PROPERTIES:
:CUSTOM_ID: h:6944ED2A-A880-48CC-A6F6-86847D15BF65
:END:
Look at ~hl-todo-keyword-faces~ to know the keywords (can't get to change them..).
#+begin_src emacs-lisp
(use-package hl-todo
	:hook ((prog-mode org-mode) . lc/hl-todo-init)
	:init
	(defun lc/hl-todo-init ()
		(setq-local hl-todo-keyword-faces '(("HOLD" . "#cfdf30")
																				("TODO" . "#ff9977")
																				("NEXT" . "#b6a0ff")
																				("PROG" . "#00d3d0")
																				("FIXME" . "#ff9977")
																				("DONE" . "#44bc44")
																				("REVIEW" . "#6ae4b9")
																				("DEPRECATED" . "#bfd9ff")))
		(hl-todo-mode))
	)
#+end_src

** org babel
:PROPERTIES:
:CUSTOM_ID: h:9C85D837-71F4-4205-B1DD-5ECBE3FD4B11
:END:
#+BEGIN_SRC emacs-lisp
(use-package org
  :general
  (lc/local-leader-keys
    :keymaps 'org-mode-map
    "'" '(org-edit-special :wk "edit")
    "-" '(org-babel-demarcate-block :wk "split block")
    "z" '(org-babel-hide-result-toggle :wk "fold result"))
  (lc/local-leader-keys
    :keymaps 'org-src-mode-map
    "'" '(org-edit-src-exit :wk "exit")) ;;FIXME
  :init
  (setq org-confirm-babel-evaluate nil)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)))
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  )

;; enable mermaid diagram blocks
;; (use-package ob-mermaid
;;   :custom (ob-mermaid-cli-path "~/.asdf/shims/mmdc"))
#+END_SRC

** ob-async
:PROPERTIES:
:CUSTOM_ID: h:D407A727-7E47-48F6-AA29-F487A8890F43
:END:
#+begin_src emacs-lisp
(use-package ob-async
  :hook (org-load . (lambda () (require 'ob-async)))
  :init
  (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-R" "jupyter-julia")))
#+end_src

** org-tree-slide
:PROPERTIES:
:CUSTOM_ID: h:0642C8C0-3B4E-4C72-BD41-40F58FFAB736
:END:
#+begin_src emacs-lisp
(use-package org-tree-slide
	:after org
	:hook ((org-tree-slide-play . (lambda () (+remap-faces-at-start-present)))
				 (org-tree-slide-stop . (lambda () (+remap-faces-at-stop-present))))
	:general
	(lc/leader-keys
		"t p" '(org-tree-slide-mode :wk "present"))
	(general-nmap
		:keymaps '(org-tree-slide-mode-map org-mode-map)
		"C-j" 'org-tree-slide-move-next-tree
		"C-k" 'org-tree-slide-move-previous-tree)
	:init
	(setq org-tree-slide-activate-message "Presentation mode ON")
	(setq org-tree-slide-deactivate-message "Presentation mode OFF")
	(setq org-tree-slide-indicator nil)
	(setq org-tree-slide-breadcrumbs "    >    ")
	(setq org-tree-slide-heading-emphasis t)
	(setq org-tree-slide-slide-in-waiting 0.025)
	(setq org-tree-slide-content-margin-top 4)
	(defun +remap-faces-at-start-present ()
		(setq-local face-remapping-alist '((default (:height 1.50) variable-pitch)
																			 (fixed-pitch (:height 1.2) fixed-pitch)
																			 ;; (org-verbatim (:height 1.2) org-verbatim)
																			 ;; (org-block (:height 1.2) org-block)
																			 ))
		;; (setq-local olivetti-body-width 95)
		(olivetti-mode 1)
		(display-fill-column-indicator-mode 0)
		(hide-mode-line-mode 1)
		(diff-hl-mode 0)
		(centaur-tabs-mode 0))
	(defun +remap-faces-at-stop-present ()
		(setq-local face-remapping-alist '((default variable-pitch default)))
		;; (setq-local olivetti-body-width 120)
		(olivetti-mode 0)
		(display-fill-column-indicator-mode 1)
		(hide-mode-line-mode 0)
		(doom-modeline-mode 1)
		(diff-hl-mode 1)
		(centaur-tabs-mode 1))
	(setq org-tree-slide-breadcrumbs nil)
	(setq org-tree-slide-header nil)
	(setq org-tree-slide-slide-in-effect nil)
	(setq org-tree-slide-heading-emphasis nil)
	(setq org-tree-slide-cursor-init t)
	(setq org-tree-slide-modeline-display nil)
	(setq org-tree-slide-skip-done nil)
	(setq org-tree-slide-skip-comments t)
	(setq org-tree-slide-fold-subtrees-skipped t)
	(setq org-tree-slide-skip-outline-level 8) ;; or 0?
	(setq org-tree-slide-never-touch-face t)
	;; :config
	;; (org-tree-slide-presentation-profile)
	;; :custom-face
	;; (org-tree-slide-heading-level-1 ((t (:height 1.8 :weight bold))))
	;; (org-tree-slide-heading-level-2 ((t (:height 1.5 :weight bold))))
	;; (org-tree-slide-heading-level-3 ((t (:height 1.5 :weight bold))))
	;; (org-tree-slide-heading-level-4 ((t (:height 1.5 :weight bold))))
	)
#+end_src

** evil-org-mode
:PROPERTIES:
:CUSTOM_ID: h:FB4154EE-27F2-4B52-B0BB-5F95D7920EAD
:END:
Taken from DOOM:
- nice ~+org/insert-item-below~ and ~+org/dwim-at-point~ functions
- ~evil~ bindings for ~org-agenda~
- text objects:
  + use ~vie~ to select everything inside a src block
  + use ~vir~ to select everything inside a heading
  + use ==ie= to format

#+begin_src emacs-lisp
(use-package evil-org-mode
  :straight (evil-org-mode :type git :host github :repo "hlissner/evil-org-mode")
  :hook ((org-mode . evil-org-mode)
         (org-mode . (lambda () 
                       (require 'evil-org)
                       (evil-normalize-keymaps)
                       (evil-org-set-key-theme '(textobjects))
                       (require 'evil-org-agenda)
                       (evil-org-agenda-set-keys))))
  :bind
  ([remap evil-org-org-insert-heading-respect-content-below] . +org/insert-item-below) ;; "<C-return>" 
  ([remap evil-org-org-insert-todo-heading-respect-content-below] . +org/insert-item-above) ;; "<C-S-return>" 
  :general
  (general-nmap
    :keymaps 'org-mode-map :states 'normal
    "RET"   #'+org/dwim-at-point)
  :init
  (defun +org--insert-item (direction)
    (let ((context (org-element-lineage
                    (org-element-context)
                    '(table table-row headline inlinetask item plain-list)
                    t)))
      (pcase (org-element-type context)
        ;; Add a new list item (carrying over checkboxes if necessary)
        ((or `item `plain-list)
         ;; Position determines where org-insert-todo-heading and org-insert-item
         ;; insert the new list item.
         (if (eq direction 'above)
             (org-beginning-of-item)
           (org-end-of-item)
           (backward-char))
         (org-insert-item (org-element-property :checkbox context))
         ;; Handle edge case where current item is empty and bottom of list is
         ;; flush against a new heading.
         (when (and (eq direction 'below)
                    (eq (org-element-property :contents-begin context)
                        (org-element-property :contents-end context)))
           (org-end-of-item)
           (org-end-of-line)))

        ;; Add a new table row
        ((or `table `table-row)
         (pcase direction
           ('below (save-excursion (org-table-insert-row t))
                   (org-table-next-row))
           ('above (save-excursion (org-shiftmetadown))
                   (+org/table-previous-row))))

        ;; Otherwise, add a new heading, carrying over any todo state, if
        ;; necessary.
        (_
         (let ((level (or (org-current-level) 1)))
           ;; I intentionally avoid `org-insert-heading' and the like because they
           ;; impose unpredictable whitespace rules depending on the cursor
           ;; position. It's simpler to express this command's responsibility at a
           ;; lower level than work around all the quirks in org's API.
           (pcase direction
             (`below
              (let (org-insert-heading-respect-content)
                (goto-char (line-end-position))
                (org-end-of-subtree)
                (insert "\n" (make-string level ?*) " ")))
             (`above
              (org-back-to-heading)
              (insert (make-string level ?*) " ")
              (save-excursion (insert "\n"))))
           (when-let* ((todo-keyword (org-element-property :todo-keyword context))
                       (todo-type    (org-element-property :todo-type context)))
             (org-todo
              (cond ((eq todo-type 'done)
                     ;; Doesn't make sense to create more "DONE" headings
                     (car (+org-get-todo-keywords-for todo-keyword)))
                    (todo-keyword)
                    ('todo)))))))

      (when (org-invisible-p)
        (org-show-hidden-entry))
      (when (and (bound-and-true-p evil-local-mode)
                 (not (evil-emacs-state-p)))
        (evil-insert 1))))

  (defun +org/insert-item-below (count)
    "Inserts a new heading, table cell or item below the current one."
    (interactive "p")
    (dotimes (_ count) (+org--insert-item 'below)))

  (defun +org/insert-item-above (count)
    "Inserts a new heading, table cell or item above the current one."
    (interactive "p")
    (dotimes (_ count) (+org--insert-item 'above)))

  (defun +org/dwim-at-point (&optional arg)
    "Do-what-I-mean at point.
      If on a:
      - checkbox list item or todo heading: toggle it.
      - clock: update its time.
      - headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
        subtree; update statistics cookies/checkboxes and ToCs.
      - footnote reference: jump to the footnote's definition
      - footnote definition: jump to the first reference of this footnote
      - table-row or a TBLFM: recalculate the table's formulas
      - table-cell: clear it and go into insert mode. If this is a formula cell,
        recaluclate it instead.
      - babel-call: execute the source block
      - statistics-cookie: update it.
      - latex fragment: toggle it.
      - link: follow it
      - otherwise, refresh all inline images in current tree."
    (interactive "P")
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
        (setq context (org-element-property :parent context)
              type (org-element-type context)))
      (pcase type
        (`headline
         (cond ((memq (bound-and-true-p org-goto-map)
                      (current-active-maps))
                (org-goto-ret))
               ((and (fboundp 'toc-org-insert-toc)
                     (member "TOC" (org-get-tags)))
                (toc-org-insert-toc)
                (message "Updating table of contents"))
               ((string= "ARCHIVE" (car-safe (org-get-tags)))
                (org-force-cycle-archived))
               ((or (org-element-property :todo-type context)
                    (org-element-property :scheduled context))
                (org-todo
                 (if (eq (org-element-property :todo-type context) 'done)
                     (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                         'todo)
                   'done))))
         ;; Update any metadata or inline previews in this subtree
         (org-update-checkbox-count)
         (org-update-parent-todo-statistics)
         (when (and (fboundp 'toc-org-insert-toc)
                    (member "TOC" (org-get-tags)))
           (toc-org-insert-toc)
           (message "Updating table of contents"))
         (let* ((beg (if (org-before-first-heading-p)
                         (line-beginning-position)
                       (save-excursion (org-back-to-heading) (point))))
                (end (if (org-before-first-heading-p)
                         (line-end-position)
                       (save-excursion (org-end-of-subtree) (point))))
                (overlays (ignore-errors (overlays-in beg end)))
                (latex-overlays
                 (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                             overlays))
                (image-overlays
                 (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                             overlays)))
           ;; (+org--toggle-inline-images-in-subtree beg end)
           (if (or image-overlays latex-overlays)
               (org-clear-latex-preview beg end)
             (org--latex-preview-region beg end))))

        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        ((or `table `table-row)
         (if (org-at-TBLFM-p)
             (org-table-calc-current-TBLFM)
           (ignore-errors
             (save-excursion
               (goto-char (org-element-property :contents-begin context))
               (org-call-with-arg 'org-table-recalculate (or arg t))))))

        (`table-cell
         (org-table-blank-field)
         (org-table-recalculate arg)
         (when (and (string-empty-p (string-trim (org-table-get-field)))
                    (bound-and-true-p evil-local-mode))
           (evil-change-state 'insert)))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies arg)))

        ((or `src-block `inline-src-block)
         (org-babel-execute-src-block arg))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview arg))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (+org--toggle-inline-images-in-subtree
                (org-element-property :begin lineage)
                (org-element-property :end lineage))
             (org-open-at-point arg))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

        (_
         (if (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-link-any-re nil t))
             (call-interactively #'org-open-at-point)
           (+org--toggle-inline-images-in-subtree
            (org-element-property :begin context)
            (org-element-property :end context))))))))
#+end_src

** exporters
:PROPERTIES:
:CUSTOM_ID: h:EB525EBF-91AA-4A9F-8D49-5D1DFFE670FB
:END:
*** org-html-themify
:PROPERTIES:
:CUSTOM_ID: h:89A2FA66-9647-4BF8-A45C-EA61D5D95FDC
:END:
I use this package to export my config to HTML. I then push it to the ~gh-pages~ branch
#+begin_src emacs-lisp
(use-package org-html-themify
	:after modus-themes
  :straight
  (org-html-themify
   :type git
   :host github
   :repo "DogLooksGood/org-html-themify"
   :files ("*.el" "*.js" "*.css"))
  :hook (org-mode . org-html-themify-mode)
  :config
  ;; otherwise it complains about invalid face
  (require 'hl-line)
  )
#+end_src

*** ox-gfm
:PROPERTIES:
:CUSTOM_ID: h:021F6686-3272-4900-BB50-CB98C5C5C2BA
:END:
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm
	:commands (org-gfm-export-as-markdown org-gfm-export-to-markdown)
	:after org
	)
#+END_SRC

*** ox-ipynb
:PROPERTIES:
:CUSTOM_ID: h:F97C3D33-1B2E-4D80-BD51-E4052A5535DE
:END:
#+BEGIN_SRC emacs-lisp
(use-package ox-ipynb
  :straight (ox-ipynb :type git :host github :repo "jkitchin/ox-ipynb")
	:commands (ox-ipynb-export-org-file-to-ipynb-file))
#+END_SRC

*** ox-reveal
:PROPERTIES:
:CUSTOM_ID: h:6181675A-C397-4449-A8D9-AFDAECD6D4EE
:END:
#+begin_src emacs-lisp
(use-package org-re-reveal
  :after org
  :init
  ;; (setq org-re-reveal-root (expand-file-name "../../" (locate-library "dist/reveal.js" t))
  ;;       org-re-reveal-revealjs-version "4")
  (setq org-re-reveal-root "./reveal.js"
        org-re-reveal-revealjs-version "3.8"
        org-re-reveal-external-plugins  '((progress . "{ src: '%s/plugin/toc-progress/toc-progress.js', async: true, callback: function() { toc_progress.initialize(); toc_progress.create();} }"))
        ))
#+end_src

*** weblorg
:PROPERTIES:
:CUSTOM_ID: h:8739EFFA-1436-4DF9-AD0D-AD0C94144A40
:END:
#+begin_src emacs-lisp
(use-package weblorg)

(use-package templatel)

(use-package htmlize)
#+end_src

*** COMMENT LaTeX export
:PROPERTIES:
:CUSTOM_ID: h:A590CE55-C9B6-4559-BA39-0C4833030010
:END:
#+begin_src emacs-lisp
(use-package org
  :config
  (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
                 '("org-plain-latex"
                   "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (setq org-latex-listings 't)
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (add-to-list 'org-latex-packages-alist '("" "color"))
    ;; (setq org-latex-listings 'minted)
    ;; (add-to-list 'org-latex-packages-alist '("newfloat" "minted"))
    )
  )
#+end_src

In the beginning of the org document:
#+begin_example
#+SETUPFILE: ../work/latex.setup
#+end_example
 
*** ox-cv
:PROPERTIES:
:CUSTOM_ID: h:9AB653A8-CACD-45B4-A330-7EB2421370E6
:END:
#+begin_src emacs-lisp
(use-package ox-altacv
  :straight (ox-altacv :type git :host github :repo "lccambiaghi/org-cv")
  :config (require 'ox-altacv))
#+end_src
 
** org-appear
:PROPERTIES:
:CUSTOM_ID: h:474F4B7B-336B-48A8-B888-B46584E331AC
:END:
Automatically disaply emphasis markers and links when the cursor is on them.
#+begin_src emacs-lisp
(use-package org-appear
  :straight (org-appear :type git :host github :repo "awth13/org-appear")
	:hook (org-mode . org-appear-mode)
  :init
  (setq org-appear-autoemphasis  t)
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
	)

#+end_src

** automatic latex preview
:PROPERTIES:
:CUSTOM_ID: h:040DD3F1-043C-403F-A145-813BA69FC42E
:END:
#+begin_src emacs-lisp
(use-package org-fragtog
	:hook (org-mode . org-fragtog-mode))
#+end_src

** org-encrypt
:PROPERTIES:
:CUSTOM_ID: h:65931801-3A7E-4828-B052-F978731F3004
:END:
- Use ~org-encrypt-entry~ on a headline
- Use ~org-decrypt-entry~ to decrypt
#+begin_src emacs-lisp
(use-package org
  :config
  (require 'org-crypt)
  (require 'epa-file)
  (epa-file-enable)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  (setq org-crypt-key nil)
  (defun ag/reveal-and-move-back ()
    (org-reveal)
    (goto-char ag/old-point))
  (defun ag/org-reveal-after-save-on ()
    (setq ag/old-point (point))
    (add-hook 'after-save-hook 'ag/reveal-and-move-back))
  (defun ag/org-reveal-after-save-off ()
    (remove-hook 'after-save-hook 'ag/reveal-and-move-back))
  (add-hook 'org-babel-pre-tangle-hook 'ag/org-reveal-after-save-on)
  (add-hook 'org-babel-post-tangle-hook 'ag/org-reveal-after-save-off)
  )
#+end_src
 
** use org-id in links
:PROPERTIES:
:CUSTOM_ID: h:AC175A47-E576-4AA6-A9C7-709129F4C56F
:END:
Taken from https://writequit.org/articles/emacs-org-mode-generate-ids.html

Problem: when exporting org files to HTML, the header anchors are volatile.
Once I publish a new HTML version of this file, the previous version's links are no longer valid.

This function adds ~CUSTOM_ID~ property to all headings in a file (one-time).
We can then use this to link to that heading forever.

Adding it as a ~after-save-hook~  automatically adds a ~CUSTOM_ID~ to newly created headers.

#+begin_src emacs-lisp
(use-package org
  :init
  (defun lc/org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
   If POM is nil, refer to the entry at point. If the entry does
   not have an CUSTOM_ID, the function returns nil. However, when
   CREATE is non nil, create a CUSTOM_ID if none is present
   already. PREFIX will be passed through to `org-id-new'. In any
   case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          (setq id (org-id-new (concat prefix "h")))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))
  
  (defun lc/org-add-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the current
   file which do not already have one. Only adds ids if the
   `auto-id' option is set to `t' in the file somewhere. ie,
   ,#+OPTIONS: auto-id:t"
    (interactive)
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" 10000 t)
        (org-map-entries (lambda () (lc/org-custom-id-get (point) 'create))))))
  :config
  (require 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  )
#+end_src

** org-jupyter-mode
:PROPERTIES:
:CUSTOM_ID: h:DE534B1B-9DF0-4966-A21C-B65B76B6A64E
:END:
#+begin_src emacs-lisp
(use-package emacs
  :hook
  ((org-jupyter-mode . (lambda () (visual-line-mode -1)))
   (org-mode . (lambda () (when (lc/is-jupyter-org-buffer?) (org-jupyter-mode)))))
  :general
  (lc/local-leader-keys
    :states 'normal
    "k i" '(jupyter-org-interrupt-kernel :wk "interrupt")
    "k r" '(jupyter-repl-restart-kernel :wk "restart"))
  :init
  (defun lc/is-jupyter-org-buffer? ()
    (with-current-buffer (buffer-name)
      (goto-char (point-min))
      (re-search-forward "begin_src jupyter-" 10000 t)))
  
  (define-minor-mode org-jupyter-mode
    "Minor mode which is active when an org file has the string begin_src jupyter-python
    in the first few hundred rows"
    ;; :keymap (let ((map (make-sparse-keymap)))
    ;;             (define-key map (kbd "C-c f") 'insert-foo)
    ;;             map)
    )
  )
#+end_src

* UI
:PROPERTIES:
:CUSTOM_ID: h:239ABF35-3C15-416B-8C10-353F711E5541
:header-args:    :emacs-lisp :tangle ./lisp/init-core.el
:END:
** all the icons
:PROPERTIES:
:CUSTOM_ID: h:502F0F06-A555-40FF-8ADA-0A7AA9E67D7E
:END:
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

** doom modeline
:PROPERTIES:
:CUSTOM_ID: h:77D92E3F-D17F-408C-A168-928D64D1AEF8
:END:
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :demand
    :init
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-env-enable-python nil)
    (setq doom-modeline-height 15)
    (setq doom-modeline-project-detection 'projectile)
    :config
    (doom-modeline-mode 1)
    (set-face-attribute 'doom-modeline-evil-insert-state nil :foreground "orange")
)
#+END_SRC

** Fancy titlebar for macOS
:PROPERTIES:
:CUSTOM_ID: h:73688165-BE4C-411D-904C-2DD65E56766E
:END:
#+BEGIN_SRC emacs-lisp
(use-package emacs
	:init
	(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
	(add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)
	)
#+END_SRC

** Modus themes + alternate light/dark themes
:PROPERTIES:
:CUSTOM_ID: h:5F1EC880-5646-4E50-A460-C2F23BD864FC
:END:
I use a particular emacs build which has additional feature for macOS: https://github.com/railwaycat/homebrew-emacsmacport
This defines a hook that is run when macOS system theme changes from light to dark.
We use this hook to switch from light to dark theme.

#+BEGIN_SRC emacs-lisp
(use-package modus-themes
  :straight (modus-themes :type git :host gitlab :repo "protesilaos/modus-themes" :branch "main")
  :demand
  :if (display-graphic-p)
  :hook (modus-themes-after-load-theme . lc/fix-fill-column-indicator)
  :general
  (lc/leader-keys
    "t t" '((lambda () (interactive) (modus-themes-toggle)) :wk "toggle theme"))
  :init
  (setq modus-themes-slanted-constructs t
        ;; modus-themes-no-mixed-fonts t
        modus-themes-bold-constructs t
        modus-themes-fringes 'nil ; {nil,'subtle,'intense}
        modus-themes-mode-line '3d ; {nil,'3d,'moody}
        modus-themes-intense-hl-line nil
        modus-themes-prompts nil ; {nil,'subtle,'intense}
        modus-themes-completions 'moderate ; {nil,'moderate,'opinionated}
        modus-themes-diffs nil ; {nil,'desaturated,'fg-only}
        modus-themes-org-blocks 'greyscale ; {nil,'greyscale,'rainbow}
        modus-themes-headings  ; Read further below in the manual for this one
        '((1 . line-no-bold)
          (t . rainbow-line-no-bold))
        modus-themes-variable-pitch-headings t
        modus-themes-scale-headings t
        modus-themes-scale-1 1.1
        modus-themes-scale-2 1.15
        modus-themes-scale-3 1.21
        modus-themes-scale-4 1.27
        modus-themes-scale-5 1.33)	
  (defun lc/override-colors ()
    (setq modus-themes-operandi-color-overrides
          '((bg-main . "#fefcf4")
            (bg-dim . "#faf6ef")
            (bg-alt . "#f7efe5")
            (bg-hl-line . "#f4f0e3")
            (bg-active . "#e8dfd1")
            (bg-inactive . "#f6ece5")
            (bg-region . "#c6bab1")
            (bg-header . "#ede3e0")
            (bg-tab-bar . "#dcd3d3")
            (bg-tab-active . "#fdf6eb")
            (bg-tab-inactive . "#c8bab8")
            (fg-unfocused ."#55556f")))
    (setq modus-themes-vivendi-color-overrides
          '((bg-main . "#100b17")
            (bg-dim . "#161129")
            (bg-alt . "#181732")
            (bg-hl-line . "#191628")
            (bg-active . "#282e46")
            (bg-inactive . "#1a1e39")
            (bg-region . "#393a53")
            (bg-header . "#202037")
            (bg-tab-bar . "#262b41")
            (bg-tab-active . "#120f18")
            (bg-tab-inactive . "#3a3a5a")
            (fg-unfocused . "#9a9aab")))
    )
  (defun lc/load-dark-theme ()
    (setq lc/theme 'dark)
    (with-eval-after-load 'org (plist-put org-format-latex-options :foreground "whitesmoke"))
    (with-eval-after-load 'org-html-themify
      (setq org-html-themify-themes '((light . modus-vivendi) (dark . modus-vivendi))))
    (modus-themes-load-vivendi))
  (defun lc/load-light-theme ()
    (setq lc/theme 'light)
    (with-eval-after-load 'org (plist-put org-format-latex-options :foreground "dark"))
    (with-eval-after-load 'org-html-themify
      (setq org-html-themify-themes '((light . modus-operandi) (dark . modus-operandi))))
    (setenv "BAT_THEME" "ansi")
    (modus-themes-load-operandi))
  (defun lc/change-theme-with-mac-system ()
    (let ((appearance (plist-get (mac-application-state) :appearance)))
      (cond ((equal appearance "NSAppearanceNameAqua")
             (lc/load-light-theme))
            ((equal appearance "NSAppearanceNameDarkAqua")
             (lc/load-dark-theme)))))
  (defun lc/change-theme-with-timers ()
    (run-at-time "00:00" (* 60 60 24) 'lc/load-dark-theme)
    (run-at-time "08:00" (* 60 60 24) 'lc/load-light-theme)
    (run-at-time "18:00" (* 60 60 24) 'lc/load-dark-theme))
  (defun lc/fix-fill-column-indicator ()
    (when (display-graphic-p)
      (modus-themes-with-colors
        (custom-set-faces
         `(fill-column-indicator ((,class :background ,bg-inactive :foreground ,bg-inactive)))))))
  :config
  (when (display-graphic-p)
    (lc/override-colors))
  (if (and (boundp 'mac-effective-appearance-change-hook)
           (plist-get (mac-application-state) :appearance))
      (progn
        (add-hook 'after-init-hook 'lc/change-theme-with-mac-system)
        (add-hook 'mac-effective-appearance-change-hook 'lc/change-theme-with-mac-system))
    ;; (add-hook 'after-init-hook 'lc/change-theme-with-timers)
    ;; (add-hook 'emacs-startup-hook 'lc/load-light-theme)
    (add-hook 'emacs-startup-hook 'lc/change-theme-with-timers)
    )
  )
#+END_SRC

** dashboard
:PROPERTIES:
:CUSTOM_ID: h:2F4C0A6C-96BE-4818-B794-D1593C23FB00
:END:
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :demand
  :init
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-center-content t)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (defun lc/is-after-17-or-weekends? ()
    (or (thread-first (nth 4 (split-string (current-time-string) " ")) ;; time of the day e.g. 18
            (substring 0 2)
            (string-to-number)   ;;<
            (> 16))
        (thread-first (substring (current-time-string) 0 3) ;; day of the week e.g. Fri
            (member  '("Sat" "Sun")))))
  (setq dashboard-banner-logo-title nil)
  (setq dashboard-set-footer nil)
  ;; (setq dashboard-startup-banner [VALUE])
  (setq dashboard-set-navigator t)
  (setq dashboard-navigator-buttons
        `((;; Github
           (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
            "Github"
            "Go to wondercast"
            (lambda (&rest _) (browse-url "https://github.com/Maersk-Global/wondercast")))
           ;; Codebase
           (,(all-the-icons-faicon "briefcase" :height 1.1 :v-adjust -0.1)
            "JIRA"
            "Go to Kanban"
            (lambda (&rest _) (browse-url "https://jira.maerskdev.net/secure/RapidBoard.jspa?rapidView=6378&projectKey=AVOC&quickFilter=15697")))
           ;; Perspectives
           (,(all-the-icons-octicon "history" :height 1.1 :v-adjust 0.0)
            "Restore"
            "Restore"
            (lambda (&rest _) (persp-state-load persp-state-default-file)))
           )))
  (defun lc/dashboard-agenda-entry-format ()
    "Format agenda entry to show it on dashboard. Compared to the original, we remove tags at the end"
    (let* ((schedule-time (org-get-scheduled-time (point)))
           (deadline-time (org-get-deadline-time (point)))
           (item (org-agenda-format-item
                  (dashboard-agenda-entry-time (or schedule-time deadline-time))
                  (org-get-heading)
                  (org-outline-level)
                  (org-get-category)
                  nil;; (org-get-tags)
                  t))
           (loc (point))
           (file (buffer-file-name)))
      (dashboard-agenda--set-agenda-headline-face item)
      (list item loc file)))
  (defun lc/dashboard-get-agenda ()
    "Get agenda items for today or for a week from now."
    (org-compile-prefix-format 'agenda)
    (org-map-entries 'lc/dashboard-agenda-entry-format
                     dashboard-match-agenda-entry
                     'agenda
                     dashboard-filter-agenda-entry))
  (defun lc/dashboard-get-next ()
    "Get agenda items for today or for a week from now."
    (org-compile-prefix-format 'agenda)
    (org-map-entries 'lc/dashboard-agenda-entry-format
                     dashboard-match-next-entry
                     'agenda))
  (defun lc/dashboard-insert-next (list-size)
    "Add the list of LIST-SIZE items of next tasks"
    (require 'org-agenda)
    (let ((next (lc/dashboard-get-next)))
      (dashboard-insert-section
       "Next tasks"
       next
       list-size
       "n"
       `(lambda (&rest ignore)
          (let ((buffer (find-file-other-window (nth 2 ',el))))
            (with-current-buffer buffer
              (goto-char (nth 1 ',el))
              (switch-to-buffer buffer))))
       (format "%s" (nth 0 el)))))
  :config
  ;; exclude work items after 17 and on weekends
  (setq dashboard-match-next-entry "TODO=\"NEXT\"-work")
  (run-at-time "00:00" (* 60 60 24)
               (lambda ()
                 (if (lc/is-after-17-or-weekends?)
                     (setq dashboard-match-agenda-entry "life|habits"
                           dashboard-match-next-entry "TODO=\"NEXT\"-work")
                   (setq dashboard-match-agenda-entry "work|life|habits"
                         dashboard-match-next-entry "TODO=\"NEXT\""
                         ))))
  (dashboard-setup-startup-hook)
  (set-face-attribute 'dashboard-items-face nil :height (lc/get-font-size))
  ;; do not show tags in agenda view
  (advice-add 'dashboard-get-agenda :override #'lc/dashboard-get-agenda)
  ;; show next tasks in dashboard
  (add-to-list 'dashboard-item-generators  '(next . lc/dashboard-insert-next))
  (setq dashboard-items '((agenda . 5)
                          (next . 10)
                          ;; (bookmarks . 5)
                          ;; (recents  . 5)
                          (projects . 5)))
  )
#+END_SRC

** centaur tabs
:PROPERTIES:
:CUSTOM_ID: h:44BB321D-0EB1-4E28-AD98-55621DC07597
:END:
#+begin_src emacs-lisp
(use-package centaur-tabs
  :hook (emacs-startup . centaur-tabs-mode)
  :general
  (general-nmap "gt" 'centaur-tabs-forward
    "gT" 'centaur-tabs-backward)
  (lc/leader-keys
    "b K" '(centaur-tabs-kill-other-buffers-in-current-group :wk "kill other buffers"))
  :init
  (setq centaur-tabs-set-icons t)
  (setq centaur-tabs-set-modified-marker t
        centaur-tabs-modified-marker "M"
        centaur-tabs-cycle-scope 'tabs)
  (setq centaur-tabs-set-close-button nil)
  (setq centaur-tabs-enable-ido-completion nil)
  :config
  (centaur-tabs-mode t)
  ;; (centaur-tabs-headline-match)
  (centaur-tabs-group-by-projectile-project)
  )
#+end_src

** centered cursor mode
:PROPERTIES:
:CUSTOM_ID: h:26FC27A5-5E20-4440-BA86-48FAA8707D00
:END:
#+begin_src emacs-lisp
(use-package centered-cursor-mode
  :general
	(lc/leader-keys
		"t =" '((lambda () (interactive) (centered-cursor-mode 'toggle)) :wk "center cursor")
		)
	)
#+end_src

** hide mode line
:PROPERTIES:
:CUSTOM_ID: h:89BB7025-084D-4465-897D-C731EB02161A
:END:
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :commands (hide-mode-line-mode))
#+end_src

** popup management
:PROPERTIES:
:CUSTOM_ID: h:91E3AC2B-6981-4915-8508-4CA5D7182939
:END:
Taken from https://emacs.stackexchange.com/questions/46210/reuse-help-window
#+begin_src emacs-lisp
(setq display-buffer-alist
      `((,(rx bos (or "*Apropos*" "*Help*" "*helpful" "*info*" "*Summary*") (0+ not-newline))
         (display-buffer-reuse-mode-window display-buffer-below-selected)
         (window-height . 0.33)
         (mode apropos-mode help-mode helpful-mode Info-mode Man-mode))))

;; reuse existing windows
;; (setq display-buffer-alist
;;       '((".*"
;;          (display-buffer-reuse-window display-buffer-same-window)
;;          (reusable-frames . t))))

;; (setq even-window-sizes nil)  ; display-buffer hint: avoid resizing
#+end_src

** winum
:PROPERTIES:
:CUSTOM_ID: h:991499E8-6FF8-41DB-B533-6D627602DFD4
:END:
#+begin_src emacs-lisp
(use-package winum
:general
(lc/leader-keys
"1" '(winum-select-window-1 :wk "win 1")
"2" '(winum-select-window-2 :wk "win 2")
"3" '(winum-select-window-3 :wk "win 3"))
:config
(winum-mode))
#+end_src

** transpose frame
:PROPERTIES:
:CUSTOM_ID: h:9E3C0942-1D8C-403F-9D44-5BEDA2966C58
:END:
#+begin_src emacs-lisp
  (use-package transpose-frame
    :general
    (lc/leader-keys
      "w t" '(transpose-frame :wk "transpose")
      "w f" '(rotate-frame :wk "flip")))
#+end_src

** persistent scratch
:PROPERTIES:
:CUSTOM_ID: h:FF4B176D-E133-4013-9926-87F9A20E3BBD
:END:
#+begin_src emacs-lisp
(use-package persistent-scratch
  :hook
  (org-mode . (lambda ()
                "only set initial-major-mode after loading org"
                (setq initial-major-mode 'org-mode)))
  :general
  (lc/leader-keys
    "bs" '((lambda ()
             "Load persistent-scratch if not already loaded"
             (interactive)
             (progn 
               (unless (boundp 'persistent-scratch-mode)
                 (require 'persistent-scratch))
               (pop-to-buffer "*scratch*")))
           :wk "scratch"))
  :init
  (setq persistent-scratch-autosave-interval 60)
  :config
  (persistent-scratch-setup-default))
#+end_src

** olivetti mode
:PROPERTIES:
:CUSTOM_ID: h:78EE4DFB-9A75-4BB0-BD4D-CFF94ACE3CF6
:END:
#+begin_src emacs-lisp
  (use-package olivetti
    :general
    (lc/leader-keys
      "t o" '(olivetti-mode :wk "olivetti"))
    :init
    (setq olivetti-body-width 100)
    (setq olivetti-recall-visual-line-mode-entry-state t))
#+end_src

** Fill column indicator
:PROPERTIES:
:CUSTOM_ID: h:A7A49256-4E2B-45CD-A898-347C37867645
:END:
With ~evil~ you can:
- ~gww~ to fill the line
- ~gqq~ to fill the line and move to the end of it
- ~gwp~ to fill paragraph
  
#+begin_src emacs-lisp
(use-package display-fill-column-indicator
  :straight (:type built-in)
  :hook
  (prog-mode . display-fill-column-indicator-mode)
  :init
  (setq-default fill-column  90)
  ;; (setq display-fill-column-indicator-character "|")
	)
#+end_src

** Whitespace mode
:PROPERTIES:
:CUSTOM_ID: h:EE0D61ED-C9F2-47DE-9DEC-78C2F995B06A
:END:
#+begin_src emacs-lisp
(use-package emacs
  :hook
  ((org-jupyter-mode . (lambda () (whitespace-mode -1)))
   (org-mode . whitespace-mode))
  :init
  (setq-default
   whitespace-line-column 90
   whitespace-style       '(face lines-tail)))
#+end_src

** Highlight indentation guides
:PROPERTIES:
:CUSTOM_ID: h:98E70637-DC1F-4528-B848-C12D5092BD7A
:END:
#+BEGIN_SRC emacs-lisp
;; add a visual intent guide
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :init
  ;; (setq highlight-indent-guides-method 'column)
  (setq highlight-indent-guides-method 'character)
  ;; (setq highlight-indent-guides-character ?|)
  ;; (setq highlight-indent-guides-character ?❚)
  (setq highlight-indent-guides-character ?‖)
  ;; (setq highlight-indent-guides-responsive 'stack)
  (setq highlight-indent-guides-responsive 'top)
	;; (setq highlight-indent-guides-auto-enabled nil)
	;; (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  ;; (set-face-background 'highlight-indent-guides-even-face "dimgray")
  ;; (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
  )
#+END_SRC

** COMMENT Show emoji
:PROPERTIES:
:CUSTOM_ID: h:CDFFE28E-AD1A-4C9D-9B70-EF7D1E22CE56
:END:
#+begin_src emacs-lisp
(use-package emojify
  :disabled t
  :hook (after-init . global-emojify-mode))
#+end_src

** Enlarge window
:PROPERTIES:
:CUSTOM_ID: h:2D8DEB14-A1F1-4B46-B08A-CF97A0A9B237
:END:
Taken from DOOM

#+begin_src emacs-lisp
(use-package emacs
	:general
  (lc/leader-keys
    "w o" '(doom/window-enlargen :wk "enlargen"))
	:init
	(defun doom/window-enlargen (&optional arg)
		"Enlargen the current window to focus on this one. Does not close other
windows (unlike `doom/window-maximize-buffer'). Activate again to undo."
		(interactive "P")
		(let ((param 'doom--enlargen-last-wconf))
			(cl-destructuring-bind (window . wconf)
					(or (frame-parameter nil param)
							(cons nil nil))
				(set-frame-parameter
				 nil param
				 (if (and (equal window (selected-window))
									(not arg)
									wconf)
						 (ignore
							(let ((source-window (selected-window)))
								(set-window-configuration wconf)
								(when (window-live-p source-window)
									(select-window source-window))))
					 (prog1 (cons (selected-window) (or wconf (current-window-configuration)))
						 (let* ((window (selected-window))
										(dedicated-p (window-dedicated-p window))
										(preserved-p (window-parameter window 'window-preserved-size))
										(ignore-window-parameters t)
										(window-resize-pixelwise nil)
										(frame-resize-pixelwise nil))
							 (unwind-protect
									 (progn
										 (when dedicated-p
											 (set-window-dedicated-p window nil))
										 (when preserved-p
											 (set-window-parameter window 'window-preserved-size nil))
										 (maximize-window window))
								 (set-window-dedicated-p window dedicated-p)
								 (when preserved-p
									 (set-window-parameter window 'window-preserved-size preserved-p))
								 (add-hook 'doom-switch-window-hook #'doom--enlargened-forget-last-wconf-h)))))))))
	)

#+end_src

** Alerts
:PROPERTIES:
:CUSTOM_ID: h:17A9115B-AB79-4445-9F12-EFD086750CDA
:END:
#+begin_src emacs-lisp
(use-package alert
  :if (lc/is-macos?)
  :config
  (setq
   ;; alert-default-style 'notifier
   alert-default-style 'osx-notifier
   )
  ;; (alert "This is an alert" :severity 'high)
  ;; (alert "This is an alert" :title "My Alert" :category 'debug)
  )
#+end_src

** darkroom
:PROPERTIES:
:CUSTOM_ID: h:EC24FC48-E3A5-4C16-9F52-3A6E14DBA564
:END:
#+begin_src emacs-lisp
(use-package darkroom
  :init
  ;; Don't scale the text, so ugly man!
  (setq darkroom-text-scale-increase 1)
  :general
  (lc/leader-keys
    "tf" '(darkroom-tentative-mode :wk "focus")))
#+end_src

** 8 colors theme
:PROPERTIES:
:CUSTOM_ID: h:EA99CF6B-278E-482F-A865-7E31407734CE
:END:
When using ~emacs~ on my jailbroken iPad, I cannot set ~TERM=xterm-256color~ because of some ~terminfo~ error.
I therefore do what I can with the 8 colors I can use.

The default theme ~manoj-dark~ does a pretty good job OOTB.
I add a few manual tweaks.
The theme defintion gets saved in ~custom-theme-directory~.

#+begin_src emacs-lisp :tangle themes/8colors-theme.el
(deftheme 8colors
  "Theme using only 8 colors")

;; (custom-theme-set-variables
;;   '8colors
;;   '(overline-margin 0)
;; )

(custom-theme-set-faces
 '8colors
 '(centaur-tabs-unselected ((t (:foreground "white" :background "black"))) t)
 '(centaur-tabs-unselected-modified ((t (:foreground "white" :background "black"))) t)
 '(tool-bar ((t (:background "black"))) t)
 '(selectrum-current-candidate ((t (:background "blue"))) t)
 '(org-code ((t (:foreground "magenta"))) t)
 '(org-special-keyword ((t (:foreground "magenta"))) t)
 '(mode-line ((t (:background "black"))) t)
 '(doom-modeline-buffer-file ((t (:background "black"))) t)
 '(tab-line ((t (:background "black"))) t)
 '(magit-diff-removed-highlight ((t (:background "red" :foreground "white"))) t)
 '(magit-diff-added-highlight ((t (:background "green" :foreground "white"))) t)
 '(iedit-occurrence ((t (:background "blue" :foreground "white"))) t)
 )

(provide-theme '8colors)
#+end_src

#+begin_src emacs-lisp
(unless (> (display-color-cells) 8)
  (setq custom-theme-directory (concat user-emacs-directory "themes"))
  (custom-set-variables '(custom-enabled-themes '(8colors manoj-dark)))
	)
#+end_src

* Completion framework
:PROPERTIES:
:CUSTOM_ID: h:06E0EA9F-7CF4-4B99-8A4A-2C63A4F8A6B6
:header-args:    :emacs-lisp :tangle ./lisp/init-core.el
:END:
** selectrum
:PROPERTIES:
:CUSTOM_ID: h:7AC334FB-E159-43C3-B4BD-9D8FDC07900C
:END:
#+BEGIN_SRC emacs-lisp
(use-package selectrum
  :demand
  :general
  (selectrum-minibuffer-map "C-j" 'selectrum-next-candidate
                            "C-k" 'selectrum-previous-candidate)
  :config
  (selectrum-mode t)
  )
#+END_SRC

** prescient
:PROPERTIES:
:CUSTOM_ID: h:A05881AE-31E0-498C-B107-0FBD5E1103BF
:END:
#+BEGIN_SRC emacs-lisp
(use-package selectrum-prescient
  :after selectrum
  :demand
  :config
  (prescient-persist-mode t)
  (selectrum-prescient-mode t)
  )
#+END_SRC

** marginalia
:PROPERTIES:
:CUSTOM_ID: h:37ACBBF7-989F-4A57-9454-06B79B8EB4F0
:END:
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :after selectrum
  :init
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  (marginalia-mode))
#+END_SRC

** embark
:PROPERTIES:
:CUSTOM_ID: h:D28488FC-484F-4AD9-8989-736BE88C9AA2
:END:
Taken from https://github.com/oantolin/embark

You can act on candidates with =C-l= and ask to remind bindings with =C-h=
#+BEGIN_SRC emacs-lisp
(use-package embark
  :general
  (general-nmap "C-l" 'embark-act)
  (selectrum-minibuffer-map "C-l" #'embark-act)
  (embark-file-map "o" 'find-file-other-window)	
  :config
  ;; For Selectrum users:
  (defun current-candidate+category ()
    (when selectrum-active-p
      (cons (selectrum--get-meta 'category)
            (selectrum-get-current-candidate))))

  (add-hook 'embark-target-finders #'current-candidate+category)

  (defun current-candidates+category ()
    (when selectrum-active-p
      (cons (selectrum--get-meta 'category)
            (selectrum-get-current-candidates
             ;; Pass relative file names for dired.
             minibuffer-completing-file-name))))

  (add-hook 'embark-candidate-collectors #'current-candidates+category)

  ;; No unnecessary computation delay after injection.
  (add-hook 'embark-setup-hook 'selectrum-set-selected-candidate)
  )
#+END_SRC

** embark-consult
:PROPERTIES:
:CUSTOM_ID: h:002E04ED-FEBA-4058-8570-561963C2450F
:END:
#+begin_src emacs-lisp
(use-package embark-consult
  :straight (embark-consult :type git :host github :repo "oantolin/embark" :files ("embark-consult.el"))
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src

** consult
:PROPERTIES:
:CUSTOM_ID: h:E08EB7E2-CBD9-460C-B77E-9EFF7846C249
:END:
To search for multiple words with ~consult-ripgrep~ you should search e.g. for ~#defun#some words~ .
The first filter is passed to an async ~ripgrep~ process and the second filter to  the completion-style filtering (?).

#+BEGIN_SRC emacs-lisp
(use-package consult
  :straight (consult :host github :repo "minad/consult" :branch "main")
  :commands (consult-ripgrep)
  :general
  (general-nmap
    :states '(normal insert)
    "C-p" 'consult-yank-pop)
  (lc/leader-keys
    "s i" '(consult-isearch :wk "isearch")
    "s o" '(consult-outline :which-key "outline")
    "s s" 'consult-line
    "s p" '(consult-ripgrep :wk "ripgrep project")
    "b b" 'consult-buffer
    ;; TODO consult mark
    "f r" 'consult-recent-file
    "s !" '(consult-flymake :wk "flymake"))
  :init
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)	
  ;; (setq consult-preview-key "C-l")
  ;; (setq consult-narrow-key ">")
  :config
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)
  (with-eval-after-load 'selectrum
    (require 'consult-selectrum))

  )
#+END_SRC

** consult-selectrum
:PROPERTIES:
:CUSTOM_ID: h:37452726-47A2-44E3-818C-01835F9DCBCD
:END:
#+BEGIN_SRC emacs-lisp
(use-package consult-selectrum
  :straight (consult-selectrum :host github :repo "minad/consult" :branch "main")
  :after consult
  :demand)
#+END_SRC

** COMMENT company
:PROPERTIES:
:CUSTOM_ID: h:DF88C7D3-3774-45BD-95DE-CD0BE0F7F043
:END:
*** company-mode
:PROPERTIES:
:CUSTOM_ID: h:0A172DDA-7B18-46EF-87C6-33D12234AEEC
:END:
~company-tng-mode~ (tab-n-go):
- Select candidates with =C-j= / =C-k= or =TAB= / =S-TAB=
- don't press =RET= to confirm

#+BEGIN_SRC emacs-lisp
(use-package company
  ;; :demand
  :hook ((after-init . global-company-mode)
				 ;; (python-mode . (lambda () (setq-local company-backends '((company-capf :with company-files)))))
				 )
  :general
  (company-mode-map
	 :states 'insert
   "TAB" 'company-indent-or-complete-common
	 )
  :init
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay nil)
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-maximum-width 50
        company-tooltip-minimum-width 50)
  (setq company-tooltip-limit 12)
  ;; don't autocomplete when single candidate
  (setq company-auto-complete nil)
  (setq company-auto-complete-chars nil)
  (setq company-dabbrev-code-other-buffers nil)
  (setq company-dabbrev-ignore-case nil)
  (setq company-dabbrev-downcase nil)
  ;; manually configure tng
  ;; (setq company-tng-auto-configure nil)
  ;; (setq company-frontends '(company-tng-frontend
  ;;                           company-pseudo-tooltip-frontend
  ;;                           company-echo-metadata-frontend))
  (setq company-backends '((company-capf company-keywords company-files :with company-yasnippet)))
  ;; :custom-face
  ;; (company-tooltip
  ;;  ((t (:family "Fira Code"))))
  :config
  (global-company-mode)
  (with-eval-after-load 'evil
    (add-hook 'company-mode-hook #'evil-normalize-keymaps))
  ;; needed in case we only have one candidate
  (define-key company-active-map (kbd "C-j") 'company-select-next)
  ;; (define-key company-mode-map [remap indent-for-tab-command] #'company-indent-or-complete-common)
  )
#+END_SRC

*** company prescient
:PROPERTIES:
:CUSTOM_ID: h:DBC4211D-4E14-4A05-9925-2B1221CD7694
:END:
#+BEGIN_SRC emacs-lisp
(use-package company-prescient
  :after company
  :demand
  :config
  (company-prescient-mode t))
#+END_SRC

*** COMMENT company box
:PROPERTIES:
:CUSTOM_ID: h:179D6081-F535-4869-BBF1-E92D005C5EBE
:END:
Taken from DOOM
#+begin_src emacs-lisp
(use-package company-box
  :if (display-graphic-p)
  :hook (company-mode . company-box-mode)
  :config
  (with-no-warnings
    ;; Prettify icons
    (defun my-company-box-icons--elisp (candidate)
      (when (derived-mode-p 'emacs-lisp-mode)
        (let ((sym (intern candidate)))
          (cond ((fboundp sym) 'Function)
                ((featurep sym) 'Module)
                ((facep sym) 'Color)
                ((boundp sym) 'Variable)
                ((symbolp sym) 'Text)
                (t . nil)))))
    (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp))
  
  (declare-function all-the-icons-faicon 'all-the-icons)
  (declare-function all-the-icons-material 'all-the-icons)
  (declare-function all-the-icons-octicon 'all-the-icons)

  (setq company-box-icons-all-the-icons
        `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
          (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.02))
          (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
          (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
          (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
          (Field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
          (Variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
          (Class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
          (Interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
          (Module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
          (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
          (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
          (Value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
          (Enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
          (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
          (Snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
          (Color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
          (File . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.02))
          (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
          (Folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
          (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
          (Constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
          (Struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
          (Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
          (Operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
          (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
          (Template . ,(all-the-icons-material "format_align_left" :height 0.8 :v-adjust -0.15)))
        company-box-icons-alist 'company-box-icons-all-the-icons)

  (setq company-box-show-single-candidate t
        company-box-backends-colors nil
        company-box-max-candidates 10)
  ;; Disable tab-bar in company-box child frames
  (add-to-list 'company-box-frame-parameters '(tab-bar-lines . 0))
  )
#+end_src

*** COMMENT company posframe
:PROPERTIES:
:CUSTOM_ID: h:3A912EC4-EC8E-4410-8EE3-2F00311A614B
:END:
#+begin_src emacs-lisp
(use-package company-posframe
  :hook (company-mode . company-posframe-mode)
  )
#+end_src

** COMMENT corfu
:PROPERTIES:
:CUSTOM_ID: h:A2B7EF59-9D10-4C12-98D1-9F569EF9BE38
:END:
#+begin_src emacs-lisp
;; Configure corfu
(use-package corfu
  :straight (corfu :type git :host github :repo "minad/corfu")
  :hook (after-init . corfu-global-mode)
  :general
  (corfu-map
   :states 'insert
   "C-g" 'corfu-abort
   "C-j" 'corfu-next
   "C-k" 'corfu-previous
   )
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (org-mode . corfu-mode))
  ;; :config
  ;; (add-to-list 'corfu--frame-parameters '(tab-bar-lines . 0))
  ;; (defun lc/disable-tabs (orig-fn &rest args)
  ;;   (progn (centaur-tabs-local-mode) (apply orig-fn args)))
  ;; (defun lc/reenable-tabs (orig-fn &rest args)
  ;;   (progn (centaur-tabs-local-mode -1) (apply orig-fn args)))
  ;; (advice-add 'corfu--popup-show :around #'lc/disable-tabs)
  ;; (advice-add 'corfu--popup-hide :around #'lc/reenable-tabs)
  ;; Optionally enable cycling for `corfu-next' and `corfu-previous'.
  ;; (setq corfu-cycle t)
  )

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Enable indentation+completion using the TAB key.
  ;; Completion is often bound to M-TAB.
  (setq tab-always-indent 'complete))

(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand)))
#+end_src

** vertico
:PROPERTIES:
:CUSTOM_ID: h:CAEABB84-0DAE-41CB-B08B-A77B956B991E
:END:
#+begin_src emacs-lisp
(use-package vertico
	:straight (vertico :type git :host github :repo "minad/vertico")
	:demand
  ;; :bind (:map vertico-map
  ;;        ("C-j" . vertico-next)
  ;;        ("C-k" . vertico-previous)
  ;;        ("<escape>" . vertico-exit))
  ;; :init
  ;; (vertico-mode)
	)

;; TODO: replace prescient with this?
;; (use-package savehist
;;   :init
;;   (savehist-mode))

;; TODO: use this when selectrum has been replaced
;; (use-package marginalia
;;   :after vertico
;;   :custom
;;   (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
;;   :init
;;   (marginalia-mode))
#+end_src

* Core packages
:PROPERTIES:
:CUSTOM_ID: h:EB91F91E-8984-4806-8254-B0487044D30C
:header-args:    :emacs-lisp :tangle ./lisp/init-core.el
:END:
** project
:PROPERTIES:
:CUSTOM_ID: h:0F53A833-88C3-4AEC-A469-E15AD657BEB0
:END:
*** projectile
:PROPERTIES:
:CUSTOM_ID: h:788EC6E4-44DD-4E93-A1FC-517CA9213396
:END:
~projectile~ struggles with monorepos where ~.git~ folder is at the root but each subproject has e.g a ~pyproject.toml~.
In those cases, we need to create a ~.projectile~ file in the root of the subprojects.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand
  :general
  (lc/leader-keys
		:states 'normal
    "p" '(:keymap projectile-command-map :which-key "project")
    "p <escape>" 'keyboard-escape-quit
    "p a" '(projectile-add-known-project :wk "add known")
    "p t" '(projectile-run-vterm :wk "term"))
  :init
  (when (file-directory-p "~/git")
    (setq projectile-project-search-path '("~/git")))
  (setq projectile-completion-system 'default)
  (setq projectile-project-root-files '(".envrc" ".projectile" "project.clj" "deps.edn"))
	(setq projectile-switch-project-action 'projectile-commander)
	;; Do not include straight repos (emacs packages) to project list
	(setq projectile-ignored-project-function
   (lambda (project-root)
     (string-prefix-p (expand-file-name "straight/" user-emacs-directory) project-root)))
  :config
  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))
  (projectile-mode)
	;; projectile commander methods
	(setq projectile-commander-methods nil)
	(def-projectile-commander-method ?? "Commander help buffer."
		(ignore-errors (kill-buffer projectile-commander-help-buffer))
		(with-current-buffer (get-buffer-create projectile-commander-help-buffer)
			(insert "Projectile Commander Methods:\n\n")
			(dolist (met projectile-commander-methods)
				(insert (format "%c:\t%s\n" (car met) (cadr met))))
			(goto-char (point-min))
      (help-mode)
      (display-buffer (current-buffer) t))
    (projectile-commander))
	(def-projectile-commander-method ?t
    "Open a *shell* buffer for the project."
    (projectile-run-vterm))
	(def-projectile-commander-method ?\C-? ;; backspace
		"Go back to project selection."
		(projectile-switch-project))
	(def-projectile-commander-method ?d
    "Open project root in dired."
    (projectile-dired))
	(def-projectile-commander-method ?f
    "Find file in project."
    (projectile-find-file))
	(def-projectile-commander-method ?s
    "Ripgrep in project."
    (consult-ripgrep))
	(def-projectile-commander-method ?g
    "Git status in project."
    (projectile-vc))
  )
#+END_SRC
 
*** perspective
:PROPERTIES:
:CUSTOM_ID: h:6E4E5BD6-1930-4DCE-8E26-5ADAC2B9A152
:END:
TODO:
- =SPC TAB o= opens the "org" persp
- same for main (maybe get ride of new tab)
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :commands (persp-new persp-switch persp-state-save)
  :general
  (lc/leader-keys
    "TAB" '(:ignore true :wk "tab")
    "TAB TAB" 'persp-switch
    "TAB `" 'persp-switch-last
    "TAB d" 'persp-kill
    "TAB x" '((lambda () (interactive) (persp-kill (persp-current-name))) :wk "kill current")
    "TAB X" '((lambda () (interactive) (persp-kill (persp-names))) :wk "kill all")
    "TAB m" '(lc/main-tab :wk "main"))
  :init
	(setq persp-state-default-file (expand-file-name ".persp" user-emacs-directory))
  (defun lc/main-tab ()
    "Jump to the dashboard buffer, if doesn't exists create one."
    (interactive)
    (persp-switch "main")
    (switch-to-buffer dashboard-buffer-name)
    (dashboard-mode)
    (dashboard-insert-startupify-lists)
    (dashboard-refresh-buffer))
  :config
  (persp-mode)
	(add-hook 'kill-emacs-hook #'persp-state-save))
#+END_SRC

*** persp-projectile
:PROPERTIES:
:CUSTOM_ID: h:85ED0544-8351-4B05-843D-8BB9F3454041
:END:
#+BEGIN_SRC emacs-lisp
(use-package persp-projectile
  :after projectile
  :general
  (lc/leader-keys
    "p p" 'projectile-persp-switch-project
    ;; "TAB o"	'((lambda () (interactive)
    ;;               (let ((projectile-switch-project-action #'projectile-find-file))
    ;;                 (projectile-persp-switch-project "org")))
    ;;             :wk "org")
    )
  )
#+END_SRC

** git
:PROPERTIES:
:CUSTOM_ID: h:0D3218A4-4F45-4C20-9320-087750D5A961
:END:
*** magit
:PROPERTIES:
:CUSTOM_ID: h:61B8B839-46CA-4AE6-AD57-A6D291E7C225
:END:
50/72 rule for commit messages: https://www.midori-global.com/blog/2018/04/02/git-50-72-rule

~magit-cycle-margin-style~ to show more precise commit timestamps

#+BEGIN_SRC emacs-lisp
(use-package magit
  :general
  (lc/leader-keys
    "g b" 'magit-blame
    "g g" 'magit-status
    "g G" 'magit-status-here
    "g l" 'magit-log)
  (general-nmap
    :keymaps '(magit-status-mode-map
               magit-stash-mode-map
               magit-revision-mode-map
               magit-process-mode-map
               magit-diff-mode-map)
    "TAB" #'magit-section-toggle
    "<escape>" #'transient-quit-one)
  :init
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  (setq magit-log-arguments '("--graph" "--decorate" "--color"))
  (setq git-commit-fill-column 72)
	;; (setq magit-log-margin (t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
  :config
  (evil-define-key* '(normal visual) magit-mode-map
    "zz" #'evil-scroll-line-to-center)
  )
#+END_SRC

*** TODO forge
:PROPERTIES:
:CUSTOM_ID: h:6776E02F-A2E6-4BBA-91A1-81EEE4CFB3AB
:END:
#+BEGIN_SRC emacs-lisp :tangle no
;; NOTE: Make sure to configure a GitHub token before using this package!
;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
(use-package forge :after magit)
#+END_SRC

*** git-timemachine
:PROPERTIES:
:CUSTOM_ID: h:5CA4BCDE-A8D6-472F-9FA1-FA5514CC9388
:END:
#+begin_src emacs-lisp
  (use-package git-timemachine
    :hook (git-time-machine-mode . evil-normalize-keymaps)
    :init (setq git-timemachine-show-minibuffer-details t)
    :general
    (general-nmap "SPC g t" 'git-timemachine-toggle)
    (git-timemachine-mode-map
     "C-k" 'git-timemachine-show-previous-revision
     "C-j" 'git-timemachine-show-next-revision
     "q" 'git-timemachine-quit))
#+end_src

*** diff-hl
:PROPERTIES:
:CUSTOM_ID: h:DA2BAD8C-A37A-4A89-BEE0-A7FB367CD345
:END:
When an heading includes a change, the~org-ellipsis~ not shown correctly.
This is caused by an empty line with ~diff-hl~ fringe that gets appended to the heading.
To work around this and show the ellipsis, you have to add a whitespace in that empty line.

#+begin_src emacs-lisp
(use-package diff-hl
  :demand
	:general
	(lc/leader-keys
    "g n" '(diff-hl-next-hunk :wk "next hunk")
    "g p" '(diff-hl-previous-hunk :wk "prev hunk"))
  :hook
  ((magit-pre-refresh . diff-hl-magit-pre-refresh)
   (magit-post-refresh . diff-hl-magit-post-refresh))
  :init
  (setq diff-hl-draw-borders nil)
	;; (setq diff-hl-global-modes '(not org-mode))
  ;; (setq diff-hl-fringe-bmp-function 'diff-hl-fringe-bmp-from-type)
  ;; (setq diff-hl-global-modes (not '(image-mode org-mode)))
  :config
  (global-diff-hl-mode)
  )
#+end_src

*** hydra-smerge
:PROPERTIES:
:CUSTOM_ID: h:DADD41F3-F805-4E89-9EDB-B21350A81A19
:END:
#+begin_src emacs-lisp
(use-package smerge-mode
  :straight (:type built-in)
  :after hydra
  :general
  (lc/leader-keys "g m" 'smerge-hydra/body)
  :hook
  (magit-diff-visit-file . (lambda ()
                             (when smerge-mode
                               (smerge-hydra/body))))
  :init
  (defhydra smerge-hydra (:hint nil
                                :pre (smerge-mode 1)
                                ;; Disable `smerge-mode' when quitting hydra if
                                ;; no merge conflicts remain.
                                :post (smerge-auto-leave))
    "
                                                    ╭────────┐
  Movement   Keep           Diff              Other │ smerge │
  ╭─────────────────────────────────────────────────┴────────╯
     ^_g_^       [_b_] base       [_<_] upper/base    [_C_] Combine
     ^_C-k_^     [_u_] upper      [_=_] upper/lower   [_r_] resolve
     ^_k_ ↑^     [_l_] lower      [_>_] base/lower    [_R_] remove
     ^_j_ ↓^     [_a_] all        [_H_] hightlight
     ^_C-j_^     [_RET_] current  [_E_] ediff             ╭──────────
     ^_G_^                                            │ [_q_] quit"
    ("g" (progn (goto-char (point-min)) (smerge-next)))
    ("G" (progn (goto-char (point-max)) (smerge-prev)))
    ("C-j" smerge-next)
    ("C-k" smerge-prev)
    ("j" next-line)
    ("k" previous-line)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("H" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("R" smerge-kill-current)
    ("q" nil :color blue)))
#+end_src

*** emacs git
:PROPERTIES:
:CUSTOM_ID: h:F23D595C-875E-449C-85C5-7E4F1BF24F30
:END:
This is a dependency for [[#h:78D6F7DF-905E-4016-BF91-4E9E38580633][Hack to get org-version to work]] 
#+begin_src emacs-lisp
(use-package git)
#+end_src

** hydra
:PROPERTIES:
:CUSTOM_ID: h:6C6EA9DD-42EE-49CD-A7FC-5BE9FAB42F7F
:END:
#+begin_src emacs-lisp
(use-package hydra
  :demand)
#+end_src

** rainbow parenthesis
:PROPERTIES:
:CUSTOM_ID: h:D5084868-D46D-4AC7-ACE4-A7EDB10703EE
:END:
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode))
		)
#+END_SRC

** emacs tree-sitter
:PROPERTIES:
:CUSTOM_ID: h:1FD9CDF3-4C5D-450E-99DE-034077C3D8BC
:END:
#+BEGIN_SRC emacs-lisp
(use-package tree-sitter
  :straight (tree-sitter :host github :repo "ubolonton/emacs-tree-sitter" :depth full)
  :hook (python-mode . (lambda ()
                         (require 'tree-sitter)
                         (require 'tree-sitter-langs)
                         (require 'tree-sitter-hl)
                         (tree-sitter-hl-mode)
                         )))

(use-package tree-sitter-langs
  :straight (tree-sitter-langs :host github :repo "ubolonton/emacs-tree-sitter" :depth full))

(use-package tsc
  :straight (tsc :host github :repo "ubolonton/emacs-tree-sitter" :depth full))
#+END_SRC

** envrc
:PROPERTIES:
:CUSTOM_ID: h:65206410-8DD7-499E-AA70-6D9C781C0E0D
:END:
Running ~direnv~ is expensive so I only do it when it is necessary. I need it in two situations:
- ~python-mode~
- ~ob-jupyter~

Instead of simply enabling ~envrc-mode~ in every org buffer, I check with the buffer includes a ~jupyter-python~ block.
In the [[*ob-jupyter][ob-jupyter]] section I then load ~ob-jupyter~ only when ~envrc-mode~ is loaded and ~jupyter~ is found on the ~PATH~

#+begin_src emacs-lisp
(use-package inheritenv
  :straight (inheritenv :type git :host github :repo "purcell/inheritenv"))
#+end_src

#+begin_src emacs-lisp
(use-package envrc
  :straight (envrc :type git :host github :repo "purcell/envrc")
  :commands (envrc-mode)
  :hook ((python-mode . envrc-mode)
         (org-jupyter-mode . envrc-mode))
  )
#+end_src

** yasnippet
:PROPERTIES:
:CUSTOM_ID: h:8E2A5EAF-B690-457E-86E7-9070B51297A7
:END:
We use =C-TAB= to expand snippets instead of =TAB= .

You can have ~#condition: 'auto~ for the snippet to auto-expand.

See [[http://joaotavora.github.io/yasnippet/snippet-organization.html#org7468fa9][here]] to share snippets across modes

#+begin_src emacs-lisp
(use-package yasnippet
  :general
  (yas-minor-mode-map
   :states 'insert
   "TAB" 'nil
   "C-TAB" 'yas-expand)
  :hook
  ((prog-mode org-mode dap-ui-repl-mode vterm-mode) . yas-minor-mode)
  :init
  ;; (setq yas-prompt-functions '(yas-ido-prompt))
  (defun lc/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))
  :config
  (yas-reload-all)
  (add-hook 'post-command-hook #'lc/yas-try-expanding-auto-snippets)
  )
#+end_src

** undo fu
:PROPERTIES:
:CUSTOM_ID: h:FEB4E3B3-47E7-4AAE-ADD7-524A57387301
:END:
#+begin_src emacs-lisp
(use-package undo-fu
  :demand
  :general
  (:states 'normal
           "u" 'undo-fu-only-undo
           "s-z" 'undo-fu-only-undo
           "\C-r" 'undo-fu-only-redo))
#+end_src

** vterm
:PROPERTIES:
:CUSTOM_ID: h:55C74553-9DAF-49E6-955A-C772FD7B4402
:END:
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :config
  (setq vterm-shell (executable-find "fish")
        vterm-max-scrollback 10000))
#+END_SRC

** vterm toggle
:PROPERTIES:
:CUSTOM_ID: h:1162BDDB-9DC6-4750-8EF8-9C5D2AF51892
:END:
#+begin_src emacs-lisp
(use-package vterm-toggle
  :general
  (lc/leader-keys
    "'" 'vterm-toggle))
#+end_src

** dired and friends
:PROPERTIES:
:CUSTOM_ID: h:BA5D7535-070B-494B-A27C-6B9FFC3CC88E
:END:

- Jump to current file with =SPC f j=
- With a ~dired~ buffer open, use ~dired-other-window~ to open another folder where you want to move/copy files from/to
- Hide details with ~(~                               )
- Show/hide dotfiles with =H=
- Mark with ~m~, unmark with ~u~
- Invert selection with ~t~
- ~*~ has some helpers for marking
- First mark some files and then ~K~ to "hide" them
- Open directory in right window with ~S-RET~
  + When copying from left window, target will be right window
  + Copy with ~C~
- Open subdir in buffer below with ~I~
- Open files with macos with =O=
- View files with =go= and exit with ~q~
*** dired
:PROPERTIES:
:CUSTOM_ID: h:D6BC5C09-6F03-4D08-9237-F955D6B2F39D
:END:
#+BEGIN_SRC emacs-lisp
(use-package dired
  :straight (:type built-in)
  :hook
  (dired-mode . dired-hide-details-mode)
  :general
  (lc/leader-keys
    "f d" 'dired
    "f j" 'dired-jump)
  (general-nmap
    :keymaps 'dired-mode-map
    :states 'normal
    "F" '((lambda () (interactive)
            (let ((fn (dired-get-file-for-visit)))
              (start-process "open-directory" nil "open" "-R" fn)))
          :wk "open finder")
    "X" '((lambda () (interactive)
            (let ((fn (dired-get-file-for-visit)))
              (start-process "open-external" nil "open" fn)))
          :wk "open external"))
  :init
  (setq dired-omit-files "^\\.[^.]\\|$Rhistory\\|$RData\\|__pycache__")
  (setq dired-listing-switches "-lah")
  (setq dired-dwim-target t)
  (defun my/dired-open-externally ()
    "Open marked dired file/folder(s) (or file/folder(s) at point if no marks)
  with external application"
    (interactive)
    (let ((files (dired-get-marked-files)))
      (dired-run-shell-command
       (dired-shell-stuff-it "xdg-open" files t))))
  )

(use-package dired-single
  :after dired
  :general
  (dired-mode-map
   :states 'normal
   "h" 'dired-single-up-directory
   "l" 'dired-single-buffer
   "q" 'kill-current-buffer))

(use-package all-the-icons-dired
  :if (display-graphic-p)
  :hook (dired-mode . (lambda () (interactive)
                        (unless (file-remote-p default-directory)
                          (all-the-icons-dired-mode)))))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))
#+END_SRC

*** dired subtree
:PROPERTIES:
:CUSTOM_ID: h:230AF0C3-8214-46BB-AB84-C81C047DC8C8
:END:
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :general
  (dired-mode-map
   :states 'normal
   "i" 'dired-subtree-toggle)
  :config
  (advice-add 'dired-subtree-toggle
              :after (lambda () (interactive)
                       (when all-the-icons-dired-mode
                         (revert-buffer)))))
#+END_SRC

*** COMMENT dired rsync
:PROPERTIES:
:CUSTOM_ID: h:629AEC4E-F112-457A-BAF9-6B5786DEC8EF
:END:
#+begin_src emacs-lisp
(use-package dired-rsync
  :general
  (lc/local-leader-keys
    :keymaps 'dired-mode-map
    :states 'normal
    "r" 'dired-rsync))
#+end_src

** restart-emacs
:PROPERTIES:
:CUSTOM_ID: h:4C37CFFC-D045-47B4-BFDC-801977247199
:END:
#+begin_src emacs-lisp
  (use-package restart-emacs
    :general
    (lc/leader-keys
      "R" '(restart-emacs :wk "restart"))
    )
#+end_src

** toml mode
:PROPERTIES:
:CUSTOM_ID: h:4474E2AE-F934-48CD-ACB8-5729B7C26F0A
:END:
#+begin_src emacs-lisp
(use-package toml-mode
	:mode "\\.toml\\'")
#+end_src

** tramp
:PROPERTIES:
:CUSTOM_ID: h:48EFC0F4-8C5C-47CF-A464-420A618A01C2
:END:
Call e.g. ~dired~ and input ~/ssh:user@hostname:/path/to/file~

#+begin_src emacs-lisp
(use-package tramp
  :straight (:type built-in)
  :init
  ;; Disable version control on tramp buffers to avoid freezes.
  (setq vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp))
  (setq tramp-default-method "ssh")
  (setq tramp-auto-save-directory
        (expand-file-name "tramp-auto-save" user-emacs-directory))
  (setq tramp-persistency-file-name
        (expand-file-name "tramp-connection-history" user-emacs-directory))
  (setq password-cache-expiry nil)
  (setq tramp-use-ssh-controlmaster-options nil)
  :config
  (customize-set-variable 'tramp-ssh-controlmaster-options
                          (concat
                           "-o ControlPath=/tmp/ssh-tramp-%%r@%%h:%%p "
                           "-o ControlMaster=auto -o ControlPersist=yes"))
  (with-eval-after-load 'lsp-mode
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-tramp-connection "pyright")
                      :major-modes '(python-mode)
                      :remote? t
                      :server-id 'pyright-remote))
    )
  )

(use-package docker-tramp)
#+end_src
 
** yaml mode
:PROPERTIES:
:CUSTOM_ID: h:351ADC7D-38F2-47FF-9D9B-1C3F2F7B61D3
:END:
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode ((rx ".yml" eos) . yaml-mode))
#+end_src

** COMMENT kubernetes
:PROPERTIES:
:CUSTOM_ID: h:3645D06E-69FC-4B56-AEAF-A5967E66FD85
:END:
#+begin_src emacs-lisp
(use-package kubernetes
  :hook
  (kubernetes-overview-mode . lc/load-kubernetes-evil)
  :general
  (lc/leader-keys
    "k k" 'kubernetes-overview)
  :init
  ;; refresh manually with gr
  (setq kubernetes-poll-frequency 3600)
  (setq kubernetes-redraw-frequency 3600)
  (defun lc/load-kubernetes-evil ()
    "Copied from kubernetes-evil.el"
    (evil-set-initial-state 'kubernetes-mode 'motion)
    (evil-set-initial-state 'kubernetes-display-thing-mode 'motion)
    (evil-set-initial-state 'kubernetes-log-line-mode 'motion)
    (evil-set-initial-state 'kubernetes-logs-mode 'motion)
    (evil-set-initial-state 'kubernetes-overview-mode 'motion)

    (evil-define-key 'motion kubernetes-mode-map
      (kbd "p")   #'magit-section-backward
      (kbd "n")   #'magit-section-forward
      (kbd "M-p") #'magit-section-backward-sibling
      (kbd "M-n") #'magit-section-forward-sibling
      (kbd "C-i") #'magit-section-toggle
      (kbd "^")   #'magit-section-up
      [tab]       #'magit-section-toggle
      [C-tab]     #'magit-section-cycle
      [M-tab]     #'magit-section-cycle-diffs
      [S-tab]     #'magit-section-cycle-global

      [remap evil-next-line] #'next-line
      [remap evil-previous-line] #'previous-line
      [remap evil-next-visual-line] #'next-line
      [remap evil-previous-visual-line] #'previous-line

      (kbd "q") #'quit-window
      (kbd "RET") #'kubernetes-navigate
      (kbd "M-w") #'kubernetes-copy-thing-at-point

      (kbd "?") #'kubernetes-overview-popup
      (kbd "c") #'kubernetes-config-popup
      (kbd "g r") #'kubernetes-refresh
      (kbd "h") #'describe-mode
      (kbd "d") #'kubernetes-describe-popup
      (kbd "D") #'kubernetes-mark-for-delete
      (kbd "e") #'kubernetes-exec-popup
      (kbd "u") #'kubernetes-unmark
      (kbd "U") #'kubernetes-unmark-all
      (kbd "x") #'kubernetes-execute-marks
      (kbd "l") #'kubernetes-logs-popup
      (kbd "L") #'kubernetes-labels-popup)

    (evil-define-key 'motion kubernetes-overview-mode-map
      (kbd "v") #'kubernetes-overview-set-sections)

    (evil-define-key 'motion kubernetes-logs-mode-map
      (kbd "n") #'kubernetes-logs-forward-line
      (kbd "p") #'kubernetes-logs-previous-line
      (kbd "RET") #'kubernetes-logs-inspect-line)

    (evil-define-key 'motion kubernetes-log-line-mode-map
      (kbd "n") #'kubernetes-logs-forward-line
      (kbd "p") #'kubernetes-logs-previous-line))
  )
#+end_src

** COMMENT loccurr
:PROPERTIES:
:CUSTOM_ID: h:3FC3E32D-BE2D-421C-B599-94E802009AB0
:END:
#+begin_src emacs-lisp
(use-package loccur
  :commands (loccur-isearch)
  )
#+end_src

** COMMENT isearch-mb
:PROPERTIES:
:CUSTOM_ID: h:58E5AE2F-4E1C-4B72-9B63-B96AEF55F4DA
:END:
You can use ~consult-history~ to browse past searches

#+begin_src emacs-lisp
(use-package isearch-mb
  :straight (isearch-mb :type git :host github :repo "astoff/isearch-mb")
  :demand
  :init
  (setq-default
   ;; Match count next to minibuffer prompt
   isearch-lazy-count t
   ;; Don't be stingy with history; default is to keep just 16 entries
   search-ring-max 200
   regexp-search-ring-max 200
   ;; fuzzy match with space
   isearch-regexp-lax-whitespace t
   search-whitespace-regexp ".*?"
   )
  :config
  (add-to-list 'isearch-mb--with-buffer #'loccur-isearch)
  (define-key isearch-mb-minibuffer-map (kbd "C-o") #'loccur-isearch)
  )
#+end_src

* Programming languages
:PROPERTIES:
:CUSTOM_ID: h:844F8FAD-8F11-4727-BAC4-25B449C56B51
:header-args:    :emacs-lisp :tangle ./lisp/init-extra.el
:END:
** lsp mode
:PROPERTIES:
:CUSTOM_ID: h:28CB5546-FBE4-481D-B620-623006DC0FDA
:END:
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands
  (lsp lsp-deferred)
  :hook
  ((lsp-mode . (lambda () (setq-local evil-lookup-func #'lsp-describe-thing-at-point)))
   (lsp-mode . lsp-enable-which-key-integration))
  :general
  (lc/local-leader-keys
    :states 'normal
    :keymaps 'lsp-mode-map
    "i" '(:ignore t :which-key "import")
    "i o" '(lsp-organize-imports :wk "optimize")
    "l" '(:keymap lsp-command-map :wk "lsp")
    "r" '(lsp-rename :wk "rename"))
  (lsp-mode-map
   :states 'normal
   "gD" 'lsp-find-references)
  :init
  (setq lsp-restart 'ignore)
  (setq lsp-eldoc-enable-hover nil)
  (setq lsp-enable-file-watchers nil)
  (setq lsp-signature-auto-activate nil)
  (setq lsp-modeline-diagnostics-enable nil)
  (setq lsp-keep-workspace-alive nil)
  (setq lsp-auto-execute-action nil)
  (setq lsp-before-save-edits nil)
  (setq lsp-diagnostics-provider :flymake)
  )
#+END_SRC

** lsp-ui
:PROPERTIES:
:CUSTOM_ID: h:B69B077F-B96E-4A86-859D-A3D29547D39C
:END:
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :hook
  ((lsp-mode . lsp-ui-mode)
   ;; (lsp-mode . (lambda () (setq-local evil-goto-definition-functions '(lambda (&rest args) (lsp-ui-peek-find-definitions)))))
   )
  ;; :bind
  ;; (:map lsp-ui-mode-map
  ;;       ([remap lsp-find-references] . lsp-ui-peek-find-references))
  :general
  (lc/local-leader-keys
    "h" 'lsp-ui-doc-show
    "H" 'lsp-ui-doc-hide)
  (lsp-ui-peek-mode-map
   :states 'normal
   "C-j" 'lsp-ui-peek--select-next
   "C-k" 'lsp-ui-peek--select-prev)
  (outline-mode-map
   :states 'normal
   "C-j" 'nil
   "C-k" 'nil)
  :init
  (setq lsp-ui-doc-show-with-cursor nil)
  (setq lsp-ui-doc-show-with-mouse nil)
  (setq lsp-ui-peek-always-show t)
  (setq lsp-ui-peek-fontify 'always)
  )
#+END_SRC

** dap-mode
:PROPERTIES:
:CUSTOM_ID: h:85405E87-7858-4F5C-A229-B72E70F68597
:END:
#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :hook
  ((dap-terminated . lc/hide-debug-windows)
	 (dap-ui-repl-mode . (lambda () (setq-local truncate-lines t))))
  :general
  (lc/local-leader-keys
    :keymaps 'python-mode-map
    "d d" '(dap-debug :wk "debug")
    "d b" '(dap-breakpoint-toggle :wk "breakpoint")
    "d c" '(dap-continue :wk "continue")
    "d n" '(dap-next :wk "next")
    "d e" '(dap-eval-thing-at-point :wk "eval")
    "d i" '(dap-step-in :wk "step in")
    "d q" '(dap-disconnect :wk "quit")
    "d r" '(dap-ui-repl :wk "repl")
    "d h" '(dap-hydra :wk "hydra"))
  :init
  ;; (setq dap-auto-configure-features '(locals repl))
  (setq dap-auto-configure-features '(repl))
  (setq dap-python-debugger 'debugpy)
  ;; show stdout
  (setq dap-auto-show-output t)
  (setq dap-output-window-max-height 20)
  (setq dap-output-window-min-height 10)
  (setq dap-overlays-use-overlays nil)
  ;; hide stdout window  when done
  (defun lc/hide-debug-windows (session)
    "Hide debug windows when all debug sessions are dead."
    (unless (-filter 'dap--session-running (dap--get-sessions))
      (kill-buffer (dap--debug-session-output-buffer (dap--cur-session-or-die)))))
  (defun lc/dap-python--executable-find (orig-fun &rest args)
    (executable-find "python"))
  :config
  ;; configure windows
  (require 'dap-ui)
  (setq dap-ui-buffer-configurations
        `(;; (,dap-ui--locals-buffer . ((side . right) (slot . 1) (window-width . 0.50)))
          ;; (,dap-ui--breakpoints-buffer . ((side . left) (slot . 1) (window-width . ,treemacs-width)))
          ;; (,dap-ui--sessions-buffer . ((side . left) (slot . 2) (window-width . ,treemacs-width)))
          (,dap-ui--repl-buffer . ((side . right) (slot . 2) (window-width . 0.50)))))
  (dap-ui-mode 1)
  ;; python virtualenv
  (require 'dap-python)
  (advice-add 'dap-python--pyenv-executable-find :around #'lc/dap-python--executable-find)
  ;; debug templates
  (defvar dap-script-args (list :type "python"
                                :args []
                                :cwd "${workspaceFolder}"
                                :justMyCode :json-false
                                :request "launch"
                                :debugger 'debugpy
                                :name "dap-debug-script"))
  (defvar dap-test-args (list :type "python-test-at-point"
                              :args ""
                              :justMyCode :json-false
                              ;; :cwd "${workspaceFolder}"
                              :request "launch"
                              :module "pytest"
                              :debugger 'debugpy
                              :name "dap-debug-test-at-point"))
  (defvar empties-forecast (list
                            :name "empties forecast"
                            :type "python"
                            :request "launch"
                            :program "./src/empties/forecasting/predict.py"
                            :env '(("NO_JSON_LOG" . "true"))
                            :args ["--source01" "./data/empties-history-sample.parquet"
                                   "--source02" "./data/model_selection.files"
                                   "--source03" "./data/booking-feature-sample.parquet"
                                   "--source04" "./data/holiday-2019-05-24-1558683595"
                                   "--output-data" "./data/predictions.parquet"
                                   "--output-metrics" "./data/metrics.json"]
                            ))
  (dap-register-debug-template "dap-debug-script" dap-script-args)
  (dap-register-debug-template "dap-debug-test-at-point" dap-test-args)
  ;; bind the templates
  (lc/local-leader-keys
    :keymaps 'python-mode-map
    "d t" '((lambda () (interactive) (dap-debug dap-test-args)) :wk "test")
    "d s" '((lambda () (interactive) (dap-debug dap-script-args)) :wk "script")
    )
  )
#+END_SRC

** Python
:PROPERTIES:
:CUSTOM_ID: h:541B5295-9C9C-4138-8A42-EA8DC9D4FD87
:END:
*** python mode
:PROPERTIES:
:CUSTOM_ID: h:95658AC9-ADFE-4134-81C4-DEC01069B716
:END:
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :hook ((envrc-mode . (lambda ()
                         (when (executable-find "ipython")
                           (setq python-shell-interpreter (executable-find "ipython"))))))
  :general
  (python-mode-map
   :states 'normal
   "gz" nil
   "C-j" nil)
  (python-mode-map
   :states 'insert
   "TAB" 'lc/py-indent-or-complete
   )
  :init
  (setq python-indent-offset 0)
  (defun lc/py-indent-or-complete ()
    (interactive "*")
    (window-configuration-to-register py--windows-config-register)
    (cond ((use-region-p)
           (py-indent-region (region-beginning) (region-end)))
          ((or (bolp)   
               (member (char-before) (list 9 10 12 13 32 ?:  ;; ([{
																					 ?\) ?\] ?\}))
               ;; (not (looking-at "[ \t]*$"))
							 )
           (py-indent-line))
          ((comint-check-proc (current-buffer))
           (ignore-errors (completion-at-point)))
          (t
           (completion-at-point))))
  :config
  (setq python-shell-interpreter (executable-find "ipython")     ;; FIXME
        python-shell-interpreter-args "-i --simple-prompt --no-color-info"
        python-shell-prompt-regexp "In \\[[0-9]+\\]: "
        python-shell-prompt-block-regexp "\\.\\.\\.\\.: "
        python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
        python-shell-completion-setup-code
        "from IPython.core.completerlib import module_completion"
        python-shell-completion-string-code
        "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))
#+END_SRC

*** lsp-pyright
:PROPERTIES:
:CUSTOM_ID: h:373160D0-6591-4D96-9928-33EE610CEACE
:END:
Here the configuration options: https://github.com/emacs-lsp/lsp-pyright#configuration
#+BEGIN_SRC emacs-lisp
(use-package lsp-pyright
  :init
  (setq lsp-pyright-typechecking-mode "basic") ;; too much noise in "real" projects
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp-deferred))))
#+END_SRC

*** pytest
:PROPERTIES:
:CUSTOM_ID: h:8C50BED5-6727-41D9-83BE-E5ADB96D7C88
:END:
#+begin_src emacs-lisp
(use-package python-pytest
  :general
  (lc/local-leader-keys
    :keymaps 'python-mode-map
		"t" '(:ignore t :wk "test")
    "t d" '(python-pytest-dispatch :wk "dispatch")
    "t f" '(python-pytest-file :wk "file")
    "t t" '(python-pytest-function :wk "function"))
  :init
  (setq python-pytest-arguments '("--color" "--failed-first"))
  (defun lc/pytest-use-venv (orig-fun &rest args)
    (if-let ((python-pytest-executable (executable-find "pytest")))
        (apply orig-fun args)
      (apply orig-fun args)))
  :config
  (advice-add 'python-pytest--run :around #'lc/pytest-use-venv)
  )
#+end_src

*** flymake 
:PROPERTIES:
:CUSTOM_ID: h:F49B684F-1911-45E1-99AB-79EB14913FFC
:END:
#+begin_src emacs-lisp
(use-package flymake
  :straight (:type built-in)
  :hook (emacs-lisp-mode . flymake-mode)
  :init
  (setq python-flymake-command (executable-find "flake8"))
  (setq flymake-fringe-indicator-position 'right-fringe)
  :general
  (general-nmap "] !" 'flymake-goto-next-error)
  (general-nmap "[ !" 'flymake-goto-prev-error)
  )
#+end_src

*** jupyter
:PROPERTIES:
:CUSTOM_ID: h:388AA3FF-BC18-4628-93DC-9292B568AE9F
:END:
~zmq~ installation:
- Need to have ~automake~, ~autoconf~
- In ~straight/build/zmq/src~ run ~autoreconf -i~
- In ~straight/build/zmq~ run ~make~

~emacs-zmq~ installation:
- In ~straight/build/emacs-zmq~ run ~wget https://github.com/nnicandro/emacs-zmq/releases/download/v0.10.10/emacs-zmq-x86_64-apple-darwin17.4.0.tar.gz~
- Then ~tar -xzf emacs-zmq-x86_64-apple-darwin17.4.0.tar.gz~
- Finally ~cp emacs-zmq-x86_64-apple-darwin17.4.0/emacs-zmq.so emacs-zmq.dylib~

- In the REPL you can use =M-p= / =M-n= to navigate previous prompts

#+begin_src emacs-lisp
(use-package jupyter
  :straight (:no-native-compile t :no-byte-compile t) ;; otherwise we get jupyter-channel void
  :general
  (lc/local-leader-keys
    :keymaps 'python-mode-map
    "e" '(:ignore true :wk "eval")
    "e e" '(jupyter-eval-line-or-region :wk "line")
    "e d" '(jupyter-eval-defun :wk "defun")
    "e b" '((lambda () (interactive) (lc/jupyter-eval-buffer)) :wk "buffer")
    "J" '(lc/jupyter-repl :wk "jupyter REPL")
    "k" '(:ignore true :wk "kernel")
    "k i" '(jupyter-org-interrupt-kernel :wk "interrupt")
    "k r" '(jupyter-repl-restart-kernel :wk "restart"))
  (lc/local-leader-keys
    :keymaps 'python-mode-map
    :states 'visual
    "e" '(jupyter-eval-region :wk "eval"))
  :init
  (setq jupyter-repl-prompt-margin-width 4)
  (defun jupyter-command-venv (&rest args)
    "This overrides jupyter-command to use the virtualenv's jupyter"
    (let ((jupyter-executable (executable-find "jupyter")))
      (with-temp-buffer
        (when (zerop (apply #'process-file jupyter-executable nil t nil args))
          (string-trim-right (buffer-string))))))
  (defun lc/jupyter-eval-buffer ()
    "Send the contents of BUFFER using `jupyter-current-client'."
    (interactive)
    (jupyter-eval-string (jupyter-load-file-code (buffer-file-name))))
  (defun lc/jupyter-repl ()
    "If a buffer is already associated with a jupyter buffer, then pop to it. Otherwise start a jupyter kernel."
    (interactive)
    (if (bound-and-true-p jupyter-current-client)
        (jupyter-repl-pop-to-buffer)
      (call-interactively 'jupyter-repl-associate-buffer)))
  (advice-add 'jupyter-command :override #'jupyter-command-venv))
#+end_src

*** ob-jupyter
:PROPERTIES:
:CUSTOM_ID: h:600809B3-9B92-43F9-9A99-3D007CEE044D
:END:
Note:
- We can only load ~ob-jupyter~ when we have ~jupyter~ on our ~PATH~.
  + We assume ~jupyter~ is always installed in a virtual env associated with an ~.envrc~ file
  + We load jupyter when we activate ~envrc-mode~ if ~jupyter~ is available

#+begin_src emacs-lisp
(use-package jupyter
  :straight (:no-native-compile t :no-byte-compile t) ;; otherwise we get jupyter-channel void
  :general
  (lc/local-leader-keys
    :keymaps 'org-mode-map
    "=" '((lambda () (interactive) (jupyter-org-insert-src-block t nil)) :wk "block below")
    "m" '(jupyter-org-merge-blocks :wk "merge")
    "+" '(jupyter-org-insert-src-block :wk "block above")
    "?" '(jupyter-inspect-at-point :wk "inspect")
    "x" '(jupyter-org-kill-block-and-results :wk "kill block"))
  :hook ((jupyter-org-interaction-mode . (lambda () (lc/add-local-electric-pairs '((?' . ?')))))
         (jupyter-repl-persistent-mode . (lambda ()  ;; we activate org-interaction-mode ourselves
                                           (when (derived-mode-p 'org-mode)
                                             ;; (setq-local company-backends '((company-capf)))
																						 (setq-local evil-lookup-func #'jupyter-inspect-at-point)
                                             (jupyter-org-interaction-mode))))
				 (envrc-mode . lc/load-ob-jupyter))
  :init
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:pandoc t)
                                                       (:kernel . "python3")))
  (setq org-babel-default-header-args:jupyter-R '((:pandoc t)
                                                  (:async . "yes")
                                                  (:kernel . "ir")))
	(defun lc/org-load-jupyter ()
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((jupyter . t)))))
  (defun lc/load-ob-jupyter ()
    ;; only try to load in org-mode
    (when (derived-mode-p 'org-mode)
      ;; skip if already loaded
      (unless (member '(jupyter . t) org-babel-load-languages)
        ;; only load if jupyter is available
        (when (executable-find "jupyter")
					(lc/org-load-jupyter)))))
  :config
	(cl-defmethod jupyter-org--insert-result (_req context result)
    (let ((str
           (org-element-interpret-data
            (jupyter-org--wrap-result-maybe
             context (if (jupyter-org--stream-result-p result)
                         (thread-last result
                           jupyter-org-strip-last-newline
                           jupyter-org-scalar)
                       result)))))
      (if (< (length str) 100000)  ;; >
          (insert str)
        (insert (format ": Result was too long! Length was %d" (length str)))))
    (when (/= (point) (line-beginning-position))
      ;; Org objects such as file links do not have a newline added when
      ;; converting to their string representation by
      ;; `org-element-interpret-data' so insert one in these cases.
      (insert "\n")))
  ;;Remove text/html since it's not human readable
  ;; (delete :text/html jupyter-org-mime-types)
  ;; (with-eval-after-load 'org-src
  ;;   (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
  ;;   (add-to-list 'org-src-lang-modes '("jupyter-R" . R)))
	)
#+end_src

*** auto-import
:PROPERTIES:
:CUSTOM_ID: h:CD1D1A97-50EC-4B72-814C-3BC0297C42B1
:END:
#+begin_src emacs-lisp
(use-package pyimport
  :general
  (lc/local-leader-keys
    :keymaps 'python-mode-map
    "i i" '(pyimport-insert-missing :wk "autoimport")))
#+end_src

*** blacken
:PROPERTIES:
:CUSTOM_ID: h:2DC8F5D9-BD12-4CEA-9CBD-34B4CAC53495
:END:
#+begin_src emacs-lisp
(use-package blacken
	:general
	(lc/local-leader-keys
      :keymaps 'python-mode-map
      "=" '(blacken-buffer :wk "format"))
	)
#+end_src

** R
:PROPERTIES:
:CUSTOM_ID: h:74BD1AAB-0C5A-4BF2-927E-D11FEEA4C08A
:END:
*** ess
:PROPERTIES:
:CUSTOM_ID: h:06BE4AA2-688D-4748-BF6D-9656EF6ED767
:END:
#+begin_src emacs-lisp
(use-package ess
  :general
  (lc/local-leader-keys
    :keymaps 'ess-r-mode-map
    :states 'normal
    "R" '(R :wk "R")
    "q" '(ess-quit :wk "quit")
    "RET" '(ess-eval-line-visibly-and-step :wk "line and step")
    ;; debug
    "d b" '(ess-bp-set :wk "breakpoint")
    "d n" '(ess-debug-command-next :wk "next")
    "d q" '(ess-debug-command-quit :wk "quit")
    "d c" '(ess-bp-next :wk "continue")
    "d f" '(ess-debug-flag-for-debugging :wk "flag function")
    "d F" '(ess-debug-unflag-for-debugging :wk "unflag function")
    "d p" '(ess-debug-goto-debug-point :wk "go to point")
    ;; "e l" '(ess-eval-line :wk "eval line")
    "e p" '(ess-eval-paragraph :wk "paragraph")
    "e f" '(ess-eval-function :wk "function")
    "h" '(:keymap ess-doc-map :which-key "help")
    ;; "h" '(ess-display-help-on-object :wk "help")
    )
  (lc/local-leader-keys
    :keymaps 'ess-r-mode-map
    :states 'visual
    "RET" '(ess-eval-region-or-line-visibly-and-step :wk "line and step"))
  :init
  (setq ess-eval-visibly 'nowait)
  (setq ess-R-font-lock-keywords '((ess-R-fl-keyword:keywords . t)
                                   (ess-R-fl-keyword:constants . t)
                                   (ess-R-fl-keyword:modifiers . t)
                                   (ess-R-fl-keyword:fun-defs . t)
                                   (ess-R-fl-keyword:assign-ops . t)
                                   (ess-R-fl-keyword:%op% . t)
                                   (ess-fl-keyword:fun-calls . t)
                                   (ess-fl-keyword:numbers . t)
                                   (ess-fl-keyword:operators . t)
                                   (ess-fl-keyword:delimiters . t)
                                   (ess-fl-keyword:= . t)
                                   (ess-R-fl-keyword:F&T . t)))
	;; (setq ess-first-continued-statement-offset 2
  ;;         ess-continued-statement-offset 0
  ;;         ess-expression-offset 2
  ;;         ess-nuke-trailing-whitespace-p t
  ;;         ess-default-style 'DEFAULT)
	;; (setq ess-r-flymake-linters "line_length_linter = 120")
  )
#+end_src

*** ESS data viewer
:PROPERTIES:
:CUSTOM_ID: h:9838BF54-50A8-4E07-8639-184253159FC3
:END:
#+begin_src emacs-lisp
(use-package ess-view-data
  :general
  (lc/local-leader-keys
    :keymaps 'ess-r-mode-map
    :states 'normal
    "hd" 'ess-R-dv-pprint
    "ht" 'ess-R-dv-ctable
    ))
#+end_src

*** enable lsp-mode
:PROPERTIES:
:CUSTOM_ID: h:4492B9C6-4E27-4A4D-B927-13D3DDD44706
:END:
#+begin_src emacs-lisp
(use-package lsp-mode
  :hook
  (ess-r-mode . lsp-deferred)
	)
#+end_src

** emacs-lisp
:PROPERTIES:
:CUSTOM_ID: h:6956B874-2F21-42A1-8343-C4BF7B1123C9
:END:
*** evil-lisp state
:PROPERTIES:
:CUSTOM_ID: h:C59E740E-F00B-4D2F-B5A3-36C3B99BCD5E
:END:
+ Enter ~lisp-state~ with =SPC l .=
+ Navigate symbols with =j= and =k=
+ Navigate forms with =h= and =l=
+ Go to parent sexp with =U=

#+begin_src emacs-lisp
(use-package evil-lisp-state
  :after evil
  :demand
  :init
  (setq evil-lisp-state-enter-lisp-state-on-command nil)
  (setq evil-lisp-state-global t)
  ;; (setq evil-lisp-state-major-modes '(org-mode emacs-lisp-mode clojure-mode clojurescript-mode lisp-interaction-mode))
  :config
  (evil-lisp-state-leader "SPC l")
  )
#+end_src

*** eros: results in overlays
:PROPERTIES:
:CUSTOM_ID: h:309D0DC9-29FF-46E8-A98A-F2CD6CCEB12A
:END:
#+begin_src emacs-lisp
(use-package eros
  :hook ((emacs-lisp-mode org-mode lisp-interaction-mode) . eros-mode)
  :general
  (lc/local-leader-keys
    :keymaps '(org-mode-map emacs-lisp-mode-map lisp-interaction-mode-map)
    :states 'normal
    "e l" '(eros-eval-last-sexp :wk "last sexp")
    ;; "e d" '((lambda () (interactive) (eros-eval-defun t)) :wk "defun")
    "e b" '(eval-buffer :wk "buffer"))
  (lc/local-leader-keys
    :keymaps '(org-mode-map emacs-lisp-mode-map lisp-interaction-mode-map)
    :states 'visual
    "e" '((lambda (start end)
            (interactive (list (region-beginning) (region-end)))
            (eval-region start end t))
          :wk "region")
    ;; "e" '((lambda (start end)
    ;;         (interactive (list (region-beginning) (region-end)))
    ;;         (eros--eval-overlay
    ;;          (eval-region start end t)
    ;;          end))
    ;;       :wk "region")
    )
  )
#+end_src

** Nix
:PROPERTIES:
:CUSTOM_ID: h:88E57F7B-DA1F-4BC1-BAD3-5BA459D054B7
:END:
*** nix mode
:PROPERTIES:
:CUSTOM_ID: h:D9238686-7FDE-406A-BAE1-DF8293A02647
:END:
#+begin_src emacs-lisp
(use-package nix-mode
:mode "\\.nix\\'")
#+end_src

** Clojure
:PROPERTIES:
:CUSTOM_ID: h:2A226DAE-B566-464B-AF20-4BE86E554DC6
:END:
*** Clojure mode
:PROPERTIES:
:CUSTOM_ID: h:C757468F-281B-4A9D-84AF-26B9B656F01C
:END:
#+begin_src emacs-lisp
(use-package clojure-mode
  :mode "\\.clj$"
  :init
  (setq clojure-align-forms-automatically t))
#+end_src

*** clojure-lsp
:PROPERTIES:
:CUSTOM_ID: h:1613B1A4-02B4-4EB0-AC4B-53FA0BF3CF60
:END:

#+begin_src emacs-lisp
(use-package clojure-mode
  :hook
  ((clojure-mode clojurescript-mode)
   . (lambda ()
       (setq-local lsp-enable-indentation nil ; cider indentation
                   lsp-enable-completion-at-point nil ; cider completion
                   )
       (lsp-deferred)))
  )
#+end_src

*** Cider
:PROPERTIES:
:CUSTOM_ID: h:3D8B9BAA-05E9-4F0B-8988-4B56882BB607
:END:
#+begin_src emacs-lisp
(use-package cider
  :hook ((cider-repl-mode . evil-normalize-keymaps)
         (cider-mode . (lambda ()
                           (setq-local evil-lookup-func #'cider-doc)))
         (cider-mode . eldoc-mode))
  :general
  (lc/local-leader-keys
    :keymaps 'clojure-mode-map
    "c" '(cider-connect-clj :wk "connect")
    "C" '(cider-connect-cljs :wk "connect (cljs)")
    "j" '(cider-jack-in :wk "jack in")
    "J" '(cider-jack-in-cljs :wk "jack in (cljs)")
    "d d" 'cider-debug-defun-at-point 
    "e b" 'cider-eval-buffer
    "e l" 'cider-eval-last-sexp
    "e L" 'cider-pprint-eval-last-sexp-to-comment
    "e d" '(cider-eval-defun-at-point :wk "defun")
    "e D" 'cider-pprint-eval-defun-to-comment
		"h" 'cider-clojuredocs-web 
		"K" 'cider-doc
		"q" '(cider-quit :qk "quit")
		)
  (lc/local-leader-keys
    :keymaps 'clojure-mode-map
    :states 'visual
    "e" 'cider-eval-region)
  :init
  (setq nrepl-hide-special-buffers t)
  (setq nrepl-sync-request-timeout nil)
	(setq cider-repl-display-help-banner nil)
  )
#+end_src

*** TODO Eval sexp at point
:PROPERTIES:
:CUSTOM_ID: h:D23F2C41-0162-4E11-A052-17B37B48AF2D
:END:
#+begin_src emacs-lisp
(use-package cider
  :init
  (defun mpereira/cider-eval-sexp-at-point (&optional output-to-current-buffer)
    "Evaluate the expression around point.
If invoked with OUTPUT-TO-CURRENT-BUFFER, output the result to current buffer."
    (interactive "P")
    (save-excursion
      (goto-char (- (cadr (cider-sexp-at-point 'bounds))
                    1))
      (cider-eval-last-sexp output-to-current-buffer)))
  )
#+end_src

*** ob-clojure
:PROPERTIES:
:CUSTOM_ID: h:3B21567B-6B7B-4747-B44B-AA2480FA49E5
:END:
#+begin_src emacs-lisp
(use-package org
:config
(require 'ob-clojure)
(setq org-babel-clojure-backend 'cider))
#+end_src

*** aggressive-indent
:PROPERTIES:
:CUSTOM_ID: h:804F32D8-081E-427C-8949-90D3ECF5879F
:END:
#+begin_src emacs-lisp
  ;; keep the file indented
  (use-package aggressive-indent
    :hook ((clojure-mode . aggressive-indent-mode)
           (emacs-lisp-mode . aggressive-indent-mode)))
#+end_src

** markdown
:PROPERTIES:
:CUSTOM_ID: h:C643DC36-8F5E-40E4-B8BB-126F341491FD
:END:
*** markdown-mode
:PROPERTIES:
:CUSTOM_ID: h:78EA0AF3-721E-4005-A742-287C4DAED7CD
:END:
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

* Gimmicks
:PROPERTIES:
:CUSTOM_ID: h:7D94EA42-5F85-4E18-9029-19BAD69FBF85
:header-args:    :emacs-lisp :tangle ./lisp/init-extra.el
:END:
** web browser
:PROPERTIES:
:CUSTOM_ID: h:6B214C3A-22E3-47D0-9DD7-F379E07CF960
:END:
Use =SPC s w= to search the web! You can also visit a URL in the buffer.
With the web browser open, scroll with =j= / =k= .
To visit a link, =SPC s l= 
#+begin_src emacs-lisp
(use-package xwwp
  :straight (xwwp :type git :host github :repo "canatella/xwwp")
  :commands (xwwp)
  :general
  (lc/leader-keys
    "x x" '((lambda () (interactive)
              (let ((current-prefix-arg 4)) ;; emulate C-u universal arg
                (call-interactively 'xwwp)))
            :wk "search or visit")
    "x l" '(xwwp-follow-link :wk "link")
    "x b" '(xwidget-webkit-back :wk "back"))
  :init
  ;; :custom
  ;; (setq xwwp-follow-link-completion-system 'ivy)
  ;; :bind (:map xwidget-webkit-mode-map
  ;;             ("v" . xwwp-follow-link))
  )
#+end_src

** elfeed
:PROPERTIES:
:CUSTOM_ID: h:B0653EBC-9E48-4E3D-86A3-34E7450B4F03
:END:
- Search with =s=
- Open in browser with =S-RET=
- Open in ~xwwp~ with =x=

#+begin_src emacs-lisp
(use-package elfeed
  :straight (elfeed :type git :host github :repo "skeeto/elfeed")
  :hook (elfeed-search-mode . elfeed-update)
  :general
  (lc/leader-keys
    "s r" '(elfeed :wk "elfeed"))
  (general-nmap
		:keymaps 'elfeed-search-mode-map
   "x" 'lc/elfeed-xwwp-open)
  :init
  (defun lc/elfeed-xwwp-open (&optional use-generic-p)
    "open with eww"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               do (elfeed-untag entry 'unread)
               when (elfeed-entry-link entry)
               do (xwwp it))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))
  :config
  (setq elfeed-feeds'(("https://www.reddit.com/r/emacs.rss?sort=new" reddit emacs)
                      ("http://emacsredux.com/atom.xml" emacs)
                      ("http://irreal.org/blog/?tag=emacs&amp;feed=rss2" emacs)
                      ("https://www.reddit.com/search.rss?q=url%3A%28youtu.be+OR+youtube.com%29&sort=top&t=week&include_over_18=1&type=link"
                      reddit youtube popular))))
#+end_src
 
** search google
:PROPERTIES:
:CUSTOM_ID: h:01E26AB9-2829-4076-9665-E218832FB1A3
:END:
#+begin_src emacs-lisp
(use-package emacs
  :general
  (lc/leader-keys
    "s g" '(google-search :wk "google"))
  :init
  (defun google-search-str (str)
    (browse-url
     (concat "https://www.google.com/search?q=" str)))
  (defun google-search ()
    "Google search region, if active, or ask for search string."
    (interactive)
    (if (region-active-p)
        (google-search-str
         (buffer-substring-no-properties (region-beginning)
                                         (region-end)))
      (google-search-str (read-from-minibuffer "Search: "))))
  )
#+end_src

** search github
:PROPERTIES:
:CUSTOM_ID: h:6872D17A-1A2E-4394-A83B-16D5328D88BC
:END:
#+begin_src emacs-lisp
(use-package emacs
  :general
  (lc/leader-keys
    "s c" '(github-code-search :wk "code (github)"))
  :init
  (defun github-code-search ()
    "Search code on github for a given language."
    (interactive)
    (let ((language (completing-read
                     "Language: "
                     '("Emacs Lisp" "Python"  "Clojure" "R")))
          (code (read-string "Code: ")))
      (browse-url
       (concat "https://github.com/search?l=" language
               "&type=code&q=" code))))
  )
#+end_src

** transient help commands
:PROPERTIES:
:CUSTOM_ID: h:14F8ECDE-9E15-46F7-B903-ECE383251C48
:END:
#+begin_src emacs-lisp
(use-package emacs
  :general
  (lc/leader-keys
    "h" 'lc/help-transient)
  :config
  (require 'transient)
  (transient-define-prefix lc/help-transient ()
    ["Help Commands"
     ["Mode & Bindings"
      ("m" "Mode" describe-mode)
      ("b" "Major Bindings" which-key-show-full-major-mode)
      ("B" "Minor Bindings" which-key-show-full-minor-mode-keymap)
      ("d" "Descbinds" describe-bindings)
      ]
     ["Describe"
      ("c" "Command" helpful-command)
      ("f" "Function" helpful-callable)
      ("v" "Variable" helpful-variable)
      ("k" "Key" helpful-key)
      ]
     ["Info on"
      ("C-c" "Emacs Command" Info-goto-emacs-command-node)
      ("C-f" "Function" info-lookup-symbol) 
      ("C-v" "Variable" info-lookup-symbol)
      ("C-k" "Emacs Key" Info-goto-emacs-key-command-node)
      ]
     ["Goto Source"
      ("L" "Library" find-library)
      ("F" "Function" find-function)
      ("V" "Variable" find-variable)
      ("K" "Key" find-function-on-key)
      ]
     ]
    [
     ["Internals"
      ("e" "Echo Messages" view-echo-area-messages)
      ("l" "Lossage" view-lossage)
      ]
     ["Describe"
      ("s" "Symbol" helpful-symbol)
      ("." "At Point   " helpful-at-point)
      ;; ("C-f" "Face" counsel-describe-face)
      ("w" "Where Is" where-is)
      ("=" "Position" what-cursor-position)
      ]
     ["Info Manuals"
      ("C-i" "Info" info)
      ("C-4" "Other Window " info-other-window)
      ("C-e" "Emacs" info-emacs-manual)
      ;; ("C-l" "Elisp" info-elisp-manual)
      ]
     ["Exit"
      ("q" "Quit" transient-quit-one)
      ("<escape>" "Quit" transient-quit-one)
      ]
     ;; ["External"
     ;;  ("W" "Dictionary" lookup-word-at-point)
     ;;  ("D" "Dash" dash-at-point)
     ;;  ]
     ]
    )
  )
#+end_src

** COMMENT reddit
:PROPERTIES:
:CUSTOM_ID: h:B616A404-0B56-4C56-9A8C-343E212F536A
:END:
#+begin_src emacs-lisp
(use-package md4rd
  :general
  (lc/leader-keys
    "s r" '(md4rd :wk "reddit"))
  :init
  (setq md4rd-subs-active '(emacs apple clojure MachineLearning))
  :config
  (add-hook 'md4rd-mode-hook 'md4rd-indent-all-the-lines)
  (require 'cl)
  )
#+end_src

** COMMENT dash docsets
:PROPERTIES:
:CUSTOM_ID: h:F60C9AFB-AF3C-434D-B2C9-14741185D0DB
:END:
- ~dash-docs-install-docset~
- ~dash-docs-search~

#+begin_src emacs-lisp
(use-package dash-docs
  :init
  ;; (setq dash-docs-browser-func 'eww)
  (setq dash-docs-common-docsets '("Pandas"))
  )
#+end_src

#+begin_src emacs-lisp
(use-package dash-at-point
	:general
  (lc/leader-keys
    "s d" '(dash-at-point :which-key "search dash"))
	)
#+end_src

** COMMENT nano-emacs / sanity.el
:PROPERTIES:
:CUSTOM_ID: h:878D29DE-5721-42BD-850E-81D0A47580D3
:END:
Look at https://github.com/skyler544/doom-nano-testing/blob/main/load-nano.el

#+begin_src emacs-lisp :tangle no
(use-package nano-emacs
  :straight (nano-emacs :type git :host github :repo "rougier/nano-emacs")
  :demand
  :config
  (require 'nano-layout)
  (require 'nano-faces)
  (nano-faces)

  (require 'nano-theme-light)
  ;; (require 'nano-theme-dark)
  (require 'nano-theme)
  (nano-theme)

  (require 'nano-modeline)
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Nice defaults, snarfed from sanity.el
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (set-face-font 'default "Input Mono 14")

;; (setq default-frame-alist '((width . 80) (height . 30) (fullscreen . maximized)))

(setq default-frame-alist
      (append (list '(vertical-scroll-bars . nil)
                    '(internal-border-width . 48)
		    '(width  . 80) '(height . 0.9)
		    '(left . 0.5) '(top . 0)
                    '(font . "Input Mono 14"))))

;; (set-frame-parameter (selected-frame)
;;                      'internal-border-width 24)

;; Line spacing, can be 0 for code and 1 or 2 for text
(setq-default line-spacing 2)

;; Underline line at descent position, not baseline position
(setq x-underline-at-descent-line t)

;; No ugly button for checkboxes
(setq widget-image-enable nil)

;; Line cursor and no blink
(set-default 'cursor-type  '(bar . 1))
(blink-cursor-mode 0)

;; No sound
(setq visible-bell t)
(setq ring-bell-function 'ignore)

;; No Tooltips
(tooltip-mode 0)

;; Paren mode is part of the theme
(show-paren-mode t)

;; No fringe but nice glyphs for truncated and wrapped lines
(fringe-mode '(0 . 0))
(defface fallback '((t :family "Fira Code Light"
                       :inherit 'face-faded)) "Fallback")
(set-display-table-slot standard-display-table 'truncation
                        (make-glyph-code ?… 'fallback))
(set-display-table-slot standard-display-table 'wrap
                        (make-glyph-code ?↩ 'fallback))
(set-display-table-slot standard-display-table 'selective-display
                        (string-to-vector " …"))

;; Mode line (this might be slow because of the "☰" that requires substitution)
;; This line below makes things a bit faster
(set-fontset-font "fontset-default"  '(#x2600 . #x26ff) "Fira Code 16")

(define-key mode-line-major-mode-keymap [header-line]
  (lookup-key mode-line-major-mode-keymap [mode-line]))

(defun mode-line-render (left right)
  (let* ((available-width (- (window-width) (length left) )))
    (format (format "%%s %%%ds" available-width) left right)))
(setq-default mode-line-format
     '((:eval
       (mode-line-render
       (format-mode-line (list
         (propertize "☰" 'face `(:inherit mode-line-buffer-id)
                         'help-echo "Mode(s) menu"
                         'mouse-face 'mode-line-highlight
                         'local-map   mode-line-major-mode-keymap)
         " %b "
         (if (and buffer-file-name (buffer-modified-p))
             (propertize "(modified)" 'face `(:inherit face-faded)))))

       (format-mode-line
        (list
	 (propertize "[ L %l : C %c ]  " 'face `(:inherit face-faded))
	 (propertize
	  (format "%d Words  " (count-words (point-min) (point-max)))
	  'face `(:inherit face-faded))))))))


;; Comment if you want to keep the modeline at the bottom
(setq-default header-line-format mode-line-format)
(setq-default mode-line-format'(""))
              
;; Vertical window divider
(setq window-divider-default-right-width 3)
(setq window-divider-default-places 'right-only)
(window-divider-mode)

;; When we set a face, we take care of removing any previous settings
(defun set-face (face style)
  "Reset a face and make it inherit style."
  (set-face-attribute face nil
   :foreground 'unspecified :background 'unspecified
   :family     'unspecified :slant      'unspecified
   :weight     'unspecified :height     'unspecified
   :underline  'unspecified :overline   'unspecified
   :box        'unspecified :inherit    style))

;; Faces for the writer theme
(defgroup writer nil
  "Faces for the writer theme"
  :prefix "writer-face-"
  :group 'faces)

;; Custom faces
(defface face-faded nil
  "Used for menubars"
  :group 'writer)

;; Modeline
(defun set-modeline-faces ()

  ;; Mode line at top
  (set-face 'header-line                                 'face-strong)
  (set-face-attribute 'header-line nil
                                :underline (face-foreground 'default))
  (set-face-attribute 'mode-line nil
                      :height 10
                      :underline (face-foreground 'face-faded)
                      :overline nil
                      :box nil 
                      :foreground (face-background 'default)
                      :background (face-background 'default))
  (set-face 'mode-line-inactive                            'mode-line)
  
  ;; Mode line at bottom
  ;; (set-face 'header-line                                 'face-strong)
  ;; (set-face-attribute 'mode-line nil
  ;;                     :height 1.0
  ;;                     :overline (face-background 'default)
  ;;                     :underline nil
  ;;                     :foreground (face-foreground 'default)
  ;;                     :background (face-background 'face-subtle)
  ;;                     :box `(:line-width 2
  ;;                            :color ,(face-background 'face-subtle)
  ;;                            :style nil))
  ;; (set-face 'mode-line-highlight '(face-popout mode-line))
  ;; (set-face 'mode-line-emphasis  'face-strong)
  ;; (set-face-attribute 'mode-line-buffer-id nil :weight 'regular)
  ;; (set-face-attribute 'mode-line-inactive nil
  ;;                     :height 1.0
  ;;                     :overline (face-background 'default)
  ;;                     :underline nil
  ;;                     :foreground (face-foreground 'face-faded)
  ;;                     :background (face-background 'face-subtle)
  ;;                     :box `(:line-width 2
  ;;                            :color ,(face-background 'face-subtle)
  ;;                            :style nil))


  (set-face-attribute 'cursor nil
                      :background (face-foreground 'default))
  (set-face-attribute 'window-divider nil
                      :foreground (face-background 'mode-line))
  (set-face-attribute 'window-divider-first-pixel nil
                      :foreground (face-background 'default))
  (set-face-attribute 'window-divider-last-pixel nil
                      :foreground (face-background 'default))
  )

;; Buttons
(defun set-button-faces ()
  (set-face-attribute 'custom-button nil
                      :foreground (face-foreground 'face-faded)
                      :background (face-background 'face-subtle)
                      :box `(:line-width 1
                             :color ,(face-foreground 'face-faded)
                             :style nil))
  (set-face-attribute 'custom-button-mouse nil
                      :foreground (face-foreground 'default)
                      ;; :background (face-foreground 'face-faded)
                      :inherit 'custom-button
                      :box `(:line-width 1
                             :color ,(face-foreground 'face-subtle)
                             :style nil))
  (set-face-attribute 'custom-button-pressed nil
                      :foreground (face-background 'default)
                      :background (face-foreground 'face-salient)
                      :inherit 'face-salient
                      :box `(:line-width 1
                             :color ,(face-foreground 'face-salient)
                             :style nil)
                      :inverse-video nil))
#+end_src

* Provide modules
:PROPERTIES:
:CUSTOM_ID: h:754DFB20-B2AB-4750-9BDA-D24E8014C504
:END:
** init-core
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./lisp/init-core.el
:END:
#+begin_src emacs-lisp
(provide 'init-core)
;;; init-core.el ends here
#+end_src

** init-extras
:PROPERTIES:
:CUSTOM_ID: h:E80DEB4B-6AC9-415D-AF36-0044479D1B5A
:header-args:    :emacs-lisp :tangle ./lisp/init-extra.el
:END:
#+begin_src emacs-lisp
(provide 'init-extra)
;;; init-extra.el ends here
#+end_src

* COMMENT to add / to fix
:PROPERTIES:
:CUSTOM_ID: h:742F97D8-9FC2-4ED4-9985-A23192D75550
:END:
** To add
:PROPERTIES:
:CUSTOM_ID: h:167C14F0-55E7-4524-98BC-1C605BA44337
:END:
*** Make different font configurations (toggle big font)
:PROPERTIES:
:CUSTOM_ID: h:48656013-A692-467F-93DB-9E09967DE531
:END:
*** Make different window configurations for dap-mode
:PROPERTIES:
:CUSTOM_ID: h:42BF8EDB-1ABA-4DA9-A362-4D595791FA69
:END:
+ One with just the code and the REPL
+ One with everything
*** Improve LaTeX setup
:PROPERTIES:
:CUSTOM_ID: h:10F1C33B-B19C-4769-895D-2F81411D18EA
:END:
https://gist.github.com/bigodel/56a4627afdfe9ad28f6dcc68b89a97f8
*** eval region in org
:PROPERTIES:
:CUSTOM_ID: h:A26EC598-6EA3-4CEB-AB36-8C417E385F38
:END:
#+begin_src emacs-lisp
(defun my/ess-eval ()
  (interactive)
  (let* ((buffst))
    (if (string-equal ess-language "SAS")
        (progn
          (if (and transient-mark-mode mark-active)
              (setq buffst (buffer-substring-no-properties (region-beginning) (region-end)))
            (setq buffst (buffer-substring-no-properties (beginning-of-line) (end-of-line))))
          (save-window-excursion
            (switch-to-buffer "*iESS[SAS]*")
            (goto-char (point-max))
            (comint-send-input)
            (goto-char (point-max))
            (insert buffst)
            (comint-send-input)
            ))
      (progn
        (if (and transient-mark-mode mark-active)
            (call-interactively 'ess-eval-region)
          (call-interactively 'ess-eval-line-and-step))
				))))
#+end_src

*** View dataframe in SES mode
:PROPERTIES:
:CUSTOM_ID: h:5F6DBFD0-7C74-4102-BBCD-3F6CB2913882
:END:
#+begin_src emacs-lisp
(defun lc/jupyter-df-to-tsv (dataframe)
	(thread-last
			(jupyter-eval (concat "df" ".to_csv(sep='\t')"))
		(string-replace "'" "")
		;; (subst-char-in-string ?\\ ?\\ )
		;; (string-replace "\\t" "t")
		))

(defun lc/dap-eval (expression)
	(dap-eval expression)
	(sleep-for 2)
	(substring (lc/last-message) 4 -1))

(defun lc/dap-df-to-tsv (dataframe)
	(lc/dap-eval (concat dataframe ".to_csv(sep='\t')")))

(defun lc/pd-to-ses (dataframe)
	(interactive (list (read-from-minibuffer "DataFrame: " (evil-find-symbol nil))))
	;; (interactive "sVariable: ")
	(let ((buffer (get-buffer-create
								 (generate-new-buffer-name "*ein:ses pandas*")))
				(tsv (lc/jupyter-df-to-tsv dataframe)))
		;; Open `ses-mode' buffer
		(with-current-buffer buffer
			(ses-mode)
			(ses-yank-tsf tsv nil)
			(ses-command-hook)
			;; (cl-flet ((y-or-n-p
			;;            (prompt)
			;;            (if (string-prefix-p "Yank will insert " prompt) t (error "Unexpected prompt: %s" prompt)))))
			)
		(pop-to-buffer buffer)))

#+end_src

*** ~demo-it~
:PROPERTIES:
:CUSTOM_ID: h:4CBD79C8-23E1-4415-AE16-7004B020DCAE
:END:
- https://github.com/howardabrams/demo-it
- https://github.com/howardabrams/literate-devops-demo/blob/master/literate-devops-demo.el
- https://github.com/howardabrams/magit-demo/blob/master/magit-demo.el
*** eval sexp at point
:PROPERTIES:
:CUSTOM_ID: h:85DABA97-A084-4675-98AD-9B8388FE3C7F
:END:
#+begin_src emacs-lisp
(defun eval-next-sexp ()
  (interactive)
  (save-excursion
    (forward-sexp)
    (eval-last-sexp nil)))

(defun eval-surrounding-sexp (levels)
  (interactive "p")
  (save-excursion
    (up-list (abs levels))
    (eval-last-sexp nil)))
#+end_src

*** More transient commands!
:PROPERTIES:
:CUSTOM_ID: h:CFC79023-39C4-46DE-8B94-49920C2E9444
:END:
#+begin_src emacs-lisp
(transient-define-prefix jh/terraform-transient-command ()
  "Run a terrafrom command."
  ["Get"
   ("g" "Get" jh/terraform-transient-get)]
  ["Run"
   ("a" "Apply" jh/terraform-transient-apply)
   ("p" "Plan" jh/terraform-plan)
   ("i" "Init" jh/terraform-init)])

(transient-define-prefix jh/terraform-transient-get ()
  ["Arguments"
   ("-u" "Update modules" "-update")]
  ["Actions"
   ("g" "Get" jh/terraform-get)])

(defun jh/terraform-get ()
  "Get any non-retrieved modules for the current terraform configuration."
  (interactive)
  (jh/terraform-run-async-command "get"))

(defun jh/terraform-run-async-command (action &rest args)
  "Run the terraform ACTION with optional ARGS asynchronously."
  (let ((command (string-join (cons action (transient-get-value)) " ")))
    (async-shell-command (format "terraform %s" command))))
#+end_src

*** docstrings
:PROPERTIES:
:CUSTOM_ID: h:5ED70817-7A77-4C7D-91E5-4CECC5E00990
:END:
#+begin_src emacs-lisp
(use-package docstr
 :straight (:host github :repo "jcs-elpa/docstr")
 :hook (after-init . global-docstr-mode)
 :config
 (cl-pushnew '(rustic-mode . docstr-writers-rust) docstr-writers-alist :test #'equal)
 (cl-pushnew '("/" . docstr-trigger-rust) docstr-trigger-alist :test #'equal))
#+end_src

** To fix
:PROPERTIES:
:CUSTOM_ID: h:92086A48-355B-426E-AB82-DB73FAA11A1C
:END:
*** ~helpful-variable~ sometimes throws syntax error
:PROPERTIES:
:CUSTOM_ID: h:9ABC9A4D-D71E-49E7-9C13-34DF1FFB2836
:END:
*** Can't export both light and dark themes, one of the two has wrong rainbow delimiters 
:PROPERTIES:
:CUSTOM_ID: h:6E70D3BF-8DDD-429F-92B8-BCBFCB42F94C
:END:
*** Can't export twice in a row
:PROPERTIES:
:CUSTOM_ID: h:5F766A45-274C-464F-AF6E-C7BB4BB17BC8
:END:
*** Setting of the theme is somehow wrong, dark is always set
:PROPERTIES:
:CUSTOM_ID: h:E9A59F97-B380-43D7-97EB-DAE30A17328F
:END:
* COMMENT Local variables
:PROPERTIES:
:CUSTOM_ID: h:8CE072CD-CA85-4E53-B672-E0AC74E4E4EC
:END:
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(progn (lc/org-add-ids-to-headlines-in-file) (lc/tangle-config))) nil t)
# company-backends: (company-dabbrev-code company-files company-keywords)
# End:

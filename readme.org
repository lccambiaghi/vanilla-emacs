#+TITLE: Luca's literate Emacs config
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
# #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

* Introduction
** This file
This file (~readme.org~) is my literate emacs configuration. 
Every time I save the file, the code blocks get tangled.
By default, they get tangled (in sequence) to ~./init.el~.
Some blocks override this default (e.g. see the section [[*early-init.el][early-init.el]]).

This file also is exported to HTML.
The template used is "readtheorg" from [[https://github.com/fniessen/org-html-themes][org-html-themes]] .

NOTE: the code blocks in the sections marked with TODO have ~:tangle no~ in their header args so they are not tangled to my ~init.el~.
** Why vanilla?
I used [[https://github.com/hlissner/doom-emacs][DOOM emacs]] for an year and I was an happy user.
One day I woke up with the wish to understand Emacs a little more.

After about a week (12/01/2021) I had restored my configuration and in the process I understood better concepts such as:
- hooks
- minor and major modes
- advices
  
It is still a long journey but I am glad I started it.
** Structure of this configuration
- In the second section some optimization of startup time, mostly stolen from smart people.
- In the third section we bootstrap ~straight~ and  ~use-package~, our package managers
- In the fourth section we configure ~emacs~ with sane defaults and extend some its core features (e.g. ~help-mode~)
- In the fifth section we set up ~general~, which we use to manage our keybindings and lazy loading of packages. Afterwards we configure ~evil~, for modal editing.
- The remaining sections declare my personal configuration of UI and core packages, leveraging the great tools described in this list.
* Startup
** early-init.el
Taken from DOOM's early init
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  ;; NOTE: early-init.el is now generated from readme.org.  Please edit that file instead

  ;; Defer garbage collection further back in the startup process
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  ;; In Emacs 27+, package initialization occurs before `user-init-file' is
  ;; loaded, but after `early-init-file'. Doom handles package initialization, so
  ;; we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)
  ;; Do not allow loading from the package cache (same reason).
  (setq package-quickstart nil)

  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  ;; Disable GUI elements
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
  ;; compiled ahead-of-time when they are installed and site files are compiled
  ;; when gccemacs is installed.
  (setq comp-deferred-compilation nil)
#+END_SRC

** Startup optimization
Taken from DOOM's init
#+BEGIN_SRC emacs-lisp
  ;; NOTE: init.el is now generated from readme.org.  Please edit that file instead
  ;; repeating here in case early-init.el is not loaded with chemacs

  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)
  (setq package-enable-at-startup nil)
  (setq comp-deferred-compilation nil)

  ;; `file-name-handler-alist' is consulted on every `require', `load' and various
  ;; path/io functions. You get a minor speed up by nooping this. However, this
  ;; may cause problems on builds of Emacs where its site lisp files aren't
  ;; byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)
  (unless (daemonp)
    (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
    (setq file-name-handler-alist nil)
    ;; Restore `file-name-handler-alist' later, because it is needed for handling
    ;; encrypted or compressed files, among other things.
    (defun doom-reset-file-handler-alist-h ()
      ;; Re-add rather than `setq', because changes to `file-name-handler-alist'
      ;; since startup ought to be preserved.
      (dolist (handler file-name-handler-alist)
        (add-to-list 'doom--initial-file-name-handler-alist handler))
      (setq file-name-handler-alist doom--initial-file-name-handler-alist))
    (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
    (add-hook 'after-init-hook #'(lambda ()
                                   ;; restore after startup
                                   (setq gc-cons-threshold 16777216
                                         gc-cons-percentage 0.1)))
    )
  ;; Ensure Doom is running out of this file's directory
  (setq user-emacs-directory (file-name-directory load-file-name))
#+END_SRC

* Package manager
** bootstrap straight and straight-use-package
Some rules/conventions:
- Prefer ~:init~ to ~:custom~. Prefer multiple ~setq~ expressions to one.
- Default to ~:defer t~, use ~:demand~ to force loading
- When packages do not require installation e.g. ~dired~, we need ~:straight nil~ and ~:ensure nil~
- If you specify ~:commands~ and bind those to keys, the package will be loaded when the commands are first executed
    - If you use ~:general~ and bind commands to keys it will automatically load the package on first invokation

#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t)
  (setq straight-vc-git-default-clone-depth 1)
  (setq use-package-always-defer t)
  (defvar bootstrap-version)
  (let* ((straight-repo-dir
          (expand-file-name "straight/repos" user-emacs-directory))
         (bootstrap-file
          (concat straight-repo-dir "/straight.el/bootstrap.el"))
         (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (shell-command
       (concat
        "mkdir -p " straight-repo-dir " && "
        "git -C " straight-repo-dir " clone "
        "https://github.com/raxod502/straight.el.git && "
        "git -C " straight-repo-dir " checkout 2d407bc")))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
  ;; This is a variable that has been renamed but straight still refers when
  ;; doing :sraight (:no-native-compile t)
  (setq comp-deferred-compilation-black-list nil)
#+END_SRC

** straight lockfile
We can run ~M-x straight-freeze-versions~ to write the file ~straight/versions/default.el~.
The content of the file can then be kept in a code block, under version control.
The code block can then be tangle again to ~straight/versions/default.el~.
We can then restore package versions using ~M-x straight-thaw-versions~.

#+begin_src emacs-lisp :tangle no
(("ESS" . "a9e9367976658391126c907b6a5dfc8ad3033ebd")
 ("a.el" . "3d341eb7813ee02b00ab28e11c915295bfd4b5a7")
 ("ace-window" . "c7cb315c14e36fded5ac4096e158497ae974bec9")
 ("aggressive-indent-mode" . "b0ec0047aaae071ad1647159613166a253410a63")
 ("all-the-icons-dired" . "fc2dfa1e9eb8bf1c402a675e7089638d702a27a5")
 ("all-the-icons.el" . "6917b08f64dd8487e23769433d6cb9ba11f4152f")
 ("annalist.el" . "134fa3f0fb91a636a1c005c483516d4b64905a6d")
 ("avy" . "e92cb37457b43336b765630dbfbea8ba4be601fa")
 ("bui.el" . "28a9b0a36cb69b931cf32db7546ad5c6589752cf")
 ("centaur-tabs" . "23eda0a0292a84c7e0a0aa2b598f9e29c7e5b54f")
 ("centered-cursor-mode.el" . "4093821cc9759ca5a3c6e527d4cc915fc3a5ad74")
 ("cfrs" . "a5225c1830ae4c5a98fc0973d62d131321c059cd")
 ("cider" . "9c137c52cf5b769fcc52b4e8108acda10638f766")
 ("clojure-mode" . "53ef8ac076ae7811627fbdd408e519ab7fca9a0b")
 ("company-mode" . "6116c4617a7934acfe84cb82a058e9b198f0f480")
 ("consult" . "7a2f751421f4a1601811fa59571bd64baf7ec900")
 ("dap-mode" . "612388d0b85e77972a9c28391bac6224a63408c7")
 ("dash.el" . "8879c41d30211ae2e72298e354fdffef627a3836")
 ("dired-single" . "98c2102429fcac6fbfdba9198c126eb1b3dcc4e5")
 ("doom-modeline" . "49816da1a6c05e6215ec3c8aac6c5eabeb47e74c")
 ("eldoc" . "b906386cf04029e01228fde239c3a2e3e5b53603")
 ("elisp-refs" . "b3634a4567c655a1cda51b217629849cba0ac6a7")
 ("emacs-async" . "14f48de586b0977e3470f053b810d77b07ea427a")
 ("emacs-bind-map" . "bf4181e3a41463684adfffc6c5c305b30480e30f")
 ("emacs-dashboard" . "2b1ef13392be2f07d2a52636edf578b89512d501")
 ("emacs-hide-mode-line" . "88888825b5b27b300683e662fa3be88d954b1cea")
 ("emacs-jupyter" . "360cae2c70ab28c7a7848c0c56473d984f0243e5")
 ("emacs-libvterm" . "6f95a1b2949f60539fd92e3a63011801a7e765fd")
 ("emacs-memoize" . "51b075935ca7070f62fae1d69fe0ff7d8fa56fdd")
 ("emacs-python-pytest" . "4a1c4c8915c12e540d41aae1d4e326a2362da541")
 ("emacs-tree-sitter" . "076865a6c879840ab61e0aa7b336a2e3e1f97cd4")
 ("emacs-undo-fu" . "c0806c1903c5a0e4c69b6615cdc3366470a9b8ca")
 ("emacs-web-server" . "22ce66ea43e0eadb9ec1d691a35d9695fc29cee6")
 ("emacs-websocket" . "36deb3ff85368d000a88435d5a645ffbab490654")
 ("emacs-which-key" . "428aedfce0157920814fbb2ae5d00b4aea89df88")
 ("emacs-winum" . "c5455e866e8a5f7eab6a7263e2057aff5f1118b9")
 ("emacs-zmq" . "eb4e01715cbf2f356a8ae5e678ffec3380a907dc")
 ("emacsmirror-mirror" . "73d68771488284cceb42f70fda551e0a516cb249")
 ("embark" . "f78ad7e1dfc0864b8def91888d1866dd47d69ed3")
 ("envrc" . "18caf5154f61d7f78cd4719d999e0fa6ef52345f")
 ("epl" . "78ab7a85c08222cd15582a298a364774e3282ce6")
 ("evil" . "d6cf6680ec52733ea78dc530ed75fadc5171c758")
 ("evil-cleverparens" . "8c45879d49bfa6d4e414b6c1df700a4a51cbb869")
 ("evil-collection" . "f53ef08224f709c732740d45b373ef3617f6d759")
 ("evil-goggles" . "08a22058fd6a167f9f1b684c649008caef571459")
 ("evil-lisp-state" . "3c65fecd9917a41eaf6460f22187e2323821f3ce")
 ("evil-mc" . "7dfb2ca5ac00c249cb2f55cd6fa91fb2bfb1117e")
 ("evil-nerd-commenter" . "563cdc154b1f29d181b883563dd37be7eafafdee")
 ("evil-surround" . "346d4d85fcf1f9517e9c4991c1efe68b4130f93a")
 ("exec-path-from-shell" . "d14d6d2966efe5a1409f84a6b9d998268f74761d")
 ("f.el" . "1814209e2ff43cf2e6d38c4cd476218915f550fb")
 ("fringe-helper.el" . "ef4a9c023bae18ec1ddd7265f1f2d6d2e775efdd")
 ("gcmh" . "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")
 ("general.el" . "a0b17d207badf462311b2eef7c065b884462cb7c")
 ("git-gutter" . "34ae23dfed4f2afb06286c120cbc7793cf4c5bc1")
 ("git-gutter-fringe" . "4f19866494fa1debfa319382913e39a153431634")
 ("git-timemachine" . "8d675750e921a047707fcdc36d84f8439b19a907")
 ("gnu-elpa-mirror" . "fcb3cf5ba5f16885f7851885c954222aee6f03ab")
 ("goto-chg" . "2af612153bc9f5bed135d25abe62f46ddaa9027f")
 ("helpful" . "584ecc887bb92133119f93a6716cdf7af0b51dca")
 ("highlight-indent-guides" . "cf352c85cd15dd18aa096ba9d9ab9b7ab493e8f6")
 ("hl-todo" . "9661a462d86b22293caaa4c3d94f971a15dbf1d5")
 ("ht.el" . "2850301d19176b8d3bb6cc8d95af6ab7e529bd56")
 ("hydra" . "2d553787aca1aceb3e6927e426200e9bb9f056f1")
 ("lsp-mode" . "f51741e2bbf002381d9bc51a6c7ae504c11d827b")
 ("lsp-pyright" . "71ff088ac4c93b0edd012f305a3dfd1602c5d21e")
 ("lsp-treemacs" . "64e375fcc700d4d47cf52ad912e6863d479e3bfa")
 ("lsp-ui" . "62568188b7cbc0758a0c4bfb57647708406ddf51")
 ("magit" . "25f432551347468ce97b8b03987e59092e91f8f0")
 ("marginalia" . "d38a27867bcec0bafa43e8d1bd3fd96a32b15d31")
 ("markdown-mode" . "e250a8465f805644d372c264eb0572f569d7f2a1")
 ("melpa" . "ea7b38971ea1ac02d1de128d3526f9b7b9f601f9")
 ("modus-themes" . "2a7228e09402f2f69aabf4fd8f367e5f6e8248b3")
 ("nix-mode" . "53ea839a52335d089699d3530bae8ea5914cdbb6")
 ("ob-async" . "de1cd6c93242a4cb8773bbe115b7be3d4dd6b97e")
 ("org" . "94d1753ec8b171442f0e789ca38beee2415198b0")
 ("org-reverse-datetree" . "be24274dd62cd3c586cbea99c8f73db251bf319d")
 ("org-superstar-mode" . "7f83636db215bf5a10edbfdf11d12a132864a914")
 ("org-tree-slide" . "d6e8e91433dfe4968f1343b483f2680f45a77d52")
 ("ox-gfm" . "99f93011b069e02b37c9660b8fcb45dab086a07f")
 ("ox-ipynb" . "919b694763035c0ea04a3a368418355185f896b8")
 ("page-break-lines" . "69caea070379f3324c530e96e06625c3cd097cb9")
 ("paredit" . "8330a41e8188fe18d3fa805bb9aa529f015318e8")
 ("parseclj" . "eff941126859bc9e949eae5cd6c2592e731629f2")
 ("parseedn" . "90cfe3df51b96f85e346f336c0a0ee6bf7fee508")
 ("persistent-scratch" . "57221e5fdff22985c0ea2f3e7c282ce823ea5932")
 ("persp-projectile" . "533808b3e4f8f95a1e3ed9c55d9aa720277ebd5f")
 ("perspective-el" . "2f2b59e693f08b8d9c81062fca25e6076b6e7f8d")
 ("pfuture" . "d7926de3ba0105a36cfd00811fd6278aea903eef")
 ("pkg-info" . "76ba7415480687d05a4353b27fea2ae02b8d9d61")
 ("posframe" . "ae8ac91744010c8975f07cf18282f58ce56605d0")
 ("powerline" . "b293abf83c0a2b2988af19dd0ef0426c3b1d1501")
 ("prescient.el" . "42adc802d3ba6c747bed7ea1f6e3ffbbdfc7192d")
 ("projectile" . "c31bd41c0b9d6fba8837ebfd3a31dec0b3cd73c6")
 ("python-mode" . "41b123b4d4906cce7591900a952bb75a38c5296c")
 ("queue" . "52206c0f78afc0dfb9a287cb928c1e725103336d")
 ("rainbow-delimiters" . "f43d48a24602be3ec899345a3326ed0247b960c6")
 ("s.el" . "43ba8b563bee3426cead0e6d4ddc09398e1a349d")
 ("selectrum" . "87ec4296f4fc9baf05dbaff0b9e63b2b4afd5bb6")
 ("sesman" . "edee869c209c016e5f0c5cbb8abb9f3ccd2d1e05")
 ("shrink-path.el" . "c14882c8599aec79a6e8ef2d06454254bb3e1e41")
 ("smartparens" . "63695c64233d215a92bf08e762f643cdb595bdd9")
 ("spinner" . "61f59fab44d22cd5add61a1baf3f0b88a5d829d7")
 ("straight.el" . "2d407bccd9378f1d5218f8ba2ae85c6be73fbaf1")
 ("transient" . "90e640fe8fa3f309c7cf347501e86ca5cd0bd85e")
 ("transpose-frame" . "12e523d70ff78cc8868097b56120848befab5dbc")
 ("treemacs" . "a0a1e96393c41b909ea75a35e0c8972047cfd1ae")
 ("use-package" . "caa92f1d64fc25480551757d854b4b49981dfa6b")
 ("with-editor" . "6735180e73e787b79535c245b162249b70dbf841")
 ("yasnippet" . "5cbdbf0d2015540c59ed8ee0fcf4788effdf75b6"))
:beta
#+end_src

** Enable use-package statistics
If you'd like to see how many packages you've loaded, what stage of initialization they've reached, and how much aggregate time they've spent (roughly), you can enable use-package-compute-statistics after loading use-package but before any use-package forms, and then run the command M-x use-package-report to see the results. The buffer displayed is a tabulated list. You can use S in a column to sort the rows based on it.

#+BEGIN_SRC emacs-lisp
(setq use-package-compute-statistics t)
#+END_SRC

* Emacs
** Sane defaults
Inspired by https://github.com/natecox/dotfiles/blob/master/emacs/emacs.d/nathancox.org
When the package is not to be found on ~melpa~, we need to set ~:straight nil~ and ~:ensure nil~ to instruct ~straight~ not to download it.
We do the same for ~dired~.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    (setq inhibit-startup-screen t
          default-fill-column 80
          initial-scratch-message nil
          sentence-end-double-space nil
          ring-bell-function 'ignore
          frame-resize-pixelwise t)

    (setq user-full-name "Luca Cambiaghi"
          user-mail-address "luca.cambiaghi@me.com")

    (setq read-process-output-max (* 1024 1024))

    ;; always allow 'y' instead of 'yes'.
    (defalias 'yes-or-no-p 'y-or-n-p)

    ;; default to utf-8 for all the things
    (set-charset-priority 'unicode)
    (setq locale-coding-system 'utf-8
          coding-system-for-read 'utf-8
          coding-system-for-write 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

    ;; write over selected text on input... like all modern editors do
    (delete-selection-mode t)

    ;; enable recent files mode.
    (recentf-mode t)

    ;; auto-close parentheses
    (electric-pair-mode +1)
    ;; disable auto pairing for <
    (add-function :before-until electric-pair-inhibit-predicate
                  (lambda (c) (eq c ?<)))

    ;; don't want ESC as a modifier
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    ;; Don't persist a custom file, this bites me more than it helps
    (setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
    (setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
    (setq enable-local-variables :all)     ; fix =defvar= warnings

    ;; stop emacs from littering the file system with backup files
    (setq make-backup-files nil
          auto-save-default nil
          create-lockfiles nil)

    ;; follow symlinks 
    (setq vc-follow-symlinks t)

    ;; don't show any extra window chrome
    (when (window-system)
      (tool-bar-mode -1)
      (toggle-scroll-bar -1))

    ;; Main typeface
    ;; point size * 10, so 18*10 =180
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 180)
    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 180)
    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 180 :weight 'regular)

    ;; enable winner mode globally for undo/redo window layout changes
    (winner-mode t)

    ;; less noise when compiling elisp
    (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

    ;; clean up the mode line
    (display-time-mode -1)
    (setq column-number-mode t)

    ;; use common convention for indentation by default
    (setq-default indent-tabs-mode t)
    (setq-default tab-width 2)

    ;; use a reasonable line length
    (setq-default fill-column 120)
    )
#+END_SRC

** macOS
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'super)     ; command as super
  (setq mac-option-modifier 'meta)     ; alt as meta
  (setq mac-control-modifier 'control)) ; control as... control
#+END_SRC

** Garbage collector magic hack
Used by DOOM to manage garbage collection
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :demand
    :config
    (gcmh-mode 1))
#+END_SRC

** helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :after evil
    :init
    (setq evil-lookup-func #'helpful-at-point)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** eldoc
#+begin_src emacs-lisp
  (use-package eldoc
    :hook (emacs-lisp-mode cider-mode))
#+end_src

** exec path from shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :hook (emacs-startup . (lambda ()
                             (setq exec-path-from-shell-arguments '("-l")) ; removed the -i for faster startup
                             (exec-path-from-shell-initialize)))
    ;; :config
    ;; (exec-path-from-shell-copy-envs
    ;;  '("GOPATH" "GO111MODULE" "GOPROXY"
    ;;    "NPMBIN" "LC_ALL" "LANG" "LC_TYPE"
    ;;    "SSH_AGENT_PID" "SSH_AUTH_SOCK" "SHELL"
    ;;    "JAVA_HOME"))
    )
#+end_src

** no littering
#+begin_src emacs-lisp
(use-package no-littering)
#+end_src

* Keybindings
** general
In this block we load ~general~ and define bindings for generic commands e.g. ~find-file~.
The commands provided by packages should be binded in the ~use-package~ block, thanks to the ~:general~ keyword.
NOTE: We need to load ~general~ before ~evil~, otherwise the ~:general~ keyword in the ~use-package~ blocks won't work.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :config
    (general-evil-setup)

    (general-create-definer my/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC")

    (general-create-definer my/local-leader-keys
      :states '(normal visual)
      :keymaps 'override
      :prefix ","
      :global-prefix "SPC m")

    (my/leader-keys
      "SPC" '(execute-extended-command :which-key "execute command")
      "`" '(switch-to-prev-buffer :which-key "prev buffer")
      ";" '(eval-expression :which-key "eval sexp")

      "b" '(:ignore t :which-key "buffer")
      "br"  'revert-buffer
      "bd"  'kill-current-buffer
      "bD" 'kill-buffer-and-window
      "bs" '((lambda () (interactive) (pop-to-buffer "*scratch*")) :wk "scratch")

      "c" '(:ignore t :which-key "code")

      "f" '(:ignore t :which-key "file")
      "fD" '(delete-file :wk "delete")
      "ff"  'find-file
      "fs" 'save-buffer
      "fr" 'recentf-open-files

      "g" '(:ignore t :which-key "git")

      "h" '(:ignore t :which-key "describe")
      "hv" 'describe-variable
      "he" 'view-echo-area-messages
      "hp" 'describe-package
      "hf" 'describe-function
      "hF" 'describe-face
      "hk" 'describe-key

      "o" '(:ignore t :which-key "org")

      "p" '(:ignore t :which-key "project")

      "s" '(:ignore t :which-key "search")

      "t"  '(:ignore t :which-key "toggle")
      "t d"  '(toggle-debug-on-error :which-key "debug on error")
      "t v" '((lambda () (interactive) (visual-line-mode 'toggle)) :wk "visual line")

      "w" '(:ignore t :which-key "window")
      "wl"  'windmove-right
      "wh"  'windmove-left
      "wk"  'windmove-up
      "wj"  'windmove-down
      "wr" 'winner-redo
      "wd"  'delete-window
      "wD" 'kill-buffer-and-window
      "wu" 'winner-undo
      "wr" 'winner-redo
      "wm"  '(delete-other-windows :wk "maximize")
      )

    (my/local-leader-keys
      "d" '(:ignore t :which-key "debug")
      "e" '(:ignore t :which-key "eval")
      "t" '(:ignore t :which-key "test")
      )
    )
#+END_SRC

** evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :demand t
    :general
    (my/leader-keys
      "wv" 'evil-window-vsplit
      "ws" 'evil-window-split)
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-want-Y-yank-to-eol t)
    ;; move to window when splitting
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (setq-local evil-scroll-count 0)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    ;; Use visual line motions even outside of visual-line-mode buffers
    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    )

  (use-package evil-collection
    :after evil
    :demand
    :config
    (evil-collection-init))

  (use-package evil-goggles
    :after evil
    :demand
    :init
    (setq evil-goggles-duration 0.05)
    :config
    (evil-goggles-mode)
    (evil-goggles-use-diff-faces))
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand t
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  ;; (setq which-key-idle-delay 0.5)
  :config
  (which-key-mode))
#+END_SRC

* UI
** all the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

** doom modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :demand
    :init
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-env-enable-python nil)
    (setq doom-modeline-height 15)
    (setq doom-modeline-project-detection 'projectile)
    :config
    (doom-modeline-mode 1))
#+END_SRC

** Fancy titlebar for macOS
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon  nil)
(setq frame-title-format nil)
#+END_SRC

** Modus themes
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :straight (modus-themes :type git :host gitlab :repo "protesilaos/modus-themes" :branch "main")
    :hook (emacs-startup . my/load-modus-theme)
    :init
    (setq modus-themes-operandi-color-overrides
          '((bg-main . "#fefcf4")
            (bg-dim . "#faf6ef")
            (bg-alt . "#f7efe5")
            (bg-hl-line . "#f4f0e3")
            (bg-active . "#e8dfd1")
            (bg-inactive . "#f6ece5")
            (bg-region . "#c6bab1")
            (bg-header . "#ede3e0")
            (bg-tab-bar . "#dcd3d3")
            (bg-tab-active . "#fdf6eb")
            (bg-tab-inactive . "#c8bab8")
            (fg-unfocused ."#55556f")))

    (setq modus-themes-vivendi-color-overrides
          '((bg-main . "#100b17")
            (bg-dim . "#161129")
            (bg-alt . "#181732")
            (bg-hl-line . "#191628")
            (bg-active . "#282e46")
            (bg-inactive . "#1a1e39")
            (bg-region . "#393a53")
            (bg-header . "#202037")
            (bg-tab-bar . "#262b41")
            (bg-tab-active . "#120f18")
            (bg-tab-inactive . "#3a3a5a")
            (fg-unfocused . "#9a9aab")))
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs t
          modus-themes-fringes 'nil ; {nil,'subtle,'intense}
          modus-themes-mode-line '3d ; {nil,'3d,'moody}
          modus-themes-intense-hl-line nil
          modus-themes-prompts nil ; {nil,'subtle,'intense}
          modus-themes-completions 'moderate ; {nil,'moderate,'opinionated}
          modus-themes-diffs nil ; {nil,'desaturated,'fg-only}
          modus-themes-org-blocks 'greyscale ; {nil,'greyscale,'rainbow}
          modus-themes-headings  ; Read further below in the manual for this one
          '((1 . line)
            (t . rainbow-line-no-bold))
          modus-themes-variable-pitch-headings nil
          modus-themes-scale-headings t
          modus-themes-scale-1 1.1
          modus-themes-scale-2 1.15
          modus-themes-scale-3 1.21
          modus-themes-scale-4 1.27
          modus-themes-scale-5 1.33)
    (defun my/load-modus-theme ()
      ;;Light for the day
      (run-at-time "07:00" (* 60 60 24)
                   (lambda () (modus-themes-load-operandi)))
      ;; Dark for the night
      (run-at-time "00:00" (* 60 60 24)
                   (lambda () (modus-themes-load-vivendi)))
      (run-at-time "15:00" (* 60 60 24)
                   (lambda () (modus-themes-load-vivendi)))
      ))
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :after projectile
    :demand
    :init
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-center-content t)
    (setq dashboard-projects-backend 'projectile)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            ;; (agenda . 5)
                            ))
    ;; (setq dashboard-startup-banner [VALUE])
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** centaur tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :hook (emacs-startup . centaur-tabs-mode)
    :general
    (general-nmap "gt" 'centaur-tabs-forward
      "gT" 'centaur-tabs-backward)
    :init
    (setq centaur-tabs-set-icons t)
    (setq ccentaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker "M"
          centaur-tabs-cycle-scope 'tabs)
    (setq centaur-tabs-set-close-button nil)
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-group-by-projectile-project)
    )
#+end_src

** centered cursor mode
#+begin_src emacs-lisp
  (use-package centered-cursor-mode
    :general (my/leader-keys "t -" (lambda () (interactive) (centered-cursor-mode 'toggle))))
#+end_src

** hide mode line
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :commands (hide-mode-line-mode))
#+end_src

** popup management
Taken from https://github.com/gilbertw1/bmacs/blob/master/bmacs.org#popup-rules
#+begin_src emacs-lisp :tangle no
  (defvar my-popups '()
    "A list of popup matchers that determine if a popup can be escaped")


  (cl-defun my/make-popup (buffer-rx &optional (height 0.4))
    (add-to-list 'my-popups buffer-rx)
    (add-to-list 'display-buffer-alist
                 `(,buffer-rx
                   (display-buffer-reuse-window
                    display-buffer-in-side-window)
                   (reusable-frames . visible)
                   (side            . bottom)
                   (window-height   . ,height))))

  (my/make-popup (rx bos "*Messages*" eos))
  (my/make-popup (rx bos "*Backtrace*" eos))
  (my/make-popup (rx bos "*Warnings*" eos))
  (my/make-popup (rx bos "*compilation*" eos))
  (my/make-popup (rx bos "*Help*" eos))
  (my/make-popup (rx bos "*helpful*" eos))
  (my/make-popup (rx bos "*scratch*" eos) 0.4)
#+end_src

Taken from https://emacs.stackexchange.com/questions/46210/reuse-help-window
#+begin_src emacs-lisp
  (setq display-buffer-alist
        `((,(rx bos (or "*Apropos*" "*Help*" "*helpful" "*info*" "*Summary*") (0+ not-newline))
           (display-buffer-reuse-mode-window display-buffer-below-selected)
           (window-height . 0.33)
           (mode apropos-mode help-mode helpful-mode Info-mode Man-mode))))
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-to-list 'display-buffer-alist
               '((lambda (buffer _) (with-current-buffer buffer
                                      (seq-some (lambda (mode)
                                                  (derived-mode-p mode))
                                                '(help-mode))))
                 (display-buffer-reuse-window display-buffer-below-selected)
                 (reusable-frames . visible)
                 (window-height . 0.33)))
#+end_src

** winum
#+begin_src emacs-lisp
(use-package winum
:general
(my/leader-keys
"1" '(winum-select-window-1 :wk "win 1")
"2" '(winum-select-window-2 :wk "win 2")
"3" '(winum-select-window-3 :wk "win 3"))
:config
(winum-mode))
#+end_src

** transpose frame
#+begin_src emacs-lisp
  (use-package transpose-frame
    :general
    (my/leader-keys
      "w t" '(transpose-frame "transpose")
      "w f" '(rotate-frame "flip")))
#+end_src

** persistent scratch
#+begin_src emacs-lisp
(use-package persistent-scratch
:demand
:config
(persistent-scratch-setup-default))
#+end_src

** olivetti mode
#+begin_src emacs-lisp
  (use-package olivetti
    :general
    (my/leader-keys
      "t o" '(olivetti-mode :wk "olivetti"))
    :init
    (setq olivetti-body-width 0.7)
    (setq olivetti-minimum-body-width 80)
    (setq olivetti-recall-visual-line-mode-entry-state t))
#+end_src

* Completion framework
** selectrum
#+BEGIN_SRC emacs-lisp
  (use-package selectrum
    :after embark
    :demand
    :general
    (selectrum-minibuffer-map "C-j" 'selectrum-next-candidate
                              "C-k" 'selectrum-previous-candidate)
    :config
    (selectrum-mode t)
    )
#+END_SRC

** prescient
#+BEGIN_SRC emacs-lisp
  (use-package selectrum-prescient
    :after selectrum
    :demand
    :config
    (prescient-persist-mode t)
    (selectrum-prescient-mode t)
    )

  (use-package company-prescient
    :after company
    :demand
    :config
    (company-prescient-mode t))
#+END_SRC

** marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after selectrum
    :demand
    :init
    (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :config (marginalia-mode t))
#+END_SRC

** embark
   Taken from https://github.com/oantolin/embark

   You can act on candidates with =C-o= and ask to remind bindings with =C-h=
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :demand
    :general
    (general-nmap "C-l" 'embark-act)
    (selectrum-minibuffer-map "C-l" #'embark-act)
    :config
    ;; For Selectrum users:
    (defun current-candidate+category ()
      (when selectrum-active-p
        (cons (selectrum--get-meta 'category)
              (selectrum-get-current-candidate))))

    (add-hook 'embark-target-finders #'current-candidate+category)

    (defun current-candidates+category ()
      (when selectrum-active-p
        (cons (selectrum--get-meta 'category)
              (selectrum-get-current-candidates
               ;; Pass relative file names for dired.
               minibuffer-completing-file-name))))

    (add-hook 'embark-candidate-collectors #'current-candidates+category)

    ;; No unnecessary computation delay after injection.
    (add-hook 'embark-setup-hook 'selectrum-set-selected-candidate)
    )
#+END_SRC

** TODO embark-consult
#+begin_src emacs-lisp :tangle no
(use-package embark-consult
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src

** consult
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :general
    (my/leader-keys
      "s o" '(consult-outline :which-key "outline")
      "s s" 'consult-line
      "y" '(consult-yank-pop :which-key "yank")
      "b b" 'consult-buffer
      ;; TODO consult mark
      "f r" 'consult-recent-file
      "s !" '(consult-flymake :wk "flymake")
      "s p" '(consult-ripgrep :wk "ripgrep")
      "t t" '(consult-theme :wk "theme")
      )
    ;; :init
    ;; (setq consult-preview-key "C-l")
    ;; (setq consult-narrow-key ">")
    :config
    (consult-preview-mode)
    )

  (use-package consult-selectrum
    :after selectrum
    :demand)
#+END_SRC

* Core packages
** project
*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand
    :general
    (my/leader-keys
      "p" '(:keymap projectile-command-map :which-key "projectile")
      "p a" 'projectile-add-known-project
      "p t" 'projectile-run-vterm)
    :init
    (when (file-directory-p "~/git")
      (setq projectile-project-search-path '("~/git")))
    (setq projectile-completion-system 'default)
    (setq projectile-switch-project-action #'projectile-find-file)
    (setq projectile-project-root-files '(".envrc" ".projectile" "project.clj" "deps.edn"))
    ;; (add-to-list 'projectile-globally-ignored-directories "straight") ;; TODO
    :config
    (defadvice projectile-project-root (around ignore-remote first activate)
      (unless (file-remote-p default-directory) ad-do-it))
    (projectile-mode))
#+END_SRC

*** perspective
#+BEGIN_SRC emacs-lisp
  (use-package perspective
    :general
    (my/leader-keys
      "<tab> <tab>" 'persp-switch
      "<tab> `" 'persp-switch-last
      "<tab> d" 'persp-kill
      "<tab> D" '((lambda () (interactive) (persp-kill (persp-current-name))) :wk "kill current")
      "<tab> X" '((lambda () (interactive) (persp-kill (persp-names))) :wk "all")
      )
    :config
    (persp-mode))

  (use-package persp-projectile
    :general
    (my/leader-keys
      "p p" 'projectile-persp-switch-project))
#+END_SRC

** git
*** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :general
    (my/leader-keys
      "g g" 'magit-status
      "g G" 'magit-status-here
      "g l" '(magit-log :wk "log"))
    :init
    (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    (setq magit-log-arguments '("--graph" "--decorate" "--color")))
#+END_SRC

*** TODO forge
#+BEGIN_SRC emacs-lisp :tangle no
;; NOTE: Make sure to configure a GitHub token before using this package!
;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
(use-package forge :after magit)
#+END_SRC

*** git-timemachine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :hook (git-time-machine-mode . evil-normalize-keymaps)
    :init (setq git-timemachine-show-minibuffer-details t)
    :general
    (general-nmap "SPC g t" 'git-timemachine-toggle)
    (git-timemachine-mode-map
     "C-k" 'git-timemachine-show-previous-revision
     "C-j" 'git-timemachine-show-next-revision
     "q" 'git-timemachine-quit))
#+end_src

*** git-gutter
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook
    (((org-mode prog-mode) . diff-hl-mode)
     (magit-pre-refresh . diff-hl-magit-pre-refresh)
     (magit-post-refresh . diff-hl-magit-post-refresh))
    :init
    (setq diff-hl-draw-borders nil)
    )
#+end_src

*** hydra-smerge
#+begin_src emacs-lisp
  (use-package smerge-mode
    :straight (:type built-in)
    :after hydra
    :general
    (my/leader-keys "g m" 'hydra-smerge)
    :init
    (defhydra hydra-smerge (:hint nil
                                  :pre (smerge-mode 1)
                                  ;; Disable `smerge-mode' when quitting hydra if
                                  ;; no merge conflicts remain.
                                  :post (smerge-auto-leave))
      "
                                                    ╭────────┐
  Movement   Keep           Diff              Other │ smerge │
  ╭─────────────────────────────────────────────────┴────────╯
     ^_g_^       [_b_] base       [_<_] upper/base    [_C_] Combine
     ^_C-k_^     [_u_] upper      [_=_] upper/lower   [_r_] resolve
     ^_k_ ↑^     [_l_] lower      [_>_] base/lower    [_R_] remove
     ^_j_ ↓^     [_a_] all        [_H_] hightlight
     ^_C-j_^     [_RET_] current  [_E_] ediff             ╭──────────
     ^_G_^                                            │ [_q_] quit"
      ("g" (progn (goto-char (point-min)) (smerge-next)))
      ("G" (progn (goto-char (point-max)) (smerge-prev)))
      ("C-j" smerge-next)
      ("C-k" smerge-prev)
      ("j" next-line)
      ("k" previous-line)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("H" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("R" smerge-kill-current)
      ("q" nil :color blue)))
#+end_src

** hydra
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src

** Highlight indentation guides
#+BEGIN_SRC emacs-lisp
  ;; add a visual intent guide
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :init
    (setq highlight-indent-guides-method 'column)
    ;; (setq highlight-indent-guides-character ?|)
    (setq highlight-indent-guides-responsive 'stack)
    )
#+END_SRC

** rainbow parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode)
           (org-mode . rainbow-delimiters-mode)))
#+END_SRC

** syntax highlighting
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
    :hook (python-mode . (lambda ()
                           (require 'tree-sitter)
                           (require 'tree-sitter-langs)
                           (require 'tree-sitter-hl)
                           (tree-sitter-hl-mode))))

  (use-package tree-sitter-langs
    :after tree-sitter)
#+END_SRC

** company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :demand
    :general
    (company-active-map
     "TAB"       nil    ;; interferes with yasnippet
     [tab]       nil)
    :init
    (setq company-backends '((company-capf :with company-yasnippet)
                             (company-keywords company-files)))
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0.0)
    ;; always show candidates in overlay tooltip
    (setq company-frontends '(company-pseudo-tooltip-frontend))
    ;; don't fill the only candidate
    (setq company-auto-complete nil
          company-auto-complete-chars nil)
    :config
    (global-company-mode)
    )
#+END_SRC

** TODO company box
Taken from DOOM
#+begin_src emacs-lisp :tangle no
  (use-package company-box
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-show-single-candidate t
          company-box-backends-colors nil
          company-box-max-candidates 50
          company-box-icons-alist 'company-box-icons-all-the-icons
          company-box-icons-all-the-icons
          (let ((all-the-icons-scale-factor 0.8))
            `((Unknown       . ,(all-the-icons-material "find_in_page"             :face 'all-the-icons-purple))
              (Text          . ,(all-the-icons-material "text_fields"              :face 'all-the-icons-green))
              (Method        . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (Function      . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (Constructor   . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (Field         . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (Variable      . ,(all-the-icons-material "adjust"                   :face 'all-the-icons-blue))
              (Class         . ,(all-the-icons-material "class"                    :face 'all-the-icons-red))
              (Interface     . ,(all-the-icons-material "settings_input_component" :face 'all-the-icons-red))
              (Module        . ,(all-the-icons-material "view_module"              :face 'all-the-icons-red))
              (Property      . ,(all-the-icons-material "settings"                 :face 'all-the-icons-red))
              (Unit          . ,(all-the-icons-material "straighten"               :face 'all-the-icons-red))
              (Value         . ,(all-the-icons-material "filter_1"                 :face 'all-the-icons-red))
              (Enum          . ,(all-the-icons-material "plus_one"                 :face 'all-the-icons-red))
              (Keyword       . ,(all-the-icons-material "filter_center_focus"      :face 'all-the-icons-red))
              (Snippet       . ,(all-the-icons-material "short_text"               :face 'all-the-icons-red))
              (Color         . ,(all-the-icons-material "color_lens"               :face 'all-the-icons-red))
              (File          . ,(all-the-icons-material "insert_drive_file"        :face 'all-the-icons-red))
              (Reference     . ,(all-the-icons-material "collections_bookmark"     :face 'all-the-icons-red))
              (Folder        . ,(all-the-icons-material "folder"                   :face 'all-the-icons-red))
              (EnumMember    . ,(all-the-icons-material "people"                   :face 'all-the-icons-red))
              (Constant      . ,(all-the-icons-material "pause_circle_filled"      :face 'all-the-icons-red))
              (Struct        . ,(all-the-icons-material "streetview"               :face 'all-the-icons-red))
              (Event         . ,(all-the-icons-material "event"                    :face 'all-the-icons-red))
              (Operator      . ,(all-the-icons-material "control_point"            :face 'all-the-icons-red))
              (TypeParameter . ,(all-the-icons-material "class"                    :face 'all-the-icons-red))
              (Template      . ,(all-the-icons-material "short_text"               :face 'all-the-icons-green))
              (ElispFunction . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
              (ElispVariable . ,(all-the-icons-material "check_circle"             :face 'all-the-icons-blue))
              (ElispFeature  . ,(all-the-icons-material "stars"                    :face 'all-the-icons-orange))
              (ElispFace     . ,(all-the-icons-material "format_paint"             :face 'all-the-icons-pink)))))

    ;; Disable tab-bar in company-box child frames
    (add-to-list 'company-box-frame-parameters '(tab-bar-lines . 0))
    )
#+end_src

** envrc
#+begin_src emacs-lisp
    (use-package envrc
      :hook ((python-mode . envrc-mode)
             (org-mode . envrc-mode)))
#+end_src

** yasnippet
#+begin_src emacs-lisp
    (use-package yasnippet
      :hook
      ((text-mode . yas-minor-mode)
       (prog-mode . yas-minor-mode)
       (org-mode . yas-minor-mode)))
#+end_src

** evil-multicursor
The prefix is =g r=, inspect the commands with ~which-key~
#+begin_src emacs-lisp
  (use-package evil-mc
    :general
    (general-nmap "gz" #'mc-hydra/body)
    :config
    (defhydra mc-hydra (:color pink :hint nil
                               :pre (evil-mc-pause-cursors))
      "
  ^Match^            ^Line-wise^           ^Manual^
  ^^^^^^----------------------------------------------------
  _Z_: match all     _J_: make & go down   _R_: remove all
  _m_: make & next   _K_: make & go up     
  _M_: make & prev   ^ ^                   
  _n_: skip & next   ^ ^                   
  _N_: skip & prev

  Current pattern: %`evil-mc-pattern

  "
      ("Z" #'evil-mc-make-all-cursors)
      ("m" #'evil-mc-make-and-goto-next-match)
      ("M" #'evil-mc-make-and-goto-prev-match)
      ("n" #'evil-mc-skip-and-goto-next-match)
      ("N" #'evil-mc-skip-and-goto-prev-match)
      ("J" #'evil-mc-make-cursor-move-next-line)
      ("K" #'evil-mc-make-cursor-move-prev-line)
      ("R" #'evil-mc-undo-all-cursors)
      ("q" #'evil-mc-resume-cursors "quit" :color blue)
      ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))
    (global-evil-mc-mode +1)
    )
#+end_src

** evil-nerd-commenter
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :general
    (general-nmap "gcc" 'evilnc-comment-or-uncomment-lines)
    (general-vmap "gc" 'evilnc-comment-or-uncomment-lines)
    )
#+END_SRC

** evil-surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :general
  (:states 'operator
   "s" 'evil-surround-edit
   "S" 'evil-Surround-edit)
  (:states 'visual
   "S" 'evil-surround-region
   "gS" 'evil-Surround-region))
#+END_SRC

** undo fu
#+begin_src emacs-lisp
  (use-package undo-fu
    :general
    (:states 'normal
             "u" 'undo-fu-only-undo
             "\C-r" 'undo-fu-only-redo))
#+end_src

** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :general
    (my/leader-keys
      "'" 'vterm-other-window)
    :config
    (setq vterm-shell (executable-find "fish")
          vterm-max-scrollback 10000))
#+END_SRC

** dired
- Jump to current file with =SPC f j=
- Hide details with ~(~
- Hide dotfiles with =H=
- Mark with ~m~, unmark with ~u~
- Invert selection with ~t~
- ~*~ has some helpers for marking
- First mark some files and then ~K~ to "hide" them
- Open directory in right window with ~S-RET~
  + When copying from left window, target will be right window
  + Copy with ~C~
- Open subdir in buffer below with ~I~
- Open files with macos with =O=
- View files with =go= and exit with ~q~

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight (:type built-in)
    :general
    (my/leader-keys
      "f d" 'dired
      "f j" 'dired-jump))

  (use-package dired-single
    :after dired
    :general
    (dired-mode-map
     :states 'normal
     "h" 'dired-single-up-directory
     "l" 'dired-single-buffer
     "q" 'quit-window))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** restart-emacs
#+begin_src emacs-lisp
  (use-package restart-emacs
    :general
    (my/leader-keys
      "R" '(restart-emacs :wk "restart"))
    )
#+end_src

* Org mode
** org mode configuration
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . my/org-mode-setup)
           (org-mode . prettify-symbols-mode)
           (org-mode . (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config))))
    :general
    (my/leader-keys
      "o c" '(org-capture :wk "capture")
      "o a" '(org-agenda-list :wk "agenda")
      "o t" '(org-todo-list :wk "todo list"))
    (my/local-leader-keys
      :keymaps 'org-mode-map
      "e" '(org-export-dispatch :wk "export")
      "l" '(:ignore true :wk "link")
      "l l" '(org-insert-link :wk "insert link")
      "l s" '(org-store-link :wk "store link")
      "n" '(org-toggle-narrow-to-subtree :wk "narrow subtree")
      "t" '(org-todo :wk "heading todo"))
    (org-mode-map
     :states '(normal)
     "z i" '(org-toggle-inline-images :wk "inline images"))
    :init
    ;; general settings
    (setq org-directory "~/Dropbox/org"
          org-image-actual-width nil
          +org-export-directory "~/Dropbox/org/export"
          org-default-notes-file "~/Dropbox/org/personal/tasks/todo.org"
          org-id-locations-file "~/Dropbox/org/.orgids"
          org-agenda-files '("~/dropbox/org/personal/tasks/birthdays.org" "~/dropbox/org/personal/tasks/todo.org" "~/dropbox/Notes/Test.inbox.org")
          ;; org-export-in-background t
          org-catch-invisible-edits 'smart)
    ;; disable modules for faster startup
    (setq org-modules
          '(;; ol-w3m
            ;; ol-bbdb
            ;; ol-bibtex
            ol-docview
            ;; ol-gnus
            ;; ol-info
            ;; ol-irc
            ;; ol-mhe
            ;; ol-rmail
            ;; ol-eww
            ))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "PROJ(p)" "|" "DONE(d)")))
    (setq org-capture-templates
          `(("b" "Blog" entry
             (file+headline "personal/tasks/todo.org" "Blog")
             ,(concat "* WRITE %^{Title} %^g\n"
                      "SCHEDULED: %^t\n"
                      ":PROPERTIES:\n"
                      ":CAPTURED: %U\n:END:\n\n"
                      "%i%?"))
            ("d" "New Diary Entry" entry(file+olp+datetree"~/Dropbox/org/personal/diary.org" "Daily Logs")
             "* %^{thought for the day}
               :PROPERTIES:
               :CATEGORY: %^{category}
               :SUBJECT:  %^{subject}
               :MOOD:     %^{mood}
               :END:
               :RESOURCES:
               :END:

               \*What was one good thing you learned today?*:
               - %^{whatilearnedtoday}

               \*List one thing you could have done better*:
               - %^{onethingdobetter}

               \*Describe in your own words how your day was*:
               - %?")
            ("i" "Inbox" entry
             (file+headline "personal/tasks/todo.org" "Inbox")
             ,(concat "* %^{Title}\n"
                      ":PROPERTIES:\n"
                      ":CAPTURED: %U\n"
                      ":END:\n\n"
                      "%i%l"))
            ("u" "New URL Entry" entry
             (file+function "~/Dropbox/org/personal/dailies.org" org-reverse-datetree-goto-date-in-file)
             "* [[%^{URL}][%^{Description}]] %^g %?")
            ("w" "Work" entry
             (file+headline "personal/tasks/todo.org" "Work")
             ,(concat "* TODO [#A] %^{Title} :@work:\n"
                      "SCHEDULED: %^t\n"
                      ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
                      "%i%?"))

            ))
    (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "»")
                                           ("#+END_SRC" . "«")
                                           ("#+begin_src" . "»")
                                           ("#+end_src" . "«")))
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    ;; (setq org-agenda-custom-commands
    ;;         '(("d" "Dashboard"
    ;;            ((agenda "" ((org-deadline-warning-days 7)))
    ;;             (todo "NEXT"
    ;;                   ((org-agenda-overriding-header "Next Tasks")))
    ;;             (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
    ;;           ("n" "Next Tasks"
    ;;            ((todo "NEXT"
    ;;                   ((org-agenda-overriding-header "Next Tasks")))))
    ;;           ("W" "Work Tasks" tags-todo "+work-email")
    ;;           ))
    (defun my/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))
    (defun my/org-babel-tangle-config ()
      (when (string-equal (file-name-directory (buffer-file-name))
                          ;; file-truename resolves symlinks
                          (file-truename (expand-file-name user-emacs-directory)))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))
    :config
    ;; visual
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    ;; org habit
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    ;; (efs/org-font-setup)
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("clj" . "src clojure"))
    (add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python"))
    ;; latex
    (setq org-latex-compiler "xelatex")
    (add-to-list 'org-export-backends 'beamer)
    )
#+END_SRC

#+begin_src emacs-lisp
(use-package org-reverse-datetree
:after org)
#+end_src

** better bullets
#+BEGIN_SRC emacs-lisp
    (use-package org-superstar
      :hook (org-mode . org-superstar-mode)
      :init
      (setq org-superstar-headline-bullets-list '("✖" "✚" "◆" "▶" "○")
            org-superstar-special-todo-items t
            ;; org-ellipsis "⤵"
            ;; org-ellipsis "▼"
            ;; org-ellipsis "..."
            org-ellipsis " ↴ "
            )
      )
#+END_SRC

** todo highlight
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :init
    (setq hl-todo-keyword-faces
          '(("TODO"   . "#FF4500")
            ("FIXME"  . "#FF0000")
            ("STRT"  . "#A020F0")
            ("PROJ"   . "#1E90FF")))
    )
#+end_src

** org babel
#+BEGIN_SRC emacs-lisp
  (use-package org
    :general
    (my/local-leader-keys
      :keymaps 'org-mode-map
      "," '(org-edit-special :wk "edit")
      "-" '(org-babel-demarcate-block :wk "split block"))
    (my/local-leader-keys
      :keymaps 'org-src-mode-map
      "," '(org-edit-src-exit :wk "exit")) ;;FIXME
    :init
    (setq org-confirm-babel-evaluate nil)
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t))))

  ;; enable mermaid diagram blocks
  ;; (use-package ob-mermaid
  ;;   :custom (ob-mermaid-cli-path "~/.asdf/shims/mmdc"))
#+END_SRC

** ob-async
#+begin_src emacs-lisp
  (use-package ob-async
    :hook (org-load . (lambda () (require 'ob-async)))
    :init
    (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-R" "jupyter-julia")))
#+end_src

** ob-jupyter
Note:
- We can only load ~ob-jupyter~ when we have ~jupyter~ on our ~PATH~.
  + We assume ~jupyter~ is always installed in a virtual env associated with an ~.envrc~ file
  + We load jupyter when we activate ~envrc-mode~ if ~jupyter~ is available

#+begin_src emacs-lisp
  (use-package jupyter
    :straight (:no-native-compile t :no-byte-compile t) ;; otherwise we get jupyter-channel void
    :hook ((envrc-mode . my/load-ob-jupyter)
           (jupyter-repl-persistent-mode . (lambda ()  ;; we activate org-interaction-mode ourselves
                                             (when (derived-mode-p 'org-mode)
                                               (jupyter-org-interaction-mode)))))
    :init
    (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                         (:pandoc t)
                                                         (:kernel . "python3")))
    (setq org-babel-default-header-args:jupyter-R '((:pandoc t)
                                                    (:async . "yes")
                                                    (:kernel . "ir")))
    (defun my/load-ob-jupyter ()
      ;; only try to load in org-mode
      (when (derived-mode-p 'org-mode)
        ;; skip if already loaded
        (unless (member '(jupyter . t) org-babel-load-languages)
          ;; only load if jupyter is available
          (when (executable-find "jupyter")
            (org-babel-do-load-languages 'org-babel-load-languages
                                         (append org-babel-load-languages
                                                 '((jupyter . t))))))))
    (cl-defmethod jupyter-org--insert-result (_req context result)
      (let ((str
             (org-element-interpret-data
              (jupyter-org--wrap-result-maybe
               context (if (jupyter-org--stream-result-p result)
                           (thread-last result
                             jupyter-org-strip-last-newline
                             jupyter-org-scalar)
                         result)))))
        (if (< (length str) 100000)
            (insert str)
          (insert (format ": Result was too long! Length was %d" (length str)))))
      (when (/= (point) (line-beginning-position))
        ;; Org objects such as file links do not have a newline added when
        ;; converting to their string representation by
        ;; `org-element-interpret-data' so insert one in these cases.
        (insert "\n")))
  :config
  ;;Remove text/html since it's not human readable
  ;; (delete :text/html jupyter-org-mime-types)
  ;; (require 'tramp)
  (with-eval-after-load 'org-src
    (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
    (add-to-list 'org-src-lang-modes '("jupyter-R" . R))))
#+end_src

** exporters
#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :after org)

  (use-package ox-ipynb
    :straight (ox-ipynb :type git :host github :repo "jkitchin/ox-ipynb")
    :after org)
#+END_SRC

** org-tree-slide
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :after org
    :hook ((org-tree-slide-play . (lambda () (+remap-faces-at-start-present)))
           (org-tree-slide-stop . (lambda () (+remap-faces-at-stop-present))))
    :general
    (my/leader-keys
      "t p" '(org-tree-slide-mode :wk "present"))
    (general-nmap
      :keymaps '(org-tree-slide-mode-map org-mode-map)
      "C-j" 'org-tree-slide-move-next-tree
      "C-k" 'org-tree-slide-move-previous-tree)
    :init
    (setq org-tree-slide-activate-message "Presentation mode ON")
    (setq org-tree-slide-deactivate-message "Presentation mode OFF")
    (setq org-tree-slide-indicator nil)
    (defun +remap-faces-at-start-present ()
      ;; (setq-local face-remapping-alist '((default (:height 1.50) variable-pitch)
      ;;                                    (org-verbatim (:height 1.35) org-verbatim)
      ;;                                    (org-block (:height 1.25) org-block)))
      (hide-mode-line-mode 1)
      (diff-hl-mode 0)
      (centaur-tabs-mode 0))
    ;; TODO maybe also enable olivetti mode?
    (defun +remap-faces-at-start-present-term ()
      (interactive)
      (setq-local face-remapping-alist '((default (:height 1.50) variable-pitch)
                                         (org-verbatim (:height 1.35) org-verbatim)
                                         (org-block (:height 1.25) org-block))))
    (defun +remap-faces-at-stop-present ()
      (setq-local face-remapping-alist '((default variable-pitch default)))
      (hide-mode-line-mode 0)
      (diff-hl-mode 1)
      (centaur-tabs-mode 1))
    (setq org-tree-slide-breadcrumbs nil)
    (setq org-tree-slide-header nil)
    (setq org-tree-slide-slide-in-effect nil)
    (setq org-tree-slide-heading-emphasis nil)
    (setq org-tree-slide-cursor-init t)
    (setq org-tree-slide-modeline-display nil)
    (setq org-tree-slide-skip-done nil)
    (setq org-tree-slide-skip-comments t)
    (setq org-tree-slide-fold-subtrees-skipped t)
    (setq org-tree-slide-skip-outline-level 8) ;; or 0?
    (setq org-tree-slide-never-touch-face t)
    ;; :config
    ;; (org-tree-slide-presentation-profile)
    )
#+end_src

** evil-org-mode
Taken from DOOM, mostly for the nice ~+org/insert-item-below~ and ~+org/dwim-at-point~ functions.
#+begin_src emacs-lisp
  (use-package evil-org-mode
    :straight (evil-org-mode :type git :host github :repo "hlissner/evil-org-mode")
    :hook (org-mode . evil-org-mode)
    :general
    (general-nmap
      :keymaps '(evil-org-mode-map org-mode-map )
      "<C-return>"      #'+org/insert-item-below
      "<C-S-return>"    #'+org/insert-item-above
      "<return>"   #'+org/dwim-at-point)
    :init
    (defun +org--insert-item (direction)
      (let ((context (org-element-lineage
                      (org-element-context)
                      '(table table-row headline inlinetask item plain-list)
                      t)))
        (pcase (org-element-type context)
          ;; Add a new list item (carrying over checkboxes if necessary)
          ((or `item `plain-list)
           ;; Position determines where org-insert-todo-heading and org-insert-item
           ;; insert the new list item.
           (if (eq direction 'above)
               (org-beginning-of-item)
             (org-end-of-item)
             (backward-char))
           (org-insert-item (org-element-property :checkbox context))
           ;; Handle edge case where current item is empty and bottom of list is
           ;; flush against a new heading.
           (when (and (eq direction 'below)
                      (eq (org-element-property :contents-begin context)
                          (org-element-property :contents-end context)))
             (org-end-of-item)
             (org-end-of-line)))

          ;; Add a new table row
          ((or `table `table-row)
           (pcase direction
             ('below (save-excursion (org-table-insert-row t))
                     (org-table-next-row))
             ('above (save-excursion (org-shiftmetadown))
                     (+org/table-previous-row))))

          ;; Otherwise, add a new heading, carrying over any todo state, if
          ;; necessary.
          (_
           (let ((level (or (org-current-level) 1)))
             ;; I intentionally avoid `org-insert-heading' and the like because they
             ;; impose unpredictable whitespace rules depending on the cursor
             ;; position. It's simpler to express this command's responsibility at a
             ;; lower level than work around all the quirks in org's API.
             (pcase direction
               (`below
                (let (org-insert-heading-respect-content)
                  (goto-char (line-end-position))
                  (org-end-of-subtree)
                  (insert "\n" (make-string level ?*) " ")))
               (`above
                (org-back-to-heading)
                (insert (make-string level ?*) " ")
                (save-excursion (insert "\n"))))
             (when-let* ((todo-keyword (org-element-property :todo-keyword context))
                         (todo-type    (org-element-property :todo-type context)))
               (org-todo
                (cond ((eq todo-type 'done)
                       ;; Doesn't make sense to create more "DONE" headings
                       (car (+org-get-todo-keywords-for todo-keyword)))
                      (todo-keyword)
                      ('todo)))))))

        (when (org-invisible-p)
          (org-show-hidden-entry))
        (when (and (bound-and-true-p evil-local-mode)
                   (not (evil-emacs-state-p)))
          (evil-insert 1))))

    (defun +org/insert-item-below (count)
      "Inserts a new heading, table cell or item below the current one."
      (interactive "p")
      (dotimes (_ count) (+org--insert-item 'below)))

    (defun +org/insert-item-above (count)
      "Inserts a new heading, table cell or item above the current one."
      (interactive "p")
      (dotimes (_ count) (+org--insert-item 'above)))

    (defun +org/dwim-at-point (&optional arg)
      "Do-what-I-mean at point.
    If on a:
    - checkbox list item or todo heading: toggle it.
    - clock: update its time.
    - headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
      subtree; update statistics cookies/checkboxes and ToCs.
    - footnote reference: jump to the footnote's definition
    - footnote definition: jump to the first reference of this footnote
    - table-row or a TBLFM: recalculate the table's formulas
    - table-cell: clear it and go into insert mode. If this is a formula cell,
      recaluclate it instead.
    - babel-call: execute the source block
    - statistics-cookie: update it.
    - latex fragment: toggle it.
    - link: follow it
    - otherwise, refresh all inline images in current tree."
      (interactive "P")
      (let* ((context (org-element-context))
             (type (org-element-type context)))
        ;; skip over unimportant contexts
        (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
          (setq context (org-element-property :parent context)
                type (org-element-type context)))
        (pcase type
          (`headline
           (cond ((memq (bound-and-true-p org-goto-map)
                        (current-active-maps))
                  (org-goto-ret))
                 ((and (fboundp 'toc-org-insert-toc)
                       (member "TOC" (org-get-tags)))
                  (toc-org-insert-toc)
                  (message "Updating table of contents"))
                 ((string= "ARCHIVE" (car-safe (org-get-tags)))
                  (org-force-cycle-archived))
                 ((or (org-element-property :todo-type context)
                      (org-element-property :scheduled context))
                  (org-todo
                   (if (eq (org-element-property :todo-type context) 'done)
                       (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                           'todo)
                     'done))))
           ;; Update any metadata or inline previews in this subtree
           (org-update-checkbox-count)
           (org-update-parent-todo-statistics)
           (when (and (fboundp 'toc-org-insert-toc)
                      (member "TOC" (org-get-tags)))
             (toc-org-insert-toc)
             (message "Updating table of contents"))
           (let* ((beg (if (org-before-first-heading-p)
                           (line-beginning-position)
                         (save-excursion (org-back-to-heading) (point))))
                  (end (if (org-before-first-heading-p)
                           (line-end-position)
                         (save-excursion (org-end-of-subtree) (point))))
                  (overlays (ignore-errors (overlays-in beg end)))
                  (latex-overlays
                   (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                               overlays))
                  (image-overlays
                   (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                               overlays)))
             (+org--toggle-inline-images-in-subtree beg end)
             (if (or image-overlays latex-overlays)
                 (org-clear-latex-preview beg end)
               (org--latex-preview-region beg end))))

          (`clock (org-clock-update-time-maybe))

          (`footnote-reference
           (org-footnote-goto-definition (org-element-property :label context)))

          (`footnote-definition
           (org-footnote-goto-previous-reference (org-element-property :label context)))

          ((or `planning `timestamp)
           (org-follow-timestamp-link))

          ((or `table `table-row)
           (if (org-at-TBLFM-p)
               (org-table-calc-current-TBLFM)
             (ignore-errors
               (save-excursion
                 (goto-char (org-element-property :contents-begin context))
                 (org-call-with-arg 'org-table-recalculate (or arg t))))))

          (`table-cell
           (org-table-blank-field)
           (org-table-recalculate arg)
           (when (and (string-empty-p (string-trim (org-table-get-field)))
                      (bound-and-true-p evil-local-mode))
             (evil-change-state 'insert)))

          (`babel-call
           (org-babel-lob-execute-maybe))

          (`statistics-cookie
           (save-excursion (org-update-statistics-cookies arg)))

          ((or `src-block `inline-src-block)
           (org-babel-execute-src-block arg))

          ((or `latex-fragment `latex-environment)
           (org-latex-preview arg))

          (`link
           (let* ((lineage (org-element-lineage context '(link) t))
                  (path (org-element-property :path lineage)))
             (if (or (equal (org-element-property :type lineage) "img")
                     (and path (image-type-from-file-name path)))
                 (+org--toggle-inline-images-in-subtree
                  (org-element-property :begin lineage)
                  (org-element-property :end lineage))
               (org-open-at-point arg))))

          ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
           (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
             (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

          (_
           (if (or (org-in-regexp org-ts-regexp-both nil t)
                   (org-in-regexp org-tsr-regexp-both nil  t)
                   (org-in-regexp org-link-any-re nil t))
               (call-interactively #'org-open-at-point)
             (+org--toggle-inline-images-in-subtree
              (org-element-property :begin context)
              (org-element-property :end context)))))))

    :config
    (add-hook 'evil-org-mode-hook #'evil-normalize-keymaps)
    )
#+end_src

** org-html-themify
#+begin_src emacs-lisp
(use-package org-html-themify
  :straight
  (org-html-themify
   :type git
   :host github
   :repo "DogLooksGood/org-html-themify"
   :files ("*.el" "*.js" "*.css"))
  :hook (org-mode . org-html-themify-mode)
  :init
  (setq org-html-themify-themes
   '((dark . modus-vivendi)
     (light . modus-operandi))))
#+end_src

* Programming languages
** lsp mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . (lambda ()
                        (setq-local evil-lookup-func #'lsp-describe-thing-at-point)))
    :general
    (my/leader-keys
      "c" '(:keymap lsp-command-map))
    (my/local-leader-keys
      :keymaps 'lsp-mode-map
      "r" '(lsp-rename :wk "rename")
      "i" '(:ignore t :which-key "import")
      "i o" '(lsp-rename :wk "optimize"))
    (lsp-mode-map
     :states '(normal)
     "gd" 'lsp-find-definition
     "gD" 'lsp-find-references)
    :init
    (setq lsp-restart 'ignore)
    (setq lsp-eldoc-enable-hover nil)
    (setq lsp-enable-file-watchers nil)
    (setq lsp-signature-auto-activate nil)
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook ((lsp-mode . lsp-ui-mode))
    :init
    (setq lsp-ui-doc-show-with-cursor nil)
    (setq lsp-ui-doc-show-with-mouse nil)
    )
#+END_SRC

** dap-mode
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :hook
    (dap-terminated . my/hide-debug-windows)
    :general
    (my/local-leader-keys
      :keymaps 'python-mode-map
      "d d" '(dap-debug :wk "debug")
      "d b" '(dap-breakpoint-toggle :wk "breakpoint")
      "d c" '(dap-continue :wk "continue")
      "d e" '(dap-eval-thing-at-point :wk "eval")
      "d i" '(dap-step-in :wk "step in")
      "d q" '(dap-disconnect :wk "quit")
      "d r" '(dap-ui-repl :wk "repl")
      "d h" '(dap-hydra :wk "hydra"))
    :init
    (setq dap-auto-configure-features '(locals repl))
    (setq dap-python-debugger 'debugpy)
    ;; show stdout
    (setq dap-auto-show-output t)
    (setq dap-output-window-max-height 50)
    (setq dap-output-window-min-height 50)
    ;; hide stdout window  when done
    (defun my/hide-debug-windows (session)
      "Hide debug windows when all debug sessions are dead."
      (unless (-filter 'dap--session-running (dap--get-sessions))
        (kill-buffer (dap--debug-session-output-buffer (dap--cur-session-or-die)))))
    (defun my/dap-python--executable-find (orig-fun &rest args)
      (executable-find "python"))
    :config
    ;; configure windows
    (require 'dap-ui)
    (setq dap-ui-buffer-configurations
          `((,dap-ui--locals-buffer . ((side . right) (slot . 1) (window-width . 0.50)))
            ;; (,dap-ui--breakpoints-buffer . ((side . left) (slot . 1) (window-width . ,treemacs-width)))
            ;; (,dap-ui--sessions-buffer . ((side . left) (slot . 2) (window-width . ,treemacs-width)))
            (,dap-ui--repl-buffer . ((side . right) (slot . 2) (window-width . 0.50)))))
    (dap-ui-mode 1)
    ;; python virtualenv
    (require 'dap-python)
    (advice-add 'dap-python--pyenv-executable-find :around #'my/dap-python--executable-find)
    ;; debug templates
    (defvar dap-script-args (list :type "python"
                                  :args []
                                  :cwd "${workspaceFolder}"
                                  :justMyCode :json-false
                                  :request "launch"
                                  :debugger 'debugpy
                                  :name "dap-debug-script"))
    (defvar dap-test-args (list :type "python-test-at-point"
                                :args ""
                                :justMyCode :json-false
                                ;; :cwd "${workspaceFolder}"
                                :request "launch"
                                :module "pytest"
                                :debugger 'debugpy
                                :name "dap-debug-test-at-point"))
    (defvar empties-forecast (list
                              :name "empties forecast"
                              :type "python"
                              :request "launch"
                              :program "./src/empties/forecasting/predict.py"
                              :env '(("NO_JSON_LOG" . "true"))
                              :args ["--source01" "./data/empties-history-sample.parquet"
                                     "--source02" "./data/model_selection.files"
                                     "--source03" "./data/booking-feature-sample.parquet"
                                     "--source04" "./data/holiday-2019-05-24-1558683595"
                                     "--output-data" "./data/predictions.parquet"
                                     "--output-metrics" "./data/metrics.json"]
                              ))
    (dap-register-debug-template "dap-debug-script" dap-script-args)
    (dap-register-debug-template "dap-debug-test-at-point" dap-test-args)
    ;; bind the templates
    (my/local-leader-keys
      :keymaps 'python-mode-map
      "d t" '((lambda () (interactive) (dap-debug dap-test-args)) :wk "test")
      "d s" '((lambda () (interactive) (dap-debug dap-script-args)) :wk "script")
      )
    )
#+END_SRC

** Python
*** python mode
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    ;; :init
    ;; (defun my/ipython-use-venv (orig-fun &rest args)
    ;;   (when (getenv "VIRTUAL_ENV")
    ;;     (when-let ((python-shell-interpreter (executable-find "ipython")))
    ;;       (apply orig-fun args)))
    ;;   (apply orig-fun args))
    ;; (advice-add 'run-python :around #'my/ipython-use-venv)
    :hook (envrc-mode . (lambda ()
                          (when (executable-find "ipython")
                            (setq python-shell-interpreter (executable-find "ipython")))))
    :config
    (setq python-shell-interpreter (executable-find "ipython")     ;; FIXME
          python-shell-interpreter-args "-i --simple-prompt --no-color-info"
          python-shell-prompt-regexp "In \\[[0-9]+\\]: "
          python-shell-prompt-block-regexp "\\.\\.\\.\\.: "
          python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
          python-shell-completion-setup-code
          "from IPython.core.completerlib import module_completion"
          python-shell-completion-string-code
          "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))
#+END_SRC

*** lsp-pyright
Here the configuration options: https://github.com/emacs-lsp/lsp-pyright#configuration
#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright
    :init
    (setq lsp-pyright-typechecking-mode "basic") ;; too much noise in "real" projects
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))
#+END_SRC

*** pytest
#+begin_src emacs-lisp
  (use-package python-pytest
    :general
    (my/local-leader-keys
      :keymaps 'python-mode-map
      "t t" '(python-pytest-dispatch :wk "dispatch")
      "t d" '(python-pytest-function :wk "defun"))
    :init
    (setq python-pytest-arguments '("--color" "--failed-first"))
    (defun my/pytest-use-venv (orig-fun &rest args)
      (if-let ((python-pytest-executable (executable-find "pytest")))
          (apply orig-fun args)
        (apply orig-fun args)))
    :config
    (advice-add 'python-pytest--run :around #'my/pytest-use-venv)
    )
#+end_src

*** flymake 
#+begin_src emacs-lisp
  (use-package flymake
    :straight (:type built-in)
    :hook (emacs-lisp-mode . flymake-mode)
    :init
    (setq python-flymake-command (executable-find "flake8"))
    (setq flymake-fringe-indicator-position 'right-fringe)
    :general
    (general-nmap "] !" 'flymake-goto-next-error)
    (general-nmap "[ !" 'flymake-goto-prev-error)
    )
#+end_src

*** jupyter
#+begin_src emacs-lisp
  (use-package jupyter
    :straight (:no-native-compile t :no-byte-compile t) ;; otherwise we get jupyter-channel void
    :general
    (my/local-leader-keys
      :keymaps 'python-mode-map
      "'" '(my/jupyter-repl :wk "jupyter REPL")
      "e e" '(jupyter-eval-line-or-region :wk "line")
      "e d" '(jupyter-eval-defun :wk "defun")
      "e b" '((call-interactively 'my/jupyter-eval-buffer) :wk "buffer"))
    (my/local-leader-keys
      :keymaps 'jupyter-repl-interaction-mode-map
      "k r" '(jupyter-repl-restart-kernel :wk "restart kernel"))
    :init
    (setq jupyter-repl-prompt-margin-width 4)
    (defun jupyter-command-venv (&rest args)
      "This overrides jupyter-command to use the virtualenv's jupyter"
      (let ((jupyter-executable (executable-find "jupyter")))
        (with-temp-buffer
          (when (zerop (apply #'process-file jupyter-executable nil t nil args))
            (string-trim-right (buffer-string))))))
    (defun my/jupyter-eval-buffer ()
      "Send the contents of BUFFER using `jupyter-current-client'."
      (interactive)
      (jupyter-eval-string (jupyter-load-file-code (buffer-file-name))))
    (defun my/jupyter-repl ()
      "If a buffer is already associated with a jupyter buffer, then pop to it. Otherwise start a jupyter kernel."
      (interactive)
      (if (bound-and-true-p jupyter-current-client)
          (jupyter-repl-pop-to-buffer)
        (call-interactively 'jupyter-repl-associate-buffer)))
    (advice-add 'jupyter-command :override #'jupyter-command-venv))
#+end_src

*** auto-import
#+begin_src emacs-lisp
  (use-package pyimport
    :general
    (my/local-leader-keys
      :keymaps 'python-mode-map
      "i i" '(pyimport-insert-missing :wk "autoimport")))
#+end_src

** R
*** ess
#+begin_src emacs-lisp
    (use-package ess
    :init
  (setq ess-eval-visibly 'nowait)
(setq ess-R-font-lock-keywords '((ess-R-fl-keyword:keywords . t)
                                   (ess-R-fl-keyword:constants . t)
                                   (ess-R-fl-keyword:modifiers . t)
                                   (ess-R-fl-keyword:fun-defs . t)
                                   (ess-R-fl-keyword:assign-ops . t)
                                   (ess-R-fl-keyword:%op% . t)
                                   (ess-fl-keyword:fun-calls . t)
                                   (ess-fl-keyword:numbers . t)
                                   (ess-fl-keyword:operators . t)
                                   (ess-fl-keyword:delimiters . t)
                                   (ess-fl-keyword:= . t)
                                   (ess-R-fl-keyword:F&T . t)))
      )
    
#+end_src

** emacs-lisp
*** elisp-mode
#+begin_src emacs-lisp
  (use-package elisp-mode
    :straight (:type built-in)
    :general
    (my/local-leader-keys
      :keymaps '(org-mode-map emacs-lisp-mode-map lisp-interaction-mode-map)
      "e l" '(eval-last-sexp :wk "last sexp")
      ;; "e" '(eval-last-sexp :states 'visual :wk "sexp")
      )
    (my/local-leader-keys
      :keymaps '(org-mode-map emacs-lisp-mode-map lisp-interaction-mode-map)
      :states 'visual
      "e" '(eval-last-sexp :wk "sexp"))
    )
#+end_src

*** evil-lisp state
#+begin_src emacs-lisp
  (use-package evil-lisp-state
    :after evil
    :demand
    :init
    ;; (setq evil-lisp-state-enter-lisp-state-on-command nil)
    (setq evil-lisp-state-global t)
    (setq evil-lisp-state-major-modes '(emacs-lisp-mode clojure-mode))
    :config
    (evil-lisp-state-leader "SPC l")
    )

#+end_src

** Nix
*** nix mode
#+begin_src emacs-lisp
(use-package nix-mode
:commands (nix-mode) ;;FIXME
:mode "\\.nix\\'")
#+end_src

** Clojure
*** Clojure mode
#+begin_src emacs-lisp
  (use-package clojure-mode
    :mode "\\.clj$"
    :init
    (setq clojure-align-forms-automatically t))
#+end_src

*** Cider
#+begin_src emacs-lisp
  (use-package cider
    :hook ((cider-repl-mode . evil-normalize-keymaps)
           (cider-mode . eldoc-mode))
    :general
    (my/local-leader-keys
      :keymaps 'clojure-mode-map
      "'" '(cider-jack-in :wk "jack in")
      "e l" 'cider-eval-last-sexp
      "e E" 'cider-pprint-eval-last-sexp-to-comment
      "e d" '(cider-eval-defun-at-point :wk "defun")
      "e D" 'cider-pprint-eval-defun-to-comment)
    (my/local-leader-keys
      :keymaps 'clojure-mode-map
      :states 'visual
      "e" 'cider-eval-region)
    :init
    (setq nrepl-hide-special-buffers t)
    (setq nrepl-sync-request-timeout nil)
    )
#+end_src

*** ob-clojure
#+begin_src emacs-lisp
(use-package org
:config
(require 'ob-clojure)
(setq org-babel-clojure-backend 'cider))
#+end_src

*** evil-cleverparens
This package provides additional text objects for LISPs.
For example, you can mark the outer form with =v a d=.
#+begin_src emacs-lisp
  (use-package evil-cleverparens
    :hook
    ((emacs-lisp-mode . evil-cleverparens-mode)
     (clojure-mode . evil-cleverparens-mode))
    :init
    (setq evil-move-beyond-eol t
          evil-cleverparens-use-additional-bindings nil
          evil-cleverparens-use-s-and-S nil
          ;; evil-cleverparens-swap-move-by-word-and-symbol t
          ;; evil-cleverparens-use-regular-insert t
          )
    ;; :config
    ;; (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    )
#+end_src

*** aggressive-indent
#+begin_src emacs-lisp
  ;; keep the file indented
  (use-package aggressive-indent
    :hook ((clojure-mode . aggressive-indent-mode)
           (emacs-lisp-mode . aggressive-indent-mode)))
#+end_src

** markdown
*** markdown-mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

* TODO missing / to fix
** Missing
*** Make different font configurations (toggle big font)
*** org-encrypt
https://beorgapp.com/learning/emacs-encryption/
** Half done
*** TODO ox-reveal
#+begin_src emacs-lisp :tangle no
(use-package! org-re-reveal
  :after ox
  :config
  ;; (setq org-re-reveal-root (expand-file-name "../../" (locate-library "dist/reveal.js" t))
  ;;       org-re-reveal-revealjs-version "4")
  (setq org-re-reveal-root "./reveal.js"
        org-re-reveal-revealjs-version "3.8"
        org-re-reveal-external-plugins  '((progress . "{ src: '%s/plugin/toc-progress/toc-progress.js', async: true, callback: function() { toc_progress.initialize(); toc_progress.create();} }"))
        ))
#+end_src

*** TODO scimax utilities for ob-jupyter
Found at https://github.com/nnicandro/emacs-jupyter/issues/160
#+BEGIN_SRC emacs-lisp :tangle no
(after! jupyter
  ;; * eldoc integration
  (defun scimax-jupyter-signature ()
    "Try to return a function signature for the thing at point."
    (when (and (eql major-mode 'org-mode)
               (string= (or (get-text-property (point) 'lang) "") "jupyter-python"))
      (save-window-excursion
     ;;; Essentially copied from (jupyter-inspect-at-point).
        (jupyter-org-with-src-block-client
         (cl-destructuring-bind (code pos)
             (jupyter-code-context 'inspect)
           (jupyter-inspect code pos nil 0)))
        (when (get-buffer "*Help*")
          (with-current-buffer "*Help*"
            (goto-char (point-min))
            (prog1
                (cond
                 ((re-search-forward "Signature:" nil t 1)
                  (buffer-substring (line-beginning-position) (line-end-position)))
                 ((re-search-forward "Docstring:" nil t 1)
                  (forward-line)
                  (buffer-substring (line-beginning-position) (line-end-position)))
                 (t
                  nil))
              ;; get rid of this so we don't accidentally show old results later
              (with-current-buffer "*Help*"
                (toggle-read-only)
                (erase-buffer))))))))

  (defun scimax-jupyter-eldoc-advice (orig-func &rest args)
    "Advice function to get eldoc signatures in blocks in org-mode."
    (or (scimax-jupyter-signature) (apply orig-func args)))


  (defun scimax-jupyter-turn-on-eldoc ()
    "Turn on eldoc signatures."
    (interactive)
    (advice-add 'org-eldoc-documentation-function :around #'scimax-jupyter-eldoc-advice))

  ( scimax-jupyter-turn-on-eldoc )
  )
#+END_SRC

** To fix
*** ~evil-scroll-down~ throwing error when ~centaur-tabs-mode~ is active
*** ~lsp-find-definition~ not being bound to ~gd~
*** ~org-ellipsis~ not shown in heading when ~git-gutter-fringe-mode~ is active
*** ~em~ not working
*** ~helpful-variable~ sometimes throws syntax error
*** ~switch-to-prev-buffer~ twice in a row should behave like ~cmd+tab~

